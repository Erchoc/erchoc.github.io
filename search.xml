<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[关于不同系统中的CRLF处理问题]]></title>
      <url>/2017/06/06/%E5%85%B3%E4%BA%8E%E4%B8%8D%E5%90%8C%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84CRLF%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>昨天胖子在群里问了个<code>git add</code>将代码从工作区加入暂存区时出现CRLF和LF转换的问题，正好一年前我刚玩linux时候研究过一阵子这个问题，今天早上使用tcg/voyager时候也出现了这个问题，这里我就稍微说一下问题出现的原因以及处理的办法。</p>
<p>如果您在Windows上进行编程，但你的合作团队有人在MacOS或者Linux上编程，你可能遇到这篇文章的说明问题。这是因为Windows在其文件中使用换行符和换行字符，而Mac和Linux系统只使用换行字符。这是跨平台工作令人难以置信的烦人事实; Windows上的许多编辑器用CRLF替换现有的LF行的结尾，或者当用户点击Enter键时插入两个行结束字符</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>首先我们必须知道现在电脑系统有windows，unix两大系列，unix下有很多变体称为<code>类Unix系统</code>，主要有MacOS，Linux，Hp-ux，Ibm-aix，Solaris等等。这其中由于Linux是开源集大成者，在它的体系中又衍生了以Fodora和Debian的两大阵营。类unix系统大多数时候是使用兼容的，但是windows和类unix系统之间无论是操作还是设计理念都不一样。</p>
</li>
<li><p>这次要提到的问题，起源就在上面这段话中。类unix系统中，回车就是回车(carriage return)，换行就是换行(line feed)，它们绑定13和10两个ASCII码值，回车和换行分别简称CR和LF。编辑代码的时候，Windows系统里面，每行结尾是”&lt;回车&gt;&lt;换行&gt;”，即”\r\n”；类Unix系统里，每行结尾是”&lt;回车&gt;”。</p>
</li>
<li><p>这样会导致什么后果？Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p>
</li>
<li><p>那么胖子的<code>git add</code>操作中为什么会提示LF将会被替换为CRLF呢？主要可能有下面几个原因？</p>
<ul>
<li>团队开发，每个人实用的操作系统平台不同。</li>
<li>胖子使用了双系统，开发时候切换系统进行编码。</li>
<li>没有设置PhpStorm和Atom等常用IDE均有的LF绑定功能。</li>
</ul>
</li>
<li><p>解决办法呢？主要看你从git角度去解决还是文件角度去思考。如果你想把文件本身进行转换，请使用<code>IDE的LF-CR绑定设置</code>或者<code>.editorconfig</code>文件转换，如果你从代码提交暂存区或者仓库来考虑，那么Git有几个配置选项来帮助解决这些问题，你应该看看下面的几行代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git config core.autocrlf true</div><div class="line"></div><div class="line">git config core.autocrlf input</div><div class="line"></div><div class="line">git config core.autocrlf false</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>core.autocrlf这个设置应该在Windows检查中留下CRLF结尾，但是在Mac和Linux系统以及存储库中的LF结束。</p>
</blockquote>
<ul>
<li><p>第一行：当你将文件添加到暂存区时，Git可以通过设置core.autocrlf将CRLF行结尾自动转换为LF来处理这类问题。如果您在Windows机器上，将其设置为true，那么当您pull代码时，将LF结尾转换为CRLF。</p>
</li>
<li><p>第二行：如果您使用的是Linux或Mac系统，那么当您pull文件时，您不希望Git自动转换它们; 然而，如果你的Windows猪队友把未经处理带CRLF格式的文件push到远程代码库，那么你可能希望Git来自动解决这个问题。可以通过将core.autocrlf设置为input来告知Git将CRLF转换为LF。</p>
</li>
<li><p>第三行：如果你是Windows程序员，只执行一个Windows项目或者所团队都是用windows系统甚至服务器都用windows，那么您可以关闭此功能，通过将配置值设置为false，将回车记录在存储库中。</p>
</li>
<li><p>参考地址：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2006/04/post_213.html" target="_blank" rel="external">阮一峰网络日志</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">维基百科：类Unix系统</a></li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[来聊聊Apache和Nginx的本地多站点虚拟域名配置]]></title>
      <url>/2017/06/05/%E6%9D%A5%E8%81%8A%E8%81%8AApache%E5%92%8CNginx%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%A4%9A%E7%AB%99%E7%82%B9%E8%99%9A%E6%8B%9F%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以前写过一篇在windows系统上使用PhpStudy配置本地Apache虚拟域名的教程，如果我已经是高贵的Mac用户，作为类Unix系统中的集大成者，我当然是要使用纯Apache和Nginx配置多站点了，怎么能还用集成环境呢？</p>
<p>这篇文章就是教你在命令行下操作配置Apache和Nginx下的本地域名多站点，如果你看过上一篇文章我写的配置的原理，那么阅读和学会这篇文章就是超级简单的，建议没看过的先看上一篇文章哦：<code>来聊聊PhpStudy环境本底多站点虚拟域名配置</code>。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>的饭撒上点</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BootStrap3入门学习(特效篇)]]></title>
      <url>/2017/06/05/BootStrap3%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E7%89%B9%E6%95%88%E7%AF%87/</url>
      <content type="html"><![CDATA[<blockquote>
<p>教程整理自慕课网(原文部分错误在这篇文章得到修改，本文版本Bootstrap3.3.7)。文章有上下两个篇幅，分别是BootStrap3在样式和JS特效果组件的学习和说明。这篇文章是下半部分JS特效组件篇章。</p>
</blockquote>
<a id="more"></a>
<p>fsd</p>
]]></content>
      
        
        <tags>
            
            <tag> 基础学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[无敌组合之Oh_My_Zsh配合iTerm2]]></title>
      <url>/2017/06/04/%E6%97%A0%E6%95%8C%E7%BB%84%E5%90%88%E4%B9%8BOh-My-Zsh%E9%85%8D%E5%90%88iTerm2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>由于iTerm2只有MacOS版本，所以首先你需要有一台Mac系统的电脑，黑苹果装的系统也行。然后你要知道iTerm2只是一个终端工具，比MacOS自带的terminal好在哪里呢？各种插件和命令提示，人性化的快捷键等等。</p>
<p>那么Oh_My_Zsh又是什么呢？你要知道shell是unix内核外面的一层壳，这个壳可以用很多材料去做，unix系统开发人员用塑料做了个csh壳，linux维护人员用泥巴做了个bash壳，考虑到类unix系统的shell兼容性，这些系统都会提供底层的接口让你选择安装和使用哪一种shell。不同的shell语言命令和语法都有点不同。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>那么就有人在一种名为zsh的shell基础上开发了一套让人高效工作的主题系统，名为Oh_My_Zsh。当然其实它可以在bash的基础上开发，完认为主要是考虑到bash的历史问题太久远等问题吧。</p>
</li>
<li><p>iTerm2是一个终端软件，其3.0版本相比2.0版本增加了很多新功能，具体区别可以在iTerm2 3.0的文档中看到。</p>
</li>
<li><p>iTerm2 2.1.4版的官方文档在这里：<a href="https://www.iterm2.com/documentation/2.1/" target="_blank" rel="external">https://www.iterm2.com/documentation/2.1/</a> 。</p>
</li>
<li><p>iTerm2 3.0版本的官方文档在这里：<a href="https://www.iterm2.com/documentation.html" target="_blank" rel="external">https://www.iterm2.com/documentation.html</a> 。</p>
</li>
<li><p>Oh_My_Zsh最强大的地方是它的插件系统，其次是无尽额度主题系统。</p>
</li>
<li><p>Oh_My_Zsh的官方文档：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki</a> 。</p>
</li>
<li><p>最后贴上iTerm2最值得收藏的一些快捷键，包括<code>标签</code>，<code>分屏</code>，<code>其他</code>，<code>常用快捷键</code>，<code>选中复制</code>，<code>自动完成</code>，<code>剪切历史</code>等等。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-ceddf809923385aa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1440/q/50" alt="iTerm2快捷键"></p>
]]></content>
      
        
        <tags>
            
            <tag> 高效工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新时代的composer组件化学习道路]]></title>
      <url>/2017/06/02/%E6%96%B0%E6%97%B6%E4%BB%A3%E7%9A%84composer%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AD%A6%E4%B9%A0%E9%81%93%E8%B7%AF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>自己搭建一个php的mvc框架，这个想法是我学CodeIgniter框架没几天就产生的想法，也确实去做了，可只是目录结构上有mvc的样子有什么用呢？写的代码没有一点面向对象的感觉，全是require引入文件。</p>
<p>使用composer搭建一个面向对象的组件化php框架，这个想法已经在我脑海中存在了好几个月。这个框架本打算暑假开始搭建，可最近心里老是想起这件事，于是今天早上5:37起床开电脑把开头的准备工作搞定了，其他composer组件添加并集成使用部分就慢慢搞好了，搞定路由下一个就是有点麻烦的Model数据库操作了。</p>
</blockquote>
<a id="more"></a>
<h4 id="进度汇报"><a href="#进度汇报" class="headerlink" title="进度汇报"></a>进度汇报</h4><ul>
<li><p>首先是composer项目的初始化我没有用使用composer init，而且通过composer.json开始项目。然后新建app框架应用目录，config项目配置目录，public前端访问目录，framework自定义类库。接着立刻开始github寻找合适了composer路由组件，考虑到初步学习就找了个加注释仅有163行代码的Macaw。然后前端建立index.php引入composer自动加载文件和config/routes.php路由配置文件，并在routes.php中使用Macaw调用不存在的静态方法get，第一个参数’/index’，在闭包函数中输出字符串。</p>
</li>
<li><p>这个时候通过修改hosts和vhost.conf将qframe.dev映射到本地public目录，我这里使用的是apache。访问该虚拟域名/index发现并没有成功输出字符串，但是访问index.php/index 却可以。这是因为apache的rewrite module开启后还需要书写.htaccess请求转发文件，这个步骤是apache伪静态的内容，我就直接把laravel的这个文件cp过来用了。</p>
</li>
<li><p>这时候用postman测试restful常用四大方法都没问题，路由部分就结束了。开始控制器和路由的关联。在app中新建Controllers并书写基础控制器和测试控制器，路由和控制器中的写法和laravel使用的写法类似，再次访问网址直接看不到界面了，这是因为composer.json没有加入自动加载配置。添加autoload键值对并使用classmap数组加载控制器目录，然后执行dump-composer更新锁文件即可。</p>
</li>
<li><p>接下来进入一个本可以很麻烦的阶段:数据库操作。由于RESTful以资源实体为目标，我将Model修改为具体的Entities，也方便后期分层添加Model层的其他处理目录。暂时我只能在控制器中连接数据库进行CURD操作，后期再来依赖注入。那么我们新建数据库，数据表，插入数据，然后在Entities中建立Article.php文章实体，composer.json的classmap数组加载该目录。</p>
</li>
<li><p>在Article的first静态方法中连接数据库并返回查询到的数据，在控制器中直接Article::first()即可。关于为什么使用静态方法，这一点我认为是防止后续还需要这段数据，减少查库操作。</p>
</li>
</ul>
<h4 id="阶段疑问"><a href="#阶段疑问" class="headerlink" title="阶段疑问"></a>阶段疑问</h4><ul>
<li><p>.htaccess书写用到了正则表达式且涉及到apache模块的开发和使用问题，存在少许疑问。</p>
</li>
<li><p>Macaw.php一共就163行代码，暂时没有完全理解使用原因。</p>
</li>
<li><p>关于composer的autoload四种方式不太理解，以及spr-0在此处的兼容性使用。</p>
</li>
<li><p>关于数据库部分的配置和CURD操作封装问题，还需要学习一种composer组件，刚开始就不考虑这件事吧。</p>
</li>
<li><p>关于静态方法在此处使用的原因，不知道自己的理解有哪里不妥当和不完善之处。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第N次安装Hexo框架和Next博客主题]]></title>
      <url>/2017/06/01/%E7%AC%ACN%E6%AC%A1%E5%AE%89%E8%A3%85Hexo%E6%A1%86%E6%9E%B6%E5%92%8CNext%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>换了 Mac 之后 Hexo 框架和主题文章全没了，备份到码云的文章数据被 .gitignore 忽略了，没办法找个时间自己手动备份一下 Hexo 博客。这次懂事了，必须用iCloud把数据全备份下来，这里 windows 下的 OneDrive 即时备份机制真恶心。</p>
<p>然后就是<code>npm install -g hexo-cli</code>安装 hexo 客户端工具，在 ~/Documents/Hexo/ 目录下初始化框架：<code>hexo init</code>。这些操作在第一篇文章<code>又写Next博客</code>就提过，这里又说了一遍。为了表示差异性，这篇文章我就主要讲一些功能特效和 Next 主题的配置吧。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>Next三种主题选择</li>
</ul>
<blockquote>
<p>在配置文件中搜索 Schemes ，你会看到<code>Muse, Mist, Pisces</code>三种 scheme，去掉你喜欢的主题前的 # 注释即可。修改主题需要重启 hexo 服务并执行清除缓存操作：<code>hexo clean</code>。</p>
</blockquote>
<ul>
<li>右下角的屏幕滚动百分比设置。</li>
</ul>
<blockquote>
<p>配置文件中将 scrollpercent 设置为 true 即可，如果你要让百分比在侧边栏显示，只需要把b2t的值也设置为 true。</p>
</blockquote>
<ul>
<li>多种canvas背景特效</li>
</ul>
<blockquote>
<p>在配置文件中选择性的把 canvas_ 开头的值设置为 true 即可，特效可以同时设置为 true。</p>
</blockquote>
<ul>
<li>关闭被墙的 Google 字体</li>
</ul>
<blockquote>
<p>配置文件中将 font 中的 enable 和 global 中的 external 设置为 false 即可。</p>
</blockquote>
<ul>
<li>给博文添加协议</li>
</ul>
<blockquote>
<p>配置文件中把 post_copyright 的 enable 设置为 true 即可，如果你想在侧边栏也有这样的提示图标，把 creative_commons 的值设置为 by-nc-sa 即可。</p>
</blockquote>
<ul>
<li>前端/本地搜索功能</li>
</ul>
<blockquote>
<p>配置文件中的 local_search 中将 enable 的值设置为 true 即可。</p>
</blockquote>
<ul>
<li>友情链接 /social links 设置</li>
</ul>
<blockquote>
<p>打开配置文件中 social 的默认注释并添加链接即可，例如: <code>简书博客: http://www.jianshu.com/u/9d64b43bc1a1</code>。同时可以为友情链接设置 FontWaesome 图标，图标名参考 FontAwesome 官网：<a href="http://fontawesome.io/icons" target="_blank" rel="external">http://fontawesome.io/icons</a></p>
</blockquote>
<ul>
<li>博主头像设置</li>
</ul>
<blockquote>
<p>在 next/images/ 中放入你的头像，名称为 avatar.jpg ，然后打开 Next 配置文件<code>Sidebar Avatar</code>中avatar默认的注释并修改对应的值为<code>/images/avatar.jpg</code>，你也可以根据这里的说明把头像放倒 uploads 文件夹下。</p>
</blockquote>
<ul>
<li>网站图标设置</li>
</ul>
<blockquote>
<p>将图片转换为图标，将图标文件 favicon.ico 放到 next/source/ 目录下，然后在 next 配置文件中搜索并修改 facicon 的值为<code>/favicon.ico</code>。</p>
</blockquote>
<ul>
<li>代码高亮主题</li>
</ul>
<blockquote>
<p>Next 有五款使用了Tomorrow Theme的代码高亮主题，在配置文件中修改 highlight_theme 的值即可。文章使用(<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 开启微信/支付宝打赏功能</div><div class="line"></div><div class="line">&gt; 首先确保 layout/_macro/ 目录下存在 post.swig 和 reward.swig 两个文件，缺少则以utf-8为编码新建这两个文件，并点击[这个地址](https://github.com/iissnan/hexo-theme-next/blob/master/layout/_macro/reward.swig)中的代码复制粘贴到新建的文件中。然后再配置文件中的任意位置添加如下几行代码：</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="增加Donate-打赏功能"><a href="#增加Donate-打赏功能" class="headerlink" title="增加Donate 打赏功能"></a>增加Donate 打赏功能</h1><p>alipay: /uploads/alipay.png<br>wechatpay: /uploads/wechatpay.png<br>reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作!<br>```</p>
<blockquote>
<p>注意事项：微信和支付宝提供的图片格式不一样，尺寸也不同。</p>
<p>上述操作我目前是失败了请求各位道友指点。</p>
</blockquote>
<ul>
<li>订阅微信公众号</li>
</ul>
<blockquote>
<p>Next 5.0.1版本加入该功能，在每篇文章末尾显示公众号二维码。你只需要将公众号二维码 wechat-qcode.jpg 从微信平台下载后放在 source/uploads/ 目录下，然后将配置文件中的 wechat_subscriber 的enable 值设置为 true，qcode 设置为 /uploads/wechat-qcode.jpg，descripion 值设置为 <code>欢迎您扫一扫上面的二维码，关注技术博客最新动态</code>。</p>
</blockquote>
<ul>
<li>用户评论系统</li>
</ul>
<p>&gt;</p>
<ul>
<li>自定义导航栏</li>
</ul>
<blockquote>
<p>打开 menu 中的注释再访问网址，你会发现网页提示<code>Cannot GET /categories/</code>，你需要</p>
</blockquote>
<ul>
<li>自定义导航栏之文章分类</li>
</ul>
<p>&gt;</p>
<ul>
<li>自定义导航栏之关于博主</li>
</ul>
<p>&gt;</p>
<ul>
<li>网站404页面设置</li>
</ul>
<blockquote>
<p>在 /source/ 目录下心间 404.html 页面，内容随你开心填写，建议使用下面腾讯公益404儿童丢失页面：<a href="http://theme-next.iissnan.com/theme-settings.html#volunteer-404" target="_blank" rel="external">http://theme-next.iissnan.com/theme-settings.html#volunteer-404</a></p>
</blockquote>
<ul>
<li>自定义导航栏之标签管理</li>
</ul>
<p>&gt;</p>
]]></content>
      
        
        <tags>
            
            <tag> 技术博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[听说PHP中有个东西叫Trait]]></title>
      <url>/2017/05/31/%E5%90%AC%E8%AF%B4PHP%E4%B8%AD%E6%9C%89%E4%B8%AA%E4%B8%9C%E8%A5%BF%E5%8F%ABTrait/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在Laravel文档中经常出现这个让我郁闷的词汇，在群里问了一下才知道这东西不是laravel所有，而是php内容。于是去php官方文档查看，看的一脸懵逼。想想还是直接借助Google，php trait是什么？</p>
<p>搜索第二条就是安正超大牛的博客，很短，稍微看一下就基本能理解了。<code>trait是php5.4加入的一种用于代码复用的语法</code>，类也用于复用，也就是说这东西和类的作用是相似的，包括书写方式也类似。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>据我所知的面向对象语言中只有C++明确支持多继承，那么java，php这些只有单继承的语言怎么办？由于有些类是要实现接口的，java的做法是普通类之间不能多继承，但可以继承多个接口。</p>
</li>
<li><p>php实现这个多继承就是用Trait特征，意思很简单，根据一定的特征把重复的方法放在一个文件，这个文件就叫做一个trait，然后use引入这个Trait就能使用了，可以同时引入多个特征。那么到底根据什么特征来区别呢？这就是Trait复用的思考重点了。</p>
</li>
<li><p>一个类很多乱七八糟的属性和方法，你可以根据价格，根据地区划分出多个Trait，需要的时候随意组合起来使用，和依赖注入的原理非常像，耦合度很低，类似于composer组件化思想。</p>
</li>
<li><p>安大神也认为Trait分类拆分会是大家碰到最头疼的问题，他给出三个拆分技巧:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">从需求或功能描述拆分，而不是写了两段代码发现代码一样就提到一起；</div><div class="line"></div><div class="line">拆分时可能需要将某些属性也一起带走；</div><div class="line"></div><div class="line">拆分时如果给 Trait 起名困难时，请认真思考你是否真的拆分对了。</div><div class="line"></div><div class="line">因为正确的拆分是很容易描述 “它是一个具有什么功能的特性” 的；</div></pre></td></tr></table></figure>
<ul>
<li>参考地址: <a href="http://overtrue.me/articles/2016/04/about-php-trait.html" target="_blank" rel="external">http://overtrue.me/articles/2016/04/about-php-trait.html</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ThinkPHP5基础学习]]></title>
      <url>/2017/05/30/ThinkPHP5%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>ThinkPHP是伟大的中国人自己开发的一套php面向对象框架，最新的TP5改进很多方面并专注于钱后端分离的API开发，中文的注释，中文的文档，中文的社区都让中国中小规模的企业不得不选择这个框架。适合人员迭代和快速开发，一套约定的编码规范让团队协作更加清爽，内置的日志和调试器功能强大，直接就能查看到性能分析，支持composer组件化集成。</p>
<p>总之，很强，很有学习的必要！</p>
</blockquote>
<a id="more"></a>
<h3 id="一、获取ThinkPHP"><a href="#一、获取ThinkPHP" class="headerlink" title="一、获取ThinkPHP"></a>一、获取ThinkPHP</h3><ul>
<li><p>获取ThinkPHP的方式很多，<a href="http://thinkphp.cn" target="_blank" rel="external">官方网站</a>是最好的下载和文档获取来源。建议使用composer或者git安装：</p>
<ul>
<li>topthink/thinkphp是3.2版本。</li>
<li>topthink/think是最新thinkphp5。</li>
<li>topthink/framework是核心框架，一般不选择。</li>
</ul>
</li>
<li><p>官网下载版本提供了完整版和核心版两个版本，核心版本只保留了核心类库和必须的文件，去掉了所有的扩展类库和驱动，支持标准模式和SAE模式，一般下载完整版进行开发。</p>
</li>
</ul>
<hr>
<h3 id="二、环境要求"><a href="#二、环境要求" class="headerlink" title="二、环境要求"></a>二、环境要求</h3><ul>
<li><p>框架本身没有什么特别模块要求，具体的应用系统运行环境要求视开发所涉及的模块。ThinkPHP底层运行的内存消耗极低，而本身的文件大小也是轻量级的，因此不会出现空间和内存占用的瓶颈。</p>
</li>
<li><p>PHP5.4以上版本（注意：PHP5.3dev版本和PHP6均不支持）。</p>
</li>
<li><p>topthink/think依赖于php相应版本和topthink/framework组件。</p>
</li>
<li><p>支持Mysql、MsSQL、PgSQL、Sqlite、Oracle、Ibase、Mongo以及PDO等多种数据库和连接。</p>
</li>
</ul>
<hr>
<h3 id="三、目录结构"><a href="#三、目录结构" class="headerlink" title="三、目录结构"></a>三、目录结构</h3><ul>
<li>下载ThinkPHP框架后，解压缩到web目录下面，可以看到初始的目录结构如下：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-c35d92bb6b6dfabd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1440/q/50" alt="ThinkPHP5.0.9目录结构"></p>
<ul>
<li><p>一级目录六个，分别是应用目录，拓展类库目录，web目录，运行时目录，框架系统目录，第三方类库。</p>
</li>
<li><p>一级目录中有一些文件，分别是协议，说明，composer配置和锁文件，think工具，自动生成定义文件build.php。</p>
</li>
<li><p>README.md文件仅用于说明，实际部署的时候可以删除。</p>
</li>
<li><p>上面的目录结构和名称是可以改变的，这取决于你的入口文件和配置参数。</p>
</li>
<li><p>ThinPHP默认路由访问顺序是/模块/控制器/控制器方法</p>
</li>
</ul>
<hr>
<h3 id="四、入口文件"><a href="#四、入口文件" class="headerlink" title="四、入口文件"></a>四、入口文件</h3><ul>
<li><p>ThinkPHP采用单一入口模式进行项目部署和访问，无论完成什么功能，一个应用都有一个统一（但不一定是唯一）的入口。应该说，所有应用都是从入口文件开始的，并且不同应用的入口文件是类似的。</p>
<ul>
<li><p>入口文件定义</p>
</li>
<li><p>入口文件主要完成：</p>
<ul>
<li><p>定义框架路径、项目路径（可选）</p>
</li>
<li><p>定义调试模式和应用模式（可选）</p>
</li>
<li><p>定义系统相关常量（可选）</p>
</li>
<li><p>载入框架入口文件（必须）</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>默认情况下，TP5版本的框架已经自带了一个应用入口文件（以及默认的目录结构），内容如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(&apos;APP_PATH&apos;,&apos;./Application/&apos;);</div><div class="line"></div><div class="line">require &apos;./ThinkPHP/ThinkPHP.php&apos;;</div></pre></td></tr></table></figure>
<ul>
<li><p>注意：3.2版本开始无需定义APP_NAME常量</p>
</li>
<li><p>如果你改变了项目目录（例如把Application更改为Apps），只需要在入口文件更改APP_PATH常量定义即可：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(&apos;APP_PATH&apos;,&apos;./Apps/&apos;);</div><div class="line"></div><div class="line">require &apos;./ThinkPHP/ThinkPHP.php&apos;;</div></pre></td></tr></table></figure>
<ul>
<li>注意：APP_PATH的定义支持相对路径和绝对路径，但必须以“/”结束</li>
</ul>
<hr>
<h3 id="五、编码规范"><a href="#五、编码规范" class="headerlink" title="五、编码规范"></a>五、编码规范</h3><ul>
<li><p>使用ThinkPHP开发的过程中应该尽量遵循下列命名规范：</p>
<ul>
<li><p>类文件都是以.class.php为后缀（这里是指的ThinkPHP内部使用的类库文件，不代表外部加载的类库文件），使用驼峰法命名，并且首字母大写，例如 DbMysql.class.php；</p>
</li>
<li><p>类的命名空间地址和所在的路径地址一致，例如 Home\Controller\UserController类所在的路径应该是 Application/Home/Controller/UserController.class.php；</p>
</li>
<li><p>确保文件的命名和调用大小写一致，是由于在类Unix系统上面，对大小写是敏感的（而ThinkPHP在调试模式下面，即使在Windows平台也会严格检查大小写）；</p>
</li>
<li><p>类名和文件名一致（包括上面说的大小写一致），例如 UserController类的文件命名是UserController.class.php， InfoModel类的文件名是InfoModel.class.php， 并且不同的类库的类命名有一定的规范；</p>
</li>
<li><p>函数、配置文件等其他类库文件之外的一般是以.php为后缀（第三方引入的不做要求）；</p>
</li>
<li><p>函数的命名使用小写字母和下划线的方式，例如 get_client_ip；</p>
</li>
<li><p>方法的命名使用驼峰法，并且首字母小写或者使用下划线“_”，例如 getUserName，_parseType，通常下划线开头的方法属于私有方法；</p>
</li>
<li><p>属性的命名使用驼峰法，并且首字母小写或者使用下划线“_”，例如 tableName、_instance，通常下划线开头的属性属于私有属性；</p>
</li>
<li><p>以双下划线“<strong>”打头的函数或方法作为魔法方法，例如 </strong>call 和 __autoload；</p>
</li>
<li><p>常量以大写字母和下划线命名，例如 HAS_ONE和 MANY_TO_MANY；</p>
</li>
<li><p>配置参数以大写字母和下划线命名，例如HTML_CACHE_ON；</p>
</li>
<li><p>语言变量以大写字母和下划线命名，例如MY_LANG，以下划线打头的语言变量通常用于系统语言变量，例如 _CLASS_NOT<em>EXIST</em>；</p>
</li>
<li><p>对变量的命名没有强制的规范，可以根据团队规范来进行；</p>
</li>
<li><p>ThinkPHP的模板文件默认是以.html 为后缀（可以通过配置修改）；</p>
</li>
<li><p>数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 think_user 表和 user_name字段是正确写法，类似 _username 这样的数据表字段可能会被过滤。</p>
</li>
<li><p>特例：在ThinkPHP里面，有一个函数命名的特例，就是单字母大写函数，这类函数通常是某些操作的快捷定义，或者有特殊的作用。例如：A、D、S、L 方法等等，他们有着特殊的含义，后面会有所了解。</p>
</li>
<li><p>由于ThinkPHP默认全部使用UTF-8编码，所以请确保你的程序文件采用UTF-8编码格式保存，并且去掉BOM信息头（去掉BOM头信息有很多方式，不同的编辑器都有设置方法，也可以用工具进行统一检测和处理），否则可能导致很多意想不到的问题。</p>
</li>
</ul>
</li>
</ul>
<h3 id="六、开发建议"><a href="#六、开发建议" class="headerlink" title="六、开发建议"></a>六、开发建议</h3><ul>
<li><p>在使用ThinkPHP进行开发的过程中，我们给出如下建议，会让你的开发变得更轻松：</p>
<ul>
<li><p>遵循框架的命名规范和目录规范；</p>
</li>
<li><p>开发过程中尽量开启调试模式；</p>
</li>
<li><p>多看看日志文件，查找隐患问题；</p>
</li>
<li><p>养成使用I函数获取输入变量的好习惯；</p>
</li>
<li><p>环境改变后首先要清空Runtime目录；</p>
</li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacOS刚使用的几点问题]]></title>
      <url>/2017/05/26/MacOS%E5%88%9A%E4%BD%BF%E7%94%A8%E7%9A%84%E5%87%A0%E7%82%B9%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Macbook Pro MF839昨天下午4点下单，今天下午4点收货，顺丰隔日速度值得表扬。开机配置，Apple id又被冻结了。激活之后查看电池使用次数为3，正品没毛病。然后就是安装各种软件了，PhpStorm，HomeBrew，git，Teambition，QQ，微信，WebStorm，shadowsocks，MAMP，VirtualBox，Chrome。</p>
<p>下面将会说到QQ语音视频没有声音和破解新版本MacOS10.11系统加入的SPI验证机制，并使用brew的增加版cask装了Docker-ce。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>然后花了半个小时搞定了MAMP环境，真强，但是Sequel PRO官方下载也太慢了。MAMP PRO下载后会出现两个版本，你会发现收费版的MAMP PRO却可能无法使用，我在终端查看了两者目录的权限, 只有MAMP目录(/App/MAMP/htdocs/)属于当前用户访问。将就点用吧(最终我还是使用了破解版), 反正都是要过渡到Docker。</p>
</li>
<li><p>更新MacOS10.12和iWork等自带软件的时间最久了，总要来关机，还有漫长的更新时间。不是说苹果的Pcle固态速度比SATA3快至少两倍吗？</p>
</li>
<li><p>另外改hosts在苹果系统上刷新DNS并不是<code>ipconfig flushdns</code>也不是<code>sudo /etc/init.d/nscd restart</code>, 而是根据MacOS的版本选择不同的命令如:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Mountain Lion 或 Lion版本(10.7.8.9):</div><div class="line">    sudo killall -HUP mDNSResponder</div><div class="line">Snow Leopard版本(10.6.10):</div><div class="line">    dscacheutil -flushcache</div><div class="line">Leopard和更早版本(10.4.5):</div><div class="line">    lookupd -flushcache</div><div class="line"></div><div class="line">大概就是这样了, 更高版本也在里面选择。</div><div class="line"></div><div class="line">吐槽以下Mac上这个刷新缓存很不统一啊</div></pre></td></tr></table></figure>
<ul>
<li><p>最后还是用了shadowsock自建的搬瓦工服务器，学习dockerfile之后有空就把shadowsock也写成文件容器来使用。</p>
</li>
<li><p>以前觉得自己黑苹果体验不佳是因为电脑差，现在买了正品才知道苹果系统在某些方面的等待时间确实偏久, 苹果的开机并不是非常快, 但是它可以不关机。虽然不喜欢的话好多操作的确不太人性化, 但习惯一下快捷键还是会很不错的。</p>
</li>
<li><p>项目还在开发我就换了电脑，虽然MacOS10.12自带php5.6，但我还是选择了MAMP搭建本地环境的过程就开始了。</p>
</li>
</ul>
<p>-首先MAMP测试，修改默认端口访问localhost测试，然后添加hosts记录。</p>
<ul>
<li><p>然后修改apache的vhost.conf文件，文件目录你可以根据apache全局配置文件中的引入路径查找。</p>
</li>
<li><p>另外使用了homebrew，操作了如下命令:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">brew update    更新源</div><div class="line">brew search wget  查找软件包</div><div class="line">brew install wget  安装软件包</div><div class="line">brew list    列出已安装的软件包</div><div class="line">brew remove wget   删除软件包</div><div class="line">brew info wget   查看软件包信息</div><div class="line">brew deps wget   查看软件依赖关系</div><div class="line">brew outdated    列出已安装但不是最新版本的软件包</div><div class="line">brew upgrade wget   单个软件包更新</div><div class="line"></div><div class="line">其实homebrew提供定制自己的软件包的功能哦，一切源自github。</div></pre></td></tr></table></figure>
<ul>
<li>没几天我尝试了下面这条命令, 结果Mac上我下载的软件视频和代码都消失了, 只好重装系统。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /</div><div class="line"></div><div class="line">在Ubuntu服务器执行这条命令提示危险操作</div></pre></td></tr></table></figure>
<ul>
<li>重装系统后QQ视频聊天对方说我没有声音, 你可以在声音偏好设置的输出中选用Mac自带的内置扬声器, 我选择的是执行下面这条命令。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf &quot;p *(char*)(void(*)())AudioDeviceDuck=0xc3\nq&quot; | lldb -n QQ</div></pre></td></tr></table></figure>
<ul>
<li>重装系统后因为要使用composer, 但意外的发现/bin/bin这样的环境变量下路径无权限访问。这是因为10.11开始加入的SIP验证机制, 我们只要重启进入命令行模式, 开机前将SIP关闭即可:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">csrutil disable</div></pre></td></tr></table></figure>
<ul>
<li>还使用brew cask装了Docker-ce, 使用laradock单项目和多项目配置, 具体操作流程请看这篇文章:<br><a href="http://www.jianshu.com/p/3b564f452625" target="_blank" rel="external">http://www.jianshu.com/p/3b564f452625</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 高效工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[书写shell脚本登录服务器]]></title>
      <url>/2017/05/26/%E4%B9%A6%E5%86%99shell%E8%84%9A%E6%9C%AC%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文主要讲解使用shell脚本登陆远程服务器, 解放大脑记忆ip地址的局限性。shell只是一类语言的总称，这类语言有类似的历史，类似的语法，甚至相互之间还能兼容。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>首先是ssh正常登陆命令。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p port user@remoteip</div></pre></td></tr></table></figure>
<ul>
<li>容易忘记ip吖, 那么我们写成简单的shell脚本。<code>cd &amp;&amp; vim bwg.sh</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">\#!/bin/bash</div><div class="line"></div><div class="line">ssh -p port user@remoteip</div><div class="line">chmod +x bwg.sh</div><div class="line">./bwg.sh</div></pre></td></tr></table></figure>
<ul>
<li>不想每次都输入密码？ 那我们来配置公钥和私钥。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">本机生成公钥和私钥请输入`ssh-keygen`</div><div class="line"></div><div class="line">三次回车生成`id_rsa`和`id_rsa_pub`。</div><div class="line"></div><div class="line">将公钥传送到远程主机host上面：</div><div class="line"></div><div class="line">`ssh-copy-id user@remoteip -p port`</div><div class="line"></div><div class="line">配置完成, 下面测试一下: `./bwg.sh`</div></pre></td></tr></table></figure>
<ul>
<li><p>确实不用输入密码就成功了, 不记得有<code>ssh-copy-id</code>, 你也可以执行这句代码代替:</p>
</li>
<li><p>ssh user@remoteip ‘mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys’ &lt; ~/.ssh/id_rsa.pub`</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用MarkDown写项目需求说明书(对内开发版)]]></title>
      <url>/2017/05/26/%E7%94%A8MarkDown%E5%86%99%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E%E4%B9%A6-%E5%AF%B9%E5%86%85%E5%BC%80%E5%8F%91%E7%89%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>项目概述: 这是一个前端使用bootstrap, jQuery框架, 服务端使用laravel开发的前后端分离电商系统，包括微信公众号管理和电商企业站点管理。项目主要是培养大家的团队开发意识，因此项目成员不仅仅应有特定方向的开发经验，还应该学习一些工具的使用。</p>
</blockquote>
<a id="more"></a>
<h3 id="项目小组成员任务说明"><a href="#项目小组成员任务说明" class="headerlink" title="项目小组成员任务说明"></a>项目小组成员任务说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- 界面工程师A : 负责PC端和移动端PSD图的设计, 要求完全使用Mac系统。</div><div class="line">- 界面工程师B : 负责设计图的实现和, 至少要求掌握响应式设计框架Bootstrap的样式和动画组件。</div></pre></td></tr></table></figure>
<p>上面前端界面设计并实现和下面后端接口开发同时进行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 后端开发ABC : 在已有后台框架基础上开发常见模块如商品模块,日志模块,用户模块,网站管理,订单模块,文章模块,统计模块,微信管理,留言模块,物流管理,和权限管理。</div></pre></td></tr></table></figure></p>
<p>下面是负责整合前后端的中端交互工程师和架构全局、组件集成的项目经理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- JS交互工程师 : 要求熟练掌握异步编程, 使用熟悉的JS框架处理接口数据, 例如前端搜索、分页、SEO优化。</div><div class="line">- 全栈项目经理 : 数据库设计;帮忙团队成员代码Review;规划项目进度和成员任务分布。</div></pre></td></tr></table></figure></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>团队开发，git管理代码，平台选用:码云</li>
<li>统一的docker环境，建议使用MacOS系统</li>
<li>统一IDE使用PhpStorm和WebStorm开发</li>
<li>前台界面设计和响应式布局由前端A负责</li>
<li>前台使用vue.js框架，由交互工程师负责</li>
<li>项目经理整合后台的前端模板voyager</li>
<li>后台RBAC权限菜单栏和用户登录登出</li>
<li>项目以天为单位进行周期性工作汇报</li>
</ul>
<h3 id="通用后台模块"><a href="#通用后台模块" class="headerlink" title="通用后台模块"></a>通用后台模块</h3><ul>
<li>后台控制面板主页<ul>
<li>数据统计(系统)</li>
<li>系统信息(系统时间,主机地址,GD库支持,COOKIE支持,SESSION支持,,,POST数据限制,上传文件限制,超时限制)</li>
</ul>
</li>
<li>RBAC权限管理模块<ul>
<li>基于角色用户和权限关系</li>
<li>不同权限可见和可访问页面不同</li>
</ul>
</li>
<li>文章内容管理模块<ul>
<li>列表, 分页, 搜索, 新增, 修改, 删除, 分类。</li>
<li>列表/删除页, 搜索结果页, 新增/修改表单页, 删除弹框提示页, 分类选择。</li>
</ul>
</li>
<li>友情链接管理模块<ul>
<li>新增, 修改, 删除, 样式。</li>
</ul>
</li>
<li>网站管理模块:网站新闻发布，平台广告的添加和广告位的管理。<ul>
<li>增删改查加状态。</li>
</ul>
</li>
<li>系统设置:<ul>
<li>语言设置, 时区设置, SEO优化设置。</li>
</ul>
</li>
</ul>
<h3 id="电商系统常用模块"><a href="#电商系统常用模块" class="headerlink" title="电商系统常用模块"></a>电商系统常用模块</h3><blockquote>
<p>电子商务网站整个系统的后端管理，按功能划分为九大模块，包括<strong>商品组织管理</strong>、<strong>订单处理</strong>、<strong>内容发布管理</strong>等模块。</p>
</blockquote>
<p>一、后台主页：</p>
<ul>
<li>各类主要信息的概要统计，包括客户信息、 订单信息、商品信息、库存信息、评论和最近反馈等。</li>
</ul>
<p>二、商品模块：</p>
<ul>
<li>1.商品管理：商品和商品包的添加、修改、 删除、复制、批处理、商品计划上下架、SEO、商品多媒体上传等，可以定义商品是实体还是虚拟，可以定义是否预订、是否缺货销售等。</li>
<li>2.商品目录管理：树形的商品目录组织管理，并可以设置关联/商品推荐。</li>
<li>3.商品类型管理：定义商品的类型，设置自定义属性项、SKU项和商品评论项。</li>
<li>4.品牌管理：添加、修改、删除、上传品牌 LOGO。</li>
<li>5.商品评论管理：回复、删除。</li>
</ul>
<p>三、销售模块:</p>
<ul>
<li>1.促销管理: 分为目录促销、购物车促销和 优惠券促销三类，可以随意定义不同的促销规则，满足日常促销活动: 购物折扣、购物赠送积分、购物赠送优惠券、购物免运输费、特价商品、特定会员购买特定商品、折上折、买二送一等。</li>
<li>2.礼券管理: 添加、发送礼券</li>
<li>3.关联/推荐管理――基于规则引擎，可以支持多种推荐类型，可手工添加或者自动评估商品。</li>
</ul>
<p>四、订单模块:</p>
<ul>
<li>1.订单管理:可以编辑、解锁、取消订单、 拆分订单、添加商品、移除商品、确认可备货等，也可对因促销规则发生变化引起的价格变化进行调整。订单处理完可发起退货、换货流程。</li>
<li>2.支付:常用于订单支付信息的查看和手工 支付两种功能。手工支付订单，常用于“款到发货”类型的订单，可理解为对款到发货这类订单的一种补登行为。</li>
<li>3.结算:提供商家与第三方物流公司的结算 功能，通常是月结。同时，结算功能也是常用来对“货到付款”这一类型订单支付后的数据进行对帐。</li>
</ul>
<p>五、库存模块:</p>
<ul>
<li>1.库存管理: 引入库存的概念，不包括销售规则为永远可售的商品，一个SKU对应一个库存量。库存管理提供增加、减少等调整库存量的功能;另外，也可对具具体的SKU设置商品的保留数量、<em>*</em>小库存量、再进货数量。每条SKU商品的具体库存操作都会记录在库存明细记录里边。</li>
<li>2.查看库存明细记录。</li>
<li>3.备货/发货：创建备货单、打印备货单、打印发货单、打印EMS快递单、完成发货等一系列物流配送的操作。</li>
<li>4.退/换货：对退/换货的订单进行收货流程的处理。</li>
</ul>
<p>六、内容模块:</p>
<ul>
<li>1.内容管理:包括内容管理以及内容目录管理。内容目录由树形结构组织管理。类似于商品目录的树形结构，可设置目录是否为链接目录。</li>
<li>2.无限制创建独立内容网页，比如关于我们，联系我们。</li>
<li>3.广告管理：添加、修改、删除、上传广告、 定义广告有效时限。</li>
<li>4.可自由设置商城导航栏目以及栏目内容、栏目链接。</li>
</ul>
<p>七、客户模块：</p>
<ul>
<li>1.客户管理：添加、删除、修改、重设密码、发送邮件等。</li>
<li>2.反馈管理：删除、回复。</li>
<li>3.消息订阅管理：添加、删除、修改消息组 和消息、分配消息组、查看订阅人。</li>
<li>4.会员资格：添加、删除、修改。</li>
</ul>
<p>八、系统模块：</p>
<ul>
<li>1.安全管理：管理员、角色权限分配和安全日志</li>
<li>2.系统属性管理：用于管理自定义属性。可关联模块包括商品管理、商品目录管理、内容管理、客户管理。</li>
<li>3.运输与区域：运输公司、运输方式、运输 地区。</li>
<li>4.支付管理：支付方式、支付历史。</li>
<li>5.包装管理：添加、修改、删除。</li>
<li>6.数据导入管理：商品目录导入、商品导入、 会员资料导入。</li>
<li>7.邮件队列管理：监控邮件发送情况，删除 发送异常邮件。</li>
</ul>
<p>九、报表模块:</p>
<ul>
<li>缺省数个统计报表，支持时间段过滤、支持按不同状态过滤、支持HTML、PDF和Excel格式的导出和打印。</li>
<li>1.用户注册统计</li>
<li>2.低库存汇总</li>
<li>3.缺货订单</li>
<li>4.订单汇总</li>
<li>5.退换货</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 系统规划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象之控制反转IOC和依赖注入]]></title>
      <url>/2017/05/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACIOC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<blockquote>
<p>看标题我最觉得这两个词语很牛逼, 等我讲完你就一下理解了, 这是面向对象中很简单的东西。控制反转也叫ioC, 全称Inverse of Control。</p>
<p>控制反转包括依赖注入(DI)和依赖查找(DL), 由于前者的使用更广泛频繁，所以我们大多数情况都认为IoC就是DI。全称分别为: Dependency Injection和Dependency Lookup。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>这个体系中还有个理论的东西叫做Ioc原理，IoC原理也叫做<code>依赖倒置原理</code>, 全称Dependency Inversion Principle。</p>
</li>
<li><p>IoC是一种全新的设计模式。但Gof的23种设计模式中并没有loC是因为控制反转思想成熟较晚。</p>
</li>
<li><p>JAVA体系中Spring框架的核心就是依赖注入, 其他语言的各种框架也都会用到这种设计模式。</p>
</li>
<li><p>A类用于查询数据库记录, B类用于连接数据库, 也就是说A依赖于B, 现在我们怎么在A类中书写查询方法呢？</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">为什么不在A中连接数据库？</div><div class="line"></div><div class="line">如果你有一百个A, 你连接一百次, new一百个对象实例出来吗？</div><div class="line"></div><div class="line">这是需要内存和IO开销的！</div><div class="line"></div><div class="line">B类只负责数据库链接, 还要封装工厂单例适配器等各种设计模式)</div></pre></td></tr></table></figure>
<ul>
<li><p>单一功能原则是面向对象的基本原则之一, 也是GOF中设计模式的基本原则之一。全称single responsibility principle。</p>
</li>
<li><p>我们的A类实体控制内部所有资源对象, 我们在其参数上将B类的引用写上(注入, 类的引用即类的实例化对象), A的内部就可以使用B中的方法, 这就是依赖注入。</p>
</li>
<li><p>也就是说, 控制反转是，关于一个对象如何获取他所依赖的对象的引用, 这个责任的反转。这个对象不局限于我上面写的类, 如果是A函数注入B函数, 其实就类似于回调了。</p>
</li>
<li><p>什么叫责任的反转？一开始是A对象在内部程序代码中实例化B, 实例化这个操作的责任在内部; 依赖注入后我都在自己的内部当你实例化了, 真正的实例化操作由容器负责, 容器的参数注入实例化对象, 这就是责任反转。</p>
</li>
<li><p>依赖注入主要是用来解开对象之间的紧密耦合关系, 解耦是面向对象的基本原则之一。</p>
</li>
<li><p>面向对象不得不提接口(Interface), 接口是必须被实现的, new一个接口A的一瞬间, A接口和实现A接口的B类之间, 依赖(耦合)关系就产生了。</p>
</li>
<li><p>A与B之间有依赖关系。如果想使用接口A的另外一个实现就需要更改代码了。当然我们可以建立一个Factory工厂类来根据条件生成想要的A接口的的具体实现, 这里不解释工厂模式了。</p>
</li>
<li><p>工厂模式确实看起来有点用, 但实际上对耦合状态并没有改变,因为这只是在工厂中加判断语句做分流处理。loC则是将依赖问题交给实现类, 可以用于彻底解决依赖问题。</p>
</li>
<li><p>在JAVA体系中, loC是依赖于<code>反射</code>编程的, 反射就是根据类名来生成对象。</p>
</li>
<li><p>反射这种操作比直接new生成对象的效率要低很多, 但是提高了系统的可维护性和灵活性。对于某些生成要求高的对象不联系使用loC。</p>
</li>
<li><p>JAVA中使用loC反射编程, IDE不方便自动查找重构, 必须开发者手动修改XML配置文件。</p>
</li>
<li><p>JAVA中的loC容器: Pico Container、Avalon 、Spring、JBoss、HiveMind、EJB等。php中的loC容器可以是任何一个函数或者接口的实现类。</p>
</li>
<li><p>不知道各位能理解多少, 整理一下自己的学习笔记。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Git Push推送失败的两种解决方案]]></title>
      <url>/2017/05/21/%E5%85%B3%E4%BA%8EGit-Push%E6%8E%A8%E9%80%81%E5%A4%B1%E8%B4%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Git的理念和使用都需要长期的经验和无尽的坑来填，否则你无法体会到它的强大！最近远程创建了含有Readme的仓库(以后在github上创建仓库时候我再也不添加README了), 本地初始化并添加了远程仓库后, push却失败了, 出现提示：</p>
</blockquote>
<a id="more"></a>
<p>$ git push origin dev<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">To https://git.oschina.net/erchoc/laradock.git</div><div class="line"></div><div class="line"> ! [rejected]        dev -&gt; dev (fetch first)</div><div class="line"></div><div class="line">error: failed to push some refs to &apos;https://git.oschina.net/erchoc/laradock.git&apos;</div><div class="line"></div><div class="line">hint: Updates were rejected because the remote contains work that you do</div><div class="line"></div><div class="line">hint: not have locally. This is usually caused by another repository pushing</div><div class="line"></div><div class="line">hint: to the same ref. You may want to first integrate the remote changes</div><div class="line"></div><div class="line">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</div><div class="line"></div><div class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</div></pre></td></tr></table></figure></p>
<ul>
<li>问题(Non-fast-forward)出现的原因是: git仓库中已有一部分代码, 它不允许你直接把你的代码覆盖上去。于是你有2个选择方式:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1. 强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容:</div><div class="line"></div><div class="line">git push -f</div><div class="line"></div><div class="line">2. 先把git的东西fetch到你本地然后merge后再push</div><div class="line"></div><div class="line">    - git fetch</div><div class="line">    - git merge</div><div class="line"></div><div class="line">这2句命令等价于</div><div class="line"></div><div class="line">git pull</div><div class="line"></div><div class="line">有时候remote有多个版本分支库，git pull需要指定开发版本的分支：</div><div class="line"></div><div class="line">git pull origin master</div></pre></td></tr></table></figure>
<ul>
<li>可是, 有时候还会出现问题:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">上面出现的 [branch &quot;master&quot;]是需要明确(.git/config)如下的内容</div><div class="line"></div><div class="line">[branch &quot;master&quot;]</div><div class="line"></div><div class="line">    remote = origin</div><div class="line"></div><div class="line">    merge = refs/heads/master</div></pre></td></tr></table></figure>
<ul>
<li>这等于在告诉git2件事:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1，当你处于master branch, 默认的remote就是origin。</div><div class="line"></div><div class="line">2，当你在master branch上使用git pull时，却没有指定remote和branch。</div><div class="line"></div><div class="line">那么git就会采用默认的remote（也就是origin）来merge在master branch上所有的改变。</div></pre></td></tr></table></figure>
<ul>
<li>如果不想或者不会编辑config文件的话，可以在bush上输入如下命令行：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git config branch.master.remote origin</div><div class="line"></div><div class="line">$ git config branch.master.merge refs/heads/master</div></pre></td></tr></table></figure>
<ul>
<li>之后再重新git pull下。最后git push你的代码吧。</li>
</ul>
<p>```</p>
]]></content>
      
        
        <tags>
            
            <tag> 高效工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shadowsocks翻墙姿势安装及优化加速]]></title>
      <url>/2017/05/21/shadowsocks%E7%BF%BB%E5%A2%99%E5%A7%BF%E5%8A%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8A%A0%E9%80%9F/</url>
      <content type="html"><![CDATA[<ul>
<li>转载原文于：<a href="http://wuchong.me/blog/2015/02/02/shadowsocks-install-and-optimize/" target="_blank" rel="external">http://wuchong.me/blog/2015/02/02/shadowsocks-install-and-optimize/</a></li>
</ul>
<blockquote>
<p>最近国内的网络形式越来越严峻，在日益高筑的围墙之下，掌握一门穿墙之术越来越成为需要。相对于 VPN 而言， Shadowsocks 更为轻量级，安装配置过程极其简单。而客户端也可以在windows、mac、iOS和android上轻松运行，被人们所深深喜爱。感谢<a href="https://twitter.com/clowwindy" target="_blank" rel="external">@clowwindy</a>，带给我们一款如此好用的<a href="https://github.com/shadowsocks/shadowsocks" target="_blank" rel="external">开源软件</a>。下面说说 Shadowosocks 的安装和优化。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-服务端安装"><a href="#1-服务端安装" class="headerlink" title="1. 服务端安装"></a>1. 服务端安装</h1><ul>
<li>官方推荐 Ubuntu 14.04 LTS 作为服务器以便使用 TCP Fast Open，我使用的是搬瓦工CentOS7最小化安装。服务器端的安装非常简单，请使用root用户进行下面的操作。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Debian / Ubuntu:</div><div class="line">apt-get install python-pip</div><div class="line">pip install shadowsocks</div><div class="line"></div><div class="line">CentOS:</div><div class="line">yum install python-setuptools &amp;&amp; easy_install pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure>
<ul>
<li>然后直接在后台运行：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssserver -p 8000 -k password -m rc4-md5 -d start</div><div class="line"></div><div class="line">ssserver命令还可以查看使用帮助</div></pre></td></tr></table></figure>
<ul>
<li>当然也可以使用配置文件进行配置，方法创建/etc/shadowsocks.json<br>文件，填入如下内容：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;port_password&quot;:&#123;</div><div class="line">         &quot;8989&quot;:&quot;password&quot;,</div><div class="line">         &quot;9001&quot;:&quot;password1&quot;,</div><div class="line">         &quot;9002&quot;:&quot;password2&quot;,</div><div class="line">         &quot;9003&quot;:&quot;password3&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;rc4-md5&quot;,</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后使用配置文件在后台运行：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks.json -d start</div></pre></td></tr></table></figure>
<ul>
<li><p>如果要停止运行，将命令中的 start 改成 stop。</p>
</li>
<li><p>TIPS: 加密方式推荐使用rc4-md5，因为 RC4 比 AES 速度快好几倍，如果用在路由器上会带来显著性能提升。</p>
</li>
<li><p>旧的 RC4 加密之所以不安全是因为 Shadowsocks 在每个连接上重复使用 key，没有使用 IV。现在已经重新正确实现，可以放心使用。更多可以看<a href="https://github.com/clowwindy/shadowsocks/issues/178" target="_blank" rel="external">issue</a>。</p>
</li>
</ul>
<h1 id="2-客户端安装"><a href="#2-客户端安装" class="headerlink" title="2. 客户端安装"></a>2. 客户端安装</h1><ul>
<li>客户端安装比较入门，可以从<a href="https://www.shadowsocks.com.hk/client.html" target="_blank" rel="external">官方网站</a>下载对应客户端安装。</li>
<li>电脑客户端：<a href="https://ttt.tt/150/" target="_blank" rel="external">使用方法</a>。</li>
<li>安卓使用方法：<a href="http://jingyan.baidu.com/article/fdbd4277c62ec9b89e3f4821.html" target="_blank" rel="external">百度经验</a>, IOS同理。</li>
</ul>
<h1 id="3-加速优化"><a href="#3-加速优化" class="headerlink" title="3. 加速优化"></a>3. 加速优化</h1><ul>
<li>下面介绍几种简单的优化方法，也是比较推荐的几种，能够得到立竿见影的效果。当然还有一些黑科技我没提到，如有大神路过，也可留言指出。</li>
</ul>
<h2 id="3-1-内核参数优化"><a href="#3-1-内核参数优化" class="headerlink" title="3.1 内核参数优化"></a>3.1 内核参数优化</h2><ul>
<li>首先，将 Linux 内核升级到 3.5 或以上。<br><strong>第一步，增加系统文件描述符的最大限数</strong></li>
<li>编辑文件limits.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/security/limits.conf</div></pre></td></tr></table></figure>
<p>增加以下两行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* soft nofile 51200</div><div class="line">* hard nofile 51200</div></pre></td></tr></table></figure>
<ul>
<li>启动shadowsocks服务器之前，设置以下参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ulimit -n 51200</div></pre></td></tr></table></figure>
<p><strong>第二步，调整内核参数</strong></p>
<ul>
<li>修改配置文件/etc/sysctl.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">fs.file-max = 51200</div><div class="line"></div><div class="line">net.core.rmem_max = 67108864</div><div class="line"></div><div class="line">net.core.wmem_max = 67108864</div><div class="line"></div><div class="line">net.core.netdev_max_backlog = 250000</div><div class="line"></div><div class="line">net.core.somaxconn = 4096</div><div class="line"></div><div class="line">net.ipv4.tcp_syncookies = 1</div><div class="line"></div><div class="line">net.ipv4.tcp_tw_reuse = 1</div><div class="line"></div><div class="line">net.ipv4.tcp_tw_recycle = 0</div><div class="line"></div><div class="line">net.ipv4.tcp_fin_timeout = 30</div><div class="line"></div><div class="line">net.ipv4.tcp_keepalive_time = 1200</div><div class="line"></div><div class="line">net.ipv4.ip_local_port_range = 10000 65000</div><div class="line"></div><div class="line">net.ipv4.tcp_max_syn_backlog = 8192</div><div class="line"></div><div class="line">net.ipv4.tcp_max_tw_buckets = 5000</div><div class="line"></div><div class="line">net.ipv4.tcp_fastopen = 3</div><div class="line"></div><div class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</div><div class="line"></div><div class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</div><div class="line"></div><div class="line">net.ipv4.tcp_mtu_probing = 1</div><div class="line"></div><div class="line">net.ipv4.tcp_congestion_control = hybla</div></pre></td></tr></table></figure>
<ul>
<li>修改后执行sysctl -p使配置生效</li>
</ul>
<h2 id="3-2-锐速"><a href="#3-2-锐速" class="headerlink" title="3.2 锐速"></a>3.2 锐速</h2><ul>
<li><p>锐速是一款非常不错的TCP底层加速软件，可以非常方便快速地完成服务器网络的优化，配合 ShadowSocks 效果奇佳。目前锐速官方也出了永久免费版本，适用带宽20M、3000加速连接，个人使用是足够了。如果需要，先要在锐速官网注册个账户。</p>
</li>
<li><p>然后确定自己的内核是否在锐速的支持列表里，如果不在，请先更换内核，如果不确定，请使用<a href="http://my.serverspeeder.com/w.do?m=lslm" target="_blank" rel="external">手动安装</a>。</p>
</li>
<li><p>确定自己的内核版本在支持列表里，就可以使用以下命令快速安装了。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://my.serverspeeder.com/d/ls/serverSpeederInstaller.tar.gz</div><div class="line"></div><div class="line">tar xzvf serverSpeederInstaller.tar.gz</div><div class="line"></div><div class="line">bash serverSpeederInstaller.sh</div></pre></td></tr></table></figure>
<ul>
<li><p>输入在官网注册的账号密码进行安装，参数设置直接回车默认即可，最后两项输入 y 开机自动启动锐速，y 立刻启动锐速。之后可以通过lsmod<br>查看是否有appex模块在运行。</p>
</li>
<li><p>到这里还没结束，我们还要修改锐速的3个参数:</p>
</li>
</ul>
<p>vi /serverspeeder/etc/config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rsc=&quot;1&quot; #RSC网卡驱动模式</div><div class="line"></div><div class="line">advinacc=&quot;1&quot; #流量方向加速</div><div class="line"></div><div class="line">maxmode=&quot;1&quot; #最大传输模式</div></pre></td></tr></table></figure></p>
<ul>
<li>digitalocean vps的网卡支持rsc和gso算法，所以开启rsc=”1”,gso=”1”，重新启动锐速：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service serverSpeeder restart</div></pre></td></tr></table></figure>
<h2 id="3-3-net-speeder"><a href="#3-3-net-speeder" class="headerlink" title="3.3 net-speeder"></a>3.3 net-speeder</h2><ul>
<li>net-speeder原理非常简单粗暴，就是发包翻倍，这会占用大量的国际出口带宽，本质是损人利己，不建议使用。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">**(1) Ubuntu/Debian 下安装依赖包**</div><div class="line"></div><div class="line">apt-get install libnet1</div><div class="line"></div><div class="line">apt-get install libpcap0.8</div><div class="line"></div><div class="line">apt-get install libnet1-dev</div><div class="line"></div><div class="line">apt-get install libpcap0.8-dev</div><div class="line"></div><div class="line">**(2) Centos 下安装依赖包**</div><div class="line"></div><div class="line">需要配置 epel 第三方源。下载 epel ：[http://dl.fedoraproject.org/pub/epel/](http://dl.fedoraproject.org/pub/epel/)。</div><div class="line"></div><div class="line">例如，Centos 7 x64：</div><div class="line"></div><div class="line">wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm</div><div class="line"></div><div class="line">rpm -ivh epel-release-7-5.noarch.rpm</div><div class="line"></div><div class="line">yum repolist</div></pre></td></tr></table></figure>
<ul>
<li>然后安装依赖包：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install libnet libpcap libnet-devel libpcap-devel</div></pre></td></tr></table></figure>
<p><strong>(3) 下载官方的 tar.gz 压缩包。解压安装运行：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">wget http://net-speeder.googlecode.com/files/net_speeder-v0.1.tar.gz</div><div class="line"></div><div class="line">tar zxvf net_speeder-v0.1.tar.gz</div><div class="line"></div><div class="line">cd net_speeder</div><div class="line"></div><div class="line">chmod 777 *</div><div class="line"></div><div class="line">sh build.sh -DCOOKED</div></pre></td></tr></table></figure>
<ul>
<li>首先你需要知道你的网卡设备名，可以使用 ifconfig 查看。假设是eth0，那么运行方法是:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./net_speeder eth0 &quot;ip&quot;</div></pre></td></tr></table></figure>
<ul>
<li>关闭 net-speeder</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall net_speeder</div></pre></td></tr></table></figure>
<ul>
<li>现在作者已经将 net-speeder 迁移到<a href="https://github.com/snooda/net-speeder" target="_blank" rel="external">GitHub</a>了，感兴趣的可以关注、贡献代码。以上几种方法是作者用过的几种比较有效的加速方法。有任何错误之处还请在下面留言指出。</li>
</ul>
<p><strong>如果你不想折腾服务端安装和优化，你可以使用<a href="http://ss.erchoc.com/" target="_blank" rel="external">ss.erchoc.com</a>提供的免费 shadowsocks 服务。</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在MacOS上安装和使用Docker搭建laravel环境]]></title>
      <url>/2017/05/20/%E5%9C%A8MacOS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BAlaravel%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>首先当然是下载docker, 推荐使用增强型brew<code>brew cask install docker</code>安装, 其实就是下载了这个文件, 你也可以自己下载这个文件然后进行手动安装: <a href="https://download.docker.com/mac/stable/17661/Docker.dmg" target="_blank" rel="external">https://download.docker.com/mac/stable/17661/Docker.dmg</a> 。</p>
<p>100MB出头, 下载要点时间。安装成功后我们开始使用<code>sudo docker version</code>命令行测试操作, 成功的标志是终端返回docker服务端和客户端版本信息, 另外请记住服务器上Docker的绝大多数命令都需要在root权限下执行。绝大多数你想的docker配置信息都可以使用<code>docker info</code>来查看。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-0501e24fc8597a82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试安装是否成功"></p>
<ul>
<li><p>由于Docker在2017年三月的大更新, 导致现在存在CE, EE和以前的Docker老版本, 如果直接使用yum, apt-get, brew install docker/docker.io/docker-io可能会下载到老版本。新版本要求linux内核大于3.8。</p>
</li>
<li><p>现在我们先cd到家目录, 使用composer创建个laravel程序:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer create-project laravel/laravel example</div></pre></td></tr></table></figure>
<ul>
<li>当然你也可以选择使用git手动创建修改配置文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://www.github.com/laravel/laravel.git</div></pre></td></tr></table></figure>
<ul>
<li><p>但是composer创建的好处在于它会自动帮你生成.env配置文件和加密key, 还会自动执行composer install下载依赖(下载慢的话请配置过程compsoer全量镜像)。</p>
</li>
<li><p>下载完了我们进入这个目录并使用php命令创建内置的测试服务器:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd &amp;&amp; sudo php -S localhost:8080 -t ./public</div></pre></td></tr></table></figure>
<ul>
<li><p>然后访问localhost:8080, 显示laravel主页则关闭php内置服务器, 开始使用dockerfile。(这一步骤使用php命令可能需要管理员权限, 使用php artisan serve不需要管理员权限)</p>
</li>
<li><p>我们首先在下载laradock这个写好dockerfile的一个文件夹:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://www.github.com/laradock/laradock.git</div></pre></td></tr></table></figure>
<ul>
<li>laradock的官方文档在<a href="http://laradock.io" target="_blank" rel="external">这里查看</a>, 但是很多使用讲解不清楚, 出现问题建议查看github源码托管所的Issues, windwos用户使用就是各种坑：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">启动mysql容器会报错, 那是因为windows的文件目录结构和Unix是不同的。</div><div class="line"></div><div class="line">你需要在配置文件中修改本地mysql数据保存路径，默认的路径写法是类unix的。</div><div class="line"></div><div class="line">win下模拟终端环境把盘符挂在/mnt目录下, 没有真正的超级管理员权限, 使用docker会碰到权限问题。</div><div class="line"></div><div class="line">内存不足问题, docker重启失败问题, mysql容器启动失败, apache配置文件错误等等一系列问题。</div><div class="line"></div><div class="line">我前几天就是因为受不了这一点菜忍痛借钱买苹果电脑。</div></pre></td></tr></table></figure>
<ul>
<li>现在你的example和laradock都在~/目录, 那么进入laradock目录执行命令生成环境的配置文件：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp env-example .env</div></pre></td></tr></table></figure>
<ul>
<li>修改.env文件中的一些配置信息：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DB_HOST=mysql,</div><div class="line"></div><div class="line">REDIS_HOST=redis,</div><div class="line"></div><div class="line">QUEUE_HOST=demo,</div></pre></td></tr></table></figure>
<ul>
<li>(如果你的mysql安装在本机127.0.0.1就可以不需要修改这部分, 修改主要是方便上线在内网部署mysql服务器, 这样修改不需要指定内网mysql的ip地址)。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-0c05d731f533ddfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Docker原理"></p>
<ul>
<li><p>如图Docker在pull一个可使用的镜像, 镜像是可读不可写的, 图中可见该镜像有七个添加后的可写层并被重新构建了images, 现在正在下载压缩镜像并解压镜像启动容器, 这个步骤容易出问题, 那就直接去github issues搜索相关问题。</p>
</li>
<li><p>laradock目录下可以使用环境构建工具docker-compose启动容器, 例如启动mysql, apache, redis容器实例各一个:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose up -d mysql apache2 redis</div></pre></td></tr></table></figure>
<ul>
<li><p>docker会查看你本地是否存在需要的镜像, 没有的话它就会自动根据dockerfile里面的代码起pull images, then build containers。</p>
</li>
<li><p>一般情况下php-fpm和workspace容器不需要指定就会被启动。</p>
</li>
<li><p>我们就可以进入workspace容器中使用里面的git, composer, npm, glup等一系列命令:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose exec workspace</div></pre></td></tr></table></figure>
<ul>
<li><p>其实每一个容器你都可以进去, 只是推荐进入这个为开发者打造的workspace而已, 你也可以添加参数指定以哪个用户进入(由于composer不推荐使用默认的root执行compsoer命令), 还可以指定端口, 可以指定进入时候使用何种shell, 我也不知道在Mac上是不是可以指定zsh。</p>
</li>
<li><p>默认从国外的docker官方hub下载镜像, 建议使用阿里云或者DaoCloud加速器。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">点击Docker图标, Preferences, Daemon</div><div class="line"></div><div class="line">将加速器链接添加到下方的镜像仓库中应用并重启即可。</div></pre></td></tr></table></figure>
<ul>
<li><p>你操作前后使用<code>docker info</code>可以查看到镜像仓库的改变。</p>
</li>
<li><p>当然, 其他平台如windows和linux也可以使用DaoIcoud官方提供的方法配置加速器:<br><a href="https://www.daocloud.io/mirror#accelerator-doc。" target="_blank" rel="external">https://www.daocloud.io/mirror#accelerator-doc。</a></p>
</li>
</ul>
<blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-edcf937bc41dbb81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加镜像加速服务"></p>
</blockquote>
<ul>
<li><p>查看一下容器启动情况, 你可以使用<code>docker ps</code>查看正在运行的所有容器。</p>
</li>
<li><p>也可以进入laradock目录只查看laradock中使用docker-compose启动的容器:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-composer ps</div></pre></td></tr></table></figure>
<ul>
<li><p>看到容器启动成功(和你使用<code>ps aux|grep nginx</code>类似, 容器启动成功后又一个容器是会关闭的, 没任何影响哦)后就访问localhost或者虚拟域名进行测试吧。</p>
</li>
<li><p>修改.env中的配置, 单个项目只需要改成  <code>APPLICATION=../example/</code>, 多个项目设置不需要改变这个配置文件。别down销毁容器，只能修改后重启Docker容器：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose restart</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-3b02bcc177b4e454.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功结果"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-36a98bfe7b291d5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="部署完成"></p>
<ul>
<li><p>其他常用命令:</p>
<ul>
<li><p>停止所有容器运行<br><code>docker-compose stop</code></p>
</li>
<li><p>停止mysql容器运行<br><code>docker-compose stop {container name}</code></p>
</li>
<li><p>删除所有容器<br><code>docker-compose down</code></p>
</li>
<li><p>删除指定容器<br><code>docker-compose down {container name}</code></p>
</li>
<li><p>后台启动容器(本地没有镜像则会先pull)<br><code>docker-compose up -d {container name}</code></p>
</li>
<li><p>进入容器:<br><code>docker-compose exec {container name} bash/zsh</code></p>
</li>
<li><p>查看正在运行的容器<br><code>docker-compose ps</code></p>
</li>
<li><p>查看历史所有的容器<br><code>docker-compose ps -a</code></p>
</li>
<li><p>查看日志文件<br><code>docker logs {container name}</code></p>
</li>
<li><p>重建所有容器<br><code>docker-compose build</code></p>
</li>
<li><p>重建某个容器<br><code>docker-compose build {container name}</code></p>
</li>
<li><p>退出容器<br><code>exit</code></p>
</li>
</ul>
</li>
<li><p>关于虚拟域名配置, php版本切换, 安装XDebug, apache和nginx多站点和php拓展安装大家就看文档吧, 这部分挺简单的。</p>
</li>
<li><p>laradock作为docker中的homestead稍微有些庞大, 并且使用laradock部署yii和普通的php项目不太合适, 所以我最近转向使用phpdocker.io, 这是一个可定制的dockerfil生成器, 并且简洁清爽, 缺点就是官方文档几乎没有。</p>
</li>
<li><p>自己对docker还有一些问题不太清楚, 关于dockerfile和持续集成部署也尚未实战了解, 希望这次能从晓乐这边学到很多东西。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 高效工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个项目的初始和开发的流程]]></title>
      <url>/2017/05/16/%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>现在网上大部分都是主讲代码的，很少涉及一个项目的启动、规划、分工等。大部分教程也是想到哪做到哪，并没有一个明确的思路。<br>个人觉得，一个项目的开始并不应该急着上来就写代码，有一个清晰的思路，明确的业务关系等，也是非常重要的，毕竟磨刀不误砍柴功嘛~。本文先讲解一下我自己总结的一些流程上的东西，之后会拿一些实例来讲解。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>开发流程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">业务原型图及设计</div><div class="line"></div><div class="line">业务确认，设计图</div><div class="line"></div><div class="line">前后端框架选择</div><div class="line"></div><div class="line">  - 后端框架 Laravel LTS</div><div class="line"></div><div class="line">  - js框架 Vue2.x</div><div class="line"></div><div class="line">  - UI框架 bootstrap</div><div class="line"></div><div class="line">数据库设计</div><div class="line"></div><div class="line">梳理模型关系</div><div class="line"></div><div class="line">根据业务逻辑设计表结构</div><div class="line"></div><div class="line">填充模拟数据（可在构建代码的过程同步进行）</div><div class="line"></div><div class="line">搭建脚手架</div><div class="line"></div><div class="line">  - 项目模块化</div><div class="line"></div><div class="line">  - 搭建项目基础（明确项目目录及结构等）</div><div class="line"></div><div class="line">  - 团队成员分工</div><div class="line"></div><div class="line">根据模块和分工完成程序</div><div class="line"></div><div class="line">  - 阶段测试</div><div class="line">  - 定期检查</div><div class="line">  - 代码重构</div><div class="line"></div><div class="line">Review</div><div class="line"></div><div class="line">  - 优化</div><div class="line"></div><div class="line">  - 测试</div></pre></td></tr></table></figure>
<ul>
<li><p>首先拿到一个项目，先理清楚基础的业务逻辑是非常重要的，在此基础上完成部分原型的设计（推荐使用Axure）。当然这个过程可能就会涉及到一部分后面实体的模型关系，要与客户交流并明确需求。</p>
</li>
<li><p>需求明确后，可以开始进行UI设计，当然数据库设计可以同步进行。</p>
</li>
<li><p>框架选择</p>
</li>
</ul>
<blockquote>
<p>当已经知道一个项目的大致业务需求及应用场景后，可以选定框架。本文及后续实例均会以laravel最新版为核心，js框架使用VUE.js，UI框架选用bootstrap。数据库使用Mysql。</p>
</blockquote>
<ul>
<li>数据库设计</li>
</ul>
<blockquote>
<p>对于程序员来说（有的公司是产品经理完成），我觉得这一步非常重要的，主要确定模型与模型、表与表之间的对应关系。例如：一对一、一对多、多对多等（个人习惯是画一个模型关系图）。这样在开发的时候就会思路很明确，不会处于“懵比”状态。</p>
</blockquote>
<ul>
<li>搭建脚手架</li>
</ul>
<blockquote>
<p>这一步是一个程序项目良好的开始，主要包括两点：</p>
</blockquote>
<pre><code>- 模块化：根据页面、业务、数据模型等怎么方便怎么分。

- 明确分工：模块化后拆分项目并分工。
</code></pre><ul>
<li><p>这里再主要说明一下项目管理工具。我们团队采用的是文件使用SVN，代码使用Git管理的方式。</p>
</li>
<li><p>程序主要说三点：</p>
<ul>
<li>阶段测试：按模块和按分工测试。</li>
<li>定期检查：团队间定期碰头交叉测试。</li>
<li>代码重构：抽象复用代码。</li>
</ul>
</li>
<li><p>review</p>
</li>
<li><p>这是一个很总要但是又容易忽略或者省去的一部分。大部分代码重构和优化都会放在这里，团队开发一般由技术负责人review。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 系统规划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[直推！Git服务器的搭建]]></title>
      <url>/2017/05/16/%E7%9B%B4%E6%8E%A8%EF%BC%81Git%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>GitHub就是一个托管代码的远程仓库。但是对于某些公司项目来说，既不想公开源代码，又舍不得给GitHub交私有仓库管理费用，也不屑于使用国内的码云等平台，那就只能自己搭建一台Git服务器作为私有仓库使用。</p>
<p>搭建Git服务器需要准备一台运行Linux的机器，推荐使用Ubuntu或Debian，配合Docker集成文件监听，可以完美实现DevOps模式和无痛迭代。可是，Docker并不在本文的讨论范围哦。</p>
<p>假设你已经登录了有sudo权限的用户账号，下面，正式开始安装。当然这里我们也可以在自己的服务器上安装具有更多功能的GitLab。</p>
</blockquote>
<a id="more"></a>
<h3 id="第一步，安装git："><a href="#第一步，安装git：" class="headerlink" title="第一步，安装git："></a>第一步，安装git：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<h3 id="第二步，创建一个git用户，用来运行git服务："><a href="#第二步，创建一个git用户，用来运行git服务：" class="headerlink" title="第二步，创建一个git用户，用来运行git服务："></a>第二步，创建一个git用户，用来运行git服务：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo adduser git</div></pre></td></tr></table></figure>
<h3 id="第三步，创建证书登录："><a href="#第三步，创建证书登录：" class="headerlink" title="第三步，创建证书登录："></a>第三步，创建证书登录：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件。</div><div class="line"></div><div class="line">把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。</div></pre></td></tr></table></figure>
<h3 id="第四步，初始化Git仓库："><a href="#第四步，初始化Git仓库：" class="headerlink" title="第四步，初始化Git仓库："></a>第四步，初始化Git仓库：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">选一个目录作为这个项目的Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：</div><div class="line"></div><div class="line">sudo git init --bare sample.git</div><div class="line"></div><div class="line">这样，Git就会创建一个裸仓库，裸仓库没有工作区。</div><div class="line"></div><div class="line">服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区。</div><div class="line"></div><div class="line">把owner改为git：</div><div class="line"></div><div class="line">sudo chown -R git:git sample.git</div></pre></td></tr></table></figure>
<h3 id="第五步，禁用shell登录："><a href="#第五步，禁用shell登录：" class="headerlink" title="第五步，禁用shell登录："></a>第五步，禁用shell登录：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">安全考虑，第二步创建的git用户不允许登录shell，可以编辑/etc/passwd文件完成禁止。</div><div class="line"></div><div class="line">找到类似下面的一行：</div><div class="line"></div><div class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</div><div class="line"></div><div class="line">改为：</div><div class="line"></div><div class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</div><div class="line"></div><div class="line">这样，git用户可以正常通过ssh使用git，但无法登录shell。</div><div class="line"></div><div class="line">因为我们为git用户指定的git-shell每次一登录就自动退出。</div></pre></td></tr></table></figure>
<h3 id="第六步，克隆远程仓库："><a href="#第六步，克隆远程仓库：" class="headerlink" title="第六步，克隆远程仓库："></a>第六步，克隆远程仓库：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：</div><div class="line"></div><div class="line">git clone git@server:/srv/sample.git</div><div class="line"></div><div class="line">Cloning into &apos;sample&apos;...</div><div class="line">warning: You appear to have cloned an empty repository.</div><div class="line"></div><div class="line">剩下的项目开发代码推送就简单了，和你使用Github是一样的。</div></pre></td></tr></table></figure>
<h3 id="第七步，管理公钥"><a href="#第七步，管理公钥" class="headerlink" title="第七步，管理公钥"></a>第七步，管理公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">小团队把每个人的公钥收集放到服务器的/home/git/.ssh/authorized_keys文件里就行。</div><div class="line"></div><div class="line">如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。</div><div class="line"></div><div class="line">这里就不介绍怎么使用Gitosis了，几百号人的公司找个高水平的Linux管理员问题不大。</div></pre></td></tr></table></figure>
<h3 id="第八步，管理权限"><a href="#第八步，管理权限" class="headerlink" title="第八步，管理权限"></a>第八步，管理权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">有些视源码如生命，视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制。</div><div class="line"></div><div class="line">每个人是否有读写权限会精确到每个分支甚至每个目录下。</div><div class="line"></div><div class="line">因为Git是为Linux源代码托管而开发的，所以Git继承了开源社区的精神，不支持权限控制。</div><div class="line"></div><div class="line">但Git支持钩子(hook)，可以在服务器端编写脚本来控制提交等操作，达到权限控制的目的。</div><div class="line"></div><div class="line">Gitolite就是一个这样的控制权限的工具。</div><div class="line"></div><div class="line">这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。</div></pre></td></tr></table></figure>
<h3 id="第九步，小结"><a href="#第九步，小结" class="headerlink" title="第九步，小结"></a>第九步，小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">搭建Git服务器非常简单，通常10分钟即可完成；</div><div class="line"></div><div class="line">要方便管理公钥，用Gitosis；</div><div class="line"></div><div class="line">要像SVN那样变态地控制权限，用Gitolite。</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 5.1 模型关联(Eloquent Relationships)]]></title>
      <url>/2017/05/16/Laravel-5-1-%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94-Eloquent-Relationships/</url>
      <content type="html"><![CDATA[<blockquote>
<p>项目的数据库部分昨晚晓乐已经微信视频和我讲了近一个小时，<code>小叮租书</code>项目的后台使用laravel开发接口和业务逻辑部分，前台部分是由海洋大学以为大二的前端学生在做。这个项目数据表很多，大体上分为了<code>product</code>,<code>order</code>和乱七八糟的<code>er-common</code>部分。</p>
<p>项目涉及到的实体比较多，昨天另一个PHPer把数据表全部migration写完push上去了，担心我不会今天的API-Model怎么写，晓乐还特意写了Role和Permission部分。然后，我也确实不会写，一开始都不知道到底要写啥，等讲完一小时的数据表才知道：<strong>原来是要我写模型里面实体间的对应关系</strong>。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>没办法咯，看官方的英文文档的Eloquent: Relationships部分咯。文档指出实体之间的关系有七种(六种：一对多和多对一可以理解为一种)：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">一对一</div><div class="line">一对多</div><div class="line">多对一</div><div class="line">多对多</div><div class="line">远程一对多</div><div class="line">多态关联</div><div class="line">多态多对多关联</div></pre></td></tr></table></figure>
<ul>
<li><p>使用模型关联之前，我们要先定义每个实体关系的类型。</p>
</li>
<li><p>首先创建一个继承了Eloquent/Model类的User Model，根据项目ER图找出和用户实体有关系的实体：</p>
<ul>
<li><p><code>role角色</code>，<code>permission权限</code>，<code>school学校</code></p>
</li>
<li><p><code>enrollmentInfo学籍</code>，<code>orders订单</code>，<code>coupons优惠券</code></p>
</li>
<li><p><code>addresses地址</code>，<code>carts购物车</code></p>
</li>
</ul>
</li>
<li><p>除了和实体的关系，User Model还应该定义一些用于获取id，token信息的函数。</p>
</li>
<li><p>为啥上面的实体一些是单数一些是复数呢？这就是laravel所谓的约定大于配置。用户和其他实体之间的关系决定了User类中关系函数的单复数形式。比如说用户和订单的关系，一个用户可以下多个订单，一个订单之恩那个属于一个用户，所以他们之间是一对多的关系，使用Eloquent内置的hasMany函数表明相对关联：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function orders()</div><div class="line">&#123;</div><div class="line">      return $this-&gt;hasMany(&apos;App\Entities\Order&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>那么现在的重点就是两个：表明相对关联的Eloquent内置函数有哪些？请看<a href="https://cs.laravel-china.org/#eloquent" target="_blank" rel="external">https://cs.laravel-china.org/#eloquent</a> 。千万不要和Laravel内置的辅助函数(帮助函数，助手函数，Helpers函数)搞混哦，简单用法如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 一对一 - User::phone()</div><div class="line"> return $this-&gt;hasOne(&apos;App\Phone&apos;, &apos;foreign_key&apos;, &apos;local_key&apos;);</div><div class="line">// 一对一 - Phone::user(), 定义相对的关联</div><div class="line"> return $this-&gt;belongsTo(&apos;App\User&apos;, &apos;foreign_key&apos;, &apos;other_key&apos;);</div><div class="line"></div><div class="line">// 一对多 - Post::comments()</div><div class="line"> return $this-&gt;hasMany(&apos;App\Comment&apos;, &apos;foreign_key&apos;, &apos;local_key&apos;);</div><div class="line">//  一对多 - Comment::post()</div><div class="line"> return $this-&gt;belongsTo(&apos;App\Post&apos;, &apos;foreign_key&apos;, &apos;other_key&apos;);</div><div class="line"></div><div class="line">// 多对多 - User::roles();</div><div class="line"> return $this-&gt;belongsToMany(&apos;App\Role&apos;, &apos;user_roles&apos;, &apos;user_id&apos;, &apos;role_id&apos;);</div><div class="line">// 多对多 - Role::users();</div><div class="line"> return $this-&gt;belongsToMany(&apos;App\User&apos;);</div><div class="line">// 多对多 - Retrieving Intermediate Table Columns</div><div class="line">$role-&gt;pivot-&gt;created_at;</div><div class="line">// 多对多 - 中间表字段</div><div class="line"> return $this-&gt;belongsToMany(&apos;App\Role&apos;)-&gt;withPivot(&apos;column1&apos;, &apos;column2&apos;);</div><div class="line">// 多对多 - 自动维护 created_at 和 updated_at 时间戳</div><div class="line"> return $this-&gt;belongsToMany(&apos;App\Role&apos;)-&gt;withTimestamps();</div></pre></td></tr></table></figure>
</li>
<li><p>那么回过头来看看这个项目中app/ Entities/目录下那么多个实体Model(Entities就是个目录，改成Model也行，但是Entities翻译过来就是更准确的<code>实体</code>的意思，我一开始还以为是啥厉害的Composer包呢)。我们看看User.php和上面说的有啥不同。<br><img src="http://upload-images.jianshu.io/upload_images/3995745-d20d4c221ba4aee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首先"></p>
</li>
<li><p>首先命名空间和使用缓存，然后是Eloquent的软删除(也叫softdelete,惰性删除，要和惰性加载load区分一下)。其他的四个是用来认证授权的一些内容，这个项目的认证授权使用第三方包JWT，有空我得了解一下。</p>
</li>
<li><p>然后就是User Model实现接口AuthenticatableContract和AuthorizableContract(其实我也不太清楚这接口在哪里定义的，为什么要这样写)，接着开始定义一些配置，比如:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1. 表名不是默认的名词+s形式，则需要指定$table。</div><div class="line"></div><div class="line">2. 如果表中不存在created_at和updated_at，需要将timestamp指定为false，即关闭自动维护时间戳。</div><div class="line"></div><div class="line">3. 按照情况添加guarded数组，如created_at等。</div><div class="line"></div><div class="line">4. 如果存在deleted_at，为model添加softdelete 的trait。(写文章时候这一点我还不理解)</div><div class="line"></div><div class="line">5. 对于外键不是【表名单数】_id这样形式的，需要在指定关系时，显性指定键名，如address表中的province_id指向areas，就需要单独指定。</div></pre></td></tr></table></figure>
<ul>
<li><p>对比项目User.php和上面的函数你会发现hasOne()还能带参数，也是定义配置里面的重新定义外键，因为默认情况下外键名称是基于Model名称的。包括第三个参数，具体请看：<a href="http://d.laravel-china.org/docs/5.1/eloquent-relationships" target="_blank" rel="external">http://d.laravel-china.org/docs/5.1/eloquent-relationships</a> 。</p>
</li>
<li><p>除此之外这个文件中海油获取user_id的getAuthIdentifier()，获取user_password的getAuthPassword()和静态的addUser()。</p>
</li>
<li><p>实际上这个部分不仅仅写模型关联这么简单，还有获取数据，更新删除数据的方法，Model相关的内容包括</p>
<ul>
<li><code>基础用法</code>，<code>更多用法</code>，<code>软删除</code>，<code>模型关联</code>，<code>事件</code>和<code>Eloquent配置信息</code>。</li>
</ul>
</li>
<li><p>那么我就联系了另一个工作三年的PHPer，问下他写了哪些实体关系，我就开始写咯，要写的如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">Account  账户</div><div class="line">Address  地址</div><div class="line">Cart  购物车</div><div class="line">Category  分类</div><div class="line">College  大学</div><div class="line">Coupon  优惠券</div><div class="line">EnrollmentInfo  学籍信息</div><div class="line">EnrollmentUnit  学籍单位</div><div class="line">Entity  相当于Eloquent/Model，这里所有实体的父类</div><div class="line">Inventory  库存</div><div class="line">Item  商品</div><div class="line">Major  学生主修专业</div><div class="line">Order  订单</div><div class="line">OrderAddition  订单辅表</div><div class="line">OrderHistory  历史订单</div><div class="line">OrderItem  订单商品表</div><div class="line">Payment  付款方式</div><div class="line">PaymentRecord  付款记录</div><div class="line">Permission  权限，william wei写完了。</div><div class="line">    - 多对多roles</div><div class="line">Product  产品</div><div class="line">ProductAttr  产品属性</div><div class="line">ProductAttrValue  产品属性值</div><div class="line">Role  角色，william wei写完了。</div><div class="line">    - 多对多users，多对多permissions</div><div class="line">School  学校</div><div class="line">Shipping  配送方式</div><div class="line">StockOutRecord 出库记录</div><div class="line">Tag  标签</div><div class="line">User  用户，william wei写完了。</div><div class="line">    - 一对多school，一对一EnrollmentInfo，多对多Role，</div><div class="line">    - 一对多orders，多对多coupons，一对多addresses，一对多carts</div><div class="line">Warehourse  仓库</div></pre></td></tr></table></figure>
</li>
<li><p>注意，一对多和多对一概念类似但是函数名单复数不一致哦。学生对学校是一对多，使用school()；学校对学生是多多对一，使用students()。</p>
</li>
<li><p>使用belongsTo时可能是一对一，也可能是一对多。</p>
</li>
<li><p>上面有少数是实体之间的联系表，考虑到适度增加冗余于是给该表增加字段作为实体操作，例如：product。</p>
</li>
<li><p>怎么查看本地和远程代码的区别呢，使用<code>git diff</code>命令咯(zsh下默认别用gd)，但是需要自己指定参数哦，常见参数有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git diff test 查看本地当前分支与本地test分支的区别</div><div class="line"></div><div class="line">git diff dev master 查看本地dev分支与远程master分支的区别</div><div class="line"></div><div class="line">git diff pull test 查看下次提交到远程dev分支时出变化的内容</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>这个部分git命令没写好以后继续添加，并追加到以前的Git命令学习文章中。另外下篇文章就是我单独把上面所有实体关联写完的烧脑过程，对着ER图一直想，一个XXX可以有YYY个ZZZ，但是一个ZZZ只能有YYY个个XXX，所以这个N对M模型，然后对照速查表写关联函数。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[五月初一些乱七八糟的小事总结]]></title>
      <url>/2017/05/14/%E4%BA%94%E6%9C%88%E5%88%9D%E4%B8%80%E4%BA%9B%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E5%B0%8F%E4%BA%8B%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>前段时间很忙，学长的项目在周末大范围更新的时候我还在山上陪妹子玩，回来学校之后🈶又忙着考试没来得及补回去，进度上落后了胖子好多。上次庄子给的陶居企业站开发也要推后进行，陶居企业站前台我本打算使用BootStrap+jQuery+ajax传统套餐，后台Voyager+Laravel54+Laradock做持续集成部署CI。最近又有孵化园那边的某某某的邀请和课程考试的干扰，感觉自己整个人都不好了。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>虽说我和这个团队人员的学习方向不同，但多少还是有点想试着加入一个团队，教别人一些自己领悟的体系知识。他们团队为只记得大概四个人。团队最大的不足就是缺乏实际开发经验，这点真的是她们团队的致命问题！我看了他们的一个毕业设计项目，Jsp后台配合matlab是个非常好的idea，分别由嵌入式和理学院的两个人负责前端和后端。其实这个项目的前后台并没有明显概念，而且作为实际开发项目他们完全可以使用前端脚手架搭建这个唯一的页面，现在的话仅有一个界面发布作业完成作业实时查看，最基本的权限管理也没有了。这些都是没有开发经验或者说没有培训的问题。很多项目客户是只要结果的，后台UI已经基本可以使用一些开源的前端模板，顶多前台需要一些定制页面，前端目前主要是负责接口数据交互才对。另外几个人一个态度很强势，一个很好学，另一个还也在培训，基本都是搞JAVA的，剩下几个说是前端实际上并没做过什么东西。如果我管理这个团队，我给出的公司定位是：企业站点，微信公众号接口和大学生毕业设计，从需求到上线全套开发。涉及到商城和ERP，OA系统的暂时不接，团队尽量使用ThinkPHP开发。虽然我也没用TP开发过什么项目，我倒是更想用拓展数不胜数的laravel，但这框架对现在他们这样的团队来说确实不太好上手。</p>
</li>
<li><p>JAVA终于考完了，挂了就准备补考吧反正总算是少了一门课。Android应该是过了吧，PHP课程有60就行懒得复习了，前端课下次我举手写个题目拿95平时分就行了，体育稳过，马克思和概率论结课了，概率论基本放弃了挣扎。补考的高数2目前还在补救，听不懂的人机交互我尽量去上课应该不会挂吧。</p>
</li>
<li><p>除了这些课，还要考虑一下六月的英语四级考试和征兵体检，想想还是挺忙的(虽然最后我也没去体检)。项目开发方面目前同时进行的是穰学长的firechat微信项目和亮哥的小叮租书项目。前者的优惠券模块拖了一个月了，本打算尽可能这快点搞定，毕竟还有那么多功能，但团队瞎使用Git的问题导致的开发环境问题让我无法配置好本地环境。后者的进度相对就很严格了，开发流程很有条理，并且数据库ER图，每日和每段时间的安排都用TeamBition团队协作软件安排下来了。使用Gitlab企业自建仓库和严格的git分支管理开发。希望两个项目能相互借鉴提高一下Laravel和composer结合组件化开发能力。</p>
</li>
<li><p>总结下两个项目：两者分别使用Laravel 5.4和Laravel 5.1开发，API均为RESTful风格。前者我也不知道用什么库实现的RESTful，明天看一下吧，实现方式是使用laravel自带的资源路由和指定资源控制器方法，我可以使用route:list 查看如图所示的项目所有路由列表。目前后台部分需要实现ORM取得数据表数据并传递到视图，使用blade模板引擎的@foreach遍历输出；同时还要搞定分页显示优惠券，这个地方还有个select表单实时修改每页显示的数据量暂无思路；点击新建按钮使用route函数或者url函数访问新建表单页面；表单部分UI我写的不好看，后端代码参考慕课网laravel中级课程；这里本打算模仿水滴公众号平台，使用angularJS数据双向绑定左侧填写表单数据，右侧实时显示客户在微信能看到的界面；考虑到开发太慢了都要挨骂，还是先实现基本增删改查再去优化吧。其他一些操作基本上是基于用户点击调用资源控制器方法，create/destory/edit/update/show/index方法链接Eloquent模型表数据这个步骤我还要熟悉一下，这样看来估计真的还要两周左右。</p>
</li>
<li><p>后者租书系统接口和路由部分使用dingo/api包，该项目用到的包和数据库设计都让团队人员打包下载了。uuid是有别于自动增长主键的一种更为安全的做法，Reposotiry是JAVA中的一种分层设计模式在laravel中的实现，这两个是我下周一周二前要完成的，这人在一个月前2K找上我开发周期大概1-2月的租赁系统，本着学习和项目借鉴的想法我答应了（其实最主要的原因是没钱重修，没钱泡妹子，没钱换眼镜，没钱换iphone，最最最主要的是真的急切需要买台Macbook）。另外，关于今天开始的环境搭建<a href="https://erchoc.github.io/2017/05/13/laravel%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C-%E5%BC%80%E5%A7%8B%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%92%8C%E6%B2%9F%E9%80%9A/#more">请点击查看这篇文章</a>。</p>
</li>
<li><p>加油，冲击BAT。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 生活琐事 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oh_My_Zsh的安装和使用初体验]]></title>
      <url>/2017/05/14/Oh-My-Zsh%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在实验楼的官方QQ群和人家吹牛逼时候学到了几点东西：windows子系统linux仿终端开源软件wsl，最新windows10 1703内置ubuntu16.04，听说支持在linux中打开exe可执行文件，编译安装vim以执行python lua补全和异步代码测试，公司服务器可能运行着Arch这等神器，据说今年Build大会微软会推出安装Fodora和Suse，VirtualBox和VMware虚拟机作用可以使用Hyper-V+Docker替代，最重要的一点是他让我知道了：Oh-My-Zsh主题是可以安装在Windows-Linux-MacOS 三大平台的！</p>
<p>那我就不得不尝试一下了，官网在这里：<a href="http://ohmyz.sh/" target="_blank" rel="external">http://ohmyz.sh/</a> 。考虑到没几个月我就会转向MacOS上开发，这次我就打算先双系统更新到WIN10 1703，使用wsl终端+子系统Ubuntu 16.04+Zsh Shell。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>OS X用户：睾贵的自带了zsh，跳过…</p>
</li>
<li><p>Ubuntu用户：sudo apt-get install zsh</p>
</li>
<li><p>Windows老用户：由于天生太高贵，无法安装。</p>
</li>
<li><p>Windows 10推出了bash for windows，终于也可以使用zsh</p>
</li>
<li><p>装上1703之后我不得不说这个版本确实更新挺大，很值得升级！默认使用powershell代替cmd提示符，ubuntu子系统可以选择中文，php源仓库中默认版本为php7，默认还有游戏模式，邮件直接支持注册Gmail账户，太多好处了，下面我们还是先说说zsh这个高效主题吧吧。</p>
</li>
<li><p>首先当然是去开源的代码托管平台看看这个star数超过50K的Oh-My-Zsh项目，要知道laravel也才30K。源码地址：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a> 。</p>
</li>
<li><p>然后当然是windows上安装这东西的步骤</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">查看系统中有哪些shell？</div><div class="line">cat /etc/shells</div><div class="line"></div><div class="line">搜索看看仓库里和zsh相关的包有哪些？</div><div class="line">sudo apt-cache search zsh</div><div class="line"></div><div class="line">看到了包的说明后，我们看看zsh包详细说明。</div><div class="line">sudo apt-cache show zsh</div><div class="line"></div><div class="line">看到我们即将安装的是最新版本5.0，然后安装zsh这个SHELL。</div><div class="line">sudo apt-get install zsh -y</div><div class="line"></div><div class="line">验证下安装是否成功。</div><div class="line">zsh –version</div><div class="line"></div><div class="line">查看当前的默认shell是啥。</div><div class="line">echo $SHELL</div><div class="line"></div><div class="line">是bash。那么我们把默认SHELL改成zsh吧。</div><div class="line">chsh -s $(which zsh)</div></pre></td></tr></table></figure>
<ul>
<li>上面最后部分的操作可能在windows内置子系统中并不生效，那么我们可以在.bashrc末尾加上shell代码，用脚本实现当你打开bash时候切换到zsh。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -c zsh</div></pre></td></tr></table></figure>
<ul>
<li><p>退出后重新登录，查看默认shell。windows用户就不用查看shell了，永远只能看到默认的bash。</p>
</li>
<li><p>默认情况下用户主目录会生成.oh-my-zsh目录，.zsh_history，.zshrc和.zsh -update文件，.zcompdump文件，他们的作用和bash类似，分别是，<code>oh_my_zsh主题配置文件夹</code>, <code>记录用户历史执行的命令</code>, <code>zsh启动时加载的配置文件</code>,<code>记录更新操作</code>和这种dump文件我也不知道是啥了。</p>
</li>
<li><p>关于zsh主题和插件</p>
</li>
<li><p>zsh默认主题是robbyrussell，位于主目录.zshrc文件中，下面我们来修改一下zsh的主题。</p>
</li>
<li><p>找到.zshrc文件中的ZSH_THEME=”xxxx”，修改为下列我使用后推荐的主题或随机主题random。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=”random”</div><div class="line">ZSH_THEME=”agnoster”</div><div class="line">ZSH_THEME=”ys”</div><div class="line">ZSH_THEME=”sorin”</div><div class="line">ZSH_THEME=”cloud”</div></pre></td></tr></table></figure>
<ul>
<li><p>更多主题效果查看(按英文字母排序)：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a> 。</p>
</li>
<li><p>另外，zsh自带Git命令哦，Ubuntu 16.04实测自带git版本还挺新 2.7.4。</p>
</li>
<li><p>主题主要是界面，好看就行。实用的还是zsh的插件哦，zsh插件太多了，暂时我也没接触多少，留着以后的文章再提吧。</p>
</li>
<li><p>关于zsh完美搭档git和iTerm2</p>
</li>
<li><p>zsh利用alias默认给你配置好了一大堆用于git操作的常见命令，你能用上几个技术水平哦，贴图：</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-542011a4e02aea1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Oh_My_Zsh已有Git系列的别名"></p>
<ul>
<li>其他一些注意事项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zsh在其实默认不完全兼容bash，但是你可以搜索一些方式配置使其尽可能兼容。</div><div class="line"></div><div class="line">zsh提供了很多短小但是强大的命令，zsh的拓展命令很多也非常强大，这点我也在慢慢学习。</div><div class="line"></div><div class="line">关于iTerm2配合使用在另一篇文章有写过，强大工具！</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 高效工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 远程工作之开始前的准备和沟通]]></title>
      <url>/2017/05/13/Laravel-%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C%E4%B9%8B%E5%BC%80%E5%A7%8B%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%92%8C%E6%B2%9F%E9%80%9A/</url>
      <content type="html"><![CDATA[<blockquote>
<p>前段时间在laravel-china社区的远程工作模块留言希望得到锻炼，结果没几周微信就有人加我询问情况。当时还在上课，又正好碰上S6 G9200刷机事件，直到晚上快十一点才电话联系上。</p>
<p>电话里对方简单问了下我学习php和laravel的情况，我做了个简单回复：php学习了一年，简单做过的企业站，laravel方面跟着慕课网完成了博客系统的后端api开发，没使用RESTful API，会用Git和Composer。对方也明确表示这是一个租赁系统，开发周期1-2月，询问我的业余时间段后给我开的价格是2K/m。本着学习的意愿我当然是同意了。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>其实这个时候我学习上已经很忙了，并且处在穰学长的firechat微信项目开发优惠券模块中。考虑到学长并不是专门搞PHP，这个项目做的流程并不正规搞得自己也晕头转向的，想想laravel社区这位大牛和我说话时也表示会教很多东西给我们，正好用来补救firechat项目，同时也把学长这个项目学到的用在租赁系统的模块开发上，做的好还能额外拿到2K-3K呢。</p>
</li>
<li><p>两三周过后，这位大牛(以后简称晓乐)联系我说明老板和他们那边都准备好了，我们开始聊开发前的一些准备工作。本地环境要求有Composer和Git，我使用的PhpStudy集成环境PHP版本7.0，这个租赁系统基于laravel 5.1开发。心想幸好不是最新的5.4，否则数据库问题(见Laravel 5.4 composer报错：指定的键太长)又是一大尴尬，那我可能就要使用自己不太熟悉的homestead或者laradock了。</p>
</li>
<li><p>晓乐继续询问我是否对Git的分支管理有了解？这里听了郭佳栋的，都说不会总不会错。于是他给了我这个地址：<a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2012/07/git.html</a> 。阮一峰大神的Git分支管理策略。代码放在他们公司搭建的Gitlab上，还给我创建了一个账号，说明了平时主要在dev上面开发，commit时候字数不要太多，尽量使用英文，要了解gitignore的作用，不要随意添加库文件等等。</p>
</li>
<li><p>然后就是团队协作软件了。以前刚接触laravel-china时候看到个小蜜圈觉得挺好的团队交流和协作开发工具，他这里使用的teambition却明显更加正规。我用手机注册账号之后他拉我进了名为租书的项目团队，说好下午拉我进入开发群。这次我学乖了，不敢多说话，等进群了也尽量少说话，免得人家把我当作菜鸟。其实我多问问学习也没错啊。</p>
</li>
<li><p>晓乐叫我下午把本地环境部署好，我想了想自己还是应该先把Git分支管理策略看一下，再登陆一下对方的gitlab看看，然后花点时间了解下teambition的基本使用，接下来搭建本地环境，看看这个项目进行到哪里了，目录和路由，引入了那些库等等。</p>
</li>
</ul>
<blockquote>
<p>下面是下午的操作：</p>
</blockquote>
<ul>
<li><p>下载并登陆Teambition客户端，修改了个人信息，下载并查看了小叮租书项目文件中的说明，数据库ER图</p>
</li>
<li><p>登陆私有Gitlab，修改了个人信息和密码，查看项目成员只有三个，另外两个都是领导。项目代码开始是william一周前提交上去的，另外提交的两次添加了zizaco/entrust和dingo/api两个第三方库，最近的一次添加了.gitignore中PhpStorm生成的.idea配置文件夹。</p>
</li>
<li><p>参考简书生成本地SSH密钥一文，搞定本地SSH和Gitlab，GitHub部署SSH。windows步骤如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">查看用户目录下是否有.ssh文件夹 cd &amp;&amp; ls -al</div><div class="line"></div><div class="line">如果有，则执行删除目录命令 rm -rf .ssh</div><div class="line"></div><div class="line">使用Git Bash执行 ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div><div class="line"></div><div class="line">然后三次回车即可，不要自己添加这里没用的密码。</div><div class="line"></div><div class="line">查看.ssh目录下的文件有  id_rsa id_rsa.pub known_hosts。</div></pre></td></tr></table></figure>
<ul>
<li><p>SSH使用的非对称加密算法存在公钥和私钥的说法，私钥id_rsa保留在本地即可，我们需要往Github和Gitlab部署的是公钥id_rsa.pub中的所有字符串。<a href="https://my.oschina.net/realfighter/blog/388486" target="_blank" rel="external">点击查看非对称加密详情</a>。</p>
</li>
<li><p>cat id_rsa.pub输出文件内容复制后打开github网站。</p>
</li>
<li><p>粘贴到Github的Settings》SSH and GPG keys和Gitlab的Profile Settings》SSH Keys即可，命名随意，需要验证密码。</p>
</li>
<li><p>下载项目源码本地部署，项目用到的composer包如图。</p>
</li>
<li><p>后台用到的composer包</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-b249a97abdac8292.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来自简书"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">git clone http://gitlab.develop.umeishu.com:port/root/rent-api.git 。</div><div class="line"></div><div class="line">由于魏关闭了服务器22端口，无法使用ssh下载。但是公钥部署和Access Token依然有用。</div><div class="line"></div><div class="line">git checkout -b develop master</div><div class="line"></div><div class="line">这里是是分支管理的内容，创建并切换到开发分支。</div><div class="line"></div><div class="line">cp .env.example .env</div><div class="line"></div><div class="line">新建rent数据库,切换win10的bash执行，修改.env中数据库和登陆账号密码。</div><div class="line"></div><div class="line">php artisan key:generate</div><div class="line"></div><div class="line">生成项目唯一key值。</div><div class="line"></div><div class="line">修改本地hosts,添加rent.dev映射，配置phpStudy虚拟域名，访问rent.dev测试。</div></pre></td></tr></table></figure>
<ul>
<li><p>由于我clone的master，remote上的dev版本比master新。所以我要pull拉一下服务器上的dev代码，使用git pull origin dev，dev是服务器上分支名称，pull之后本地代码就会有变动，Route就会添加。</p>
</li>
<li><p>然后compoer install更新一下依赖包，访问测试路由/hello 出现一个错误：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Unable to boot ApiServiceProvider, configure an API domain or prefix</div></pre></td></tr></table></figure>
<ul>
<li>这是因为remote的dev上使用了用于RESTful API的dingo/api包，我pull的时候.env.example文件添加了几个API开头的配置项。全部复制到.env中并且将API_DOMAIN配置为本地映射的虚拟域名即可，再次访问/hello 搭建成功。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 5.4 Composer报错：指定的键名太长]]></title>
      <url>/2017/05/12/Laravel-5-4-Composer%E6%8A%A5%E9%94%99%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%9A%84%E9%94%AE%E5%90%8D%E5%A4%AA%E9%95%BF/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/3995745-9baacd89f2b04eee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来自简书"></p>
<blockquote>
<p>Laravel 5.4更改了默认数据库字符集，更改后默认使用的utf8mb4包括支持存储emojis。这只会影响新的应用程序，只要你运行的MySQL版本低于v5.7.7或者MariaDB低于10.2.2，就会碰到上述图片中的错误，那么我们该如何解决呢？</p>
<p>laravel 5.4官方文档在数据库迁移(migrate)中给出了解决方法：编辑app/Providers/AppServiceProvider.php文件，并在boot方法中设置一个默认的字符串长度191即可：<br>key_to_long解决办法。那么你知道这样做的原理吗？</p>
</blockquote>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-cd5c87fb8b55afec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来自简书"></p>
<ul>
<li><p>实际上这个问题我们可以看看原理，以前的MySQL使用UTF8时候一个编码字符等于3个字节，那么varchar(255)字段的最大存储字节就是255*3=765。InnoDB给出的限制是767b，那么MySQL 5.7之前varchar这个类型就是可以正常使用的。</p>
</li>
<li><p>但现在默认的utf8mb4编码中一个编码字符为4个字节，那么最大的varchar类型的最大字节数就是2554=1020b，这已经远远超过了InnoDB给出现限制767b。由于1914=764&lt;767，所以我们引入Schema类提供一个方法处理这个情况，通过boot方法调用了Schema的静态方法defaultStringLength设置所有varchar类型的字段的字符数默认(也是最大)为191。</p>
</li>
<li><p>实际上我在PhpStudy环境中只通过配置文件设置了MySQL默认数据库引擎为InnoDB就达到这一效果，这是因为我在低于MySQL5.7环境下新建voyager数据库时选择了utf8编码。<br>新建数据库时的字符集</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-c7d502cdb3d1c3ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL默认字符集问题"></p>
<ul>
<li>当然，无论是开发还是线上环境，还是推荐使用官方提供的homestead环境，内置的PHP和数据库均为配套的最新版本，还有一大堆集成的可用工具。如果你使用Docker集成，也可以使用bug挺多尚不完美的LaraDock，开源地址：<a href="https://github.com/laradock/laradock。" target="_blank" rel="external">https://github.com/laradock/laradock。</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PhpStorm IDE个人使用指南]]></title>
      <url>/2017/05/10/PhpStorm-IDE%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我是个PHP工程师，关于开发IDE的选用就PhpStorm不用争论了。很多人从DW或者Sublime转向PhpStorm时会发现很多快捷键都不一样，DW用户甚至都不怎么关注快捷键。PhpStorm快捷键大全自行Google就能找到，本文主要就是针对该IDE的快捷键和系统配置作个简要说明。</p>
<p>PhpStorm 官方教程(英文)<br>[<a href="https://www.jetbrains.com/help/phpstorm/2017.1/meet-phpstorm.html" target="_blank" rel="external">https://www.jetbrains.com/help/phpstorm/2017.1/meet-phpstorm.html</a>]</p>
<p>PhpStorm 使用教程Gitbook(中文)<br>[<a href="https://jellychendeveloper.gitbooks.io/phpstorm/content/" target="_blank" rel="external">https://jellychendeveloper.gitbooks.io/phpstorm/content/</a>]</p>
</blockquote>
<a id="more"></a>
<ul>
<li>Ctrl+Z撤销过多步骤，Ctrl+Y却无法回退了。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">反撤销快捷键为Ctrl+Shift+Z,你也可以修改键盘方案为Ctrl+Y。</div><div class="line"></div><div class="line">查看菜单栏上的Edit-&gt;Redo Backspace就会显示反撤销快捷键Undo。</div></pre></td></tr></table></figure>
<ul>
<li>为我的项目重新命名，但是目录名不改变。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">菜单栏File-&gt;Rename Project即可。</div><div class="line"></div><div class="line">防止混淆项目，改成中文也不会有任何影响的。</div></pre></td></tr></table></figure>
<ul>
<li>Project目录可以使用Shift+Esc关闭，那么使用什么快捷键打开呢？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Ctrl+Tab打开switcher，继续按住Ctrl+1打开Project。</div><div class="line"></div><div class="line">Mac上使用Command + E进行切换，这也是工作文件切换的快捷键。</div></pre></td></tr></table></figure>
<ul>
<li>怎么匹配到A文件中所有的student字母并替换为teacher?</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Ctrl+F搜索并选中一个student，然后Ctrl+Shift+Alt+J全部匹配同时修改。</div><div class="line"></div><div class="line">这个快捷键可以修改为Ctrl+D选择单词，Ctrl+Alt+J全部匹配。</div></pre></td></tr></table></figure>
<ul>
<li>Sublime文件切换有个Ctrl+P(Goto Anything)，PhpStorm呢？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+Shift+N文件切换。</div></pre></td></tr></table></figure>
<ul>
<li>PhpStorm侧边栏文件/目录重命名怎么操作？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">右键要修改的文件/目录，选择Refactor-&gt;Rename，输入新名字即可。</div><div class="line"></div><div class="line">默认的两个选项尽量勾选上，这样其他地方有引用这个文件/目录的话也会进行相应的改动。</div></pre></td></tr></table></figure>
<ul>
<li>选中Project文件，怎么打开所在目录？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+Alt+F12，根据列表选择，如果要打开你选中的文件所在目录，直接回车即可。</div></pre></td></tr></table></figure>
<ul>
<li>怎么搜索并导入一个我喜欢的主题？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">首先到这个网站下载一个你喜欢的主题。</div><div class="line"></div><div class="line">然后在PhpStorm中点击File &gt;&gt; Import Settings选中确定重启即可。</div></pre></td></tr></table></figure>
<ul>
<li>怎么修改编辑代码区域和PhpStorm内置终端字体大小？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Ctrl+,打开Preferences，打开Editor &gt;&gt; Color &amp; Fonts &gt;&gt; Font，双击右侧设置Size。</div><div class="line"></div><div class="line">ctrl+,打开Preferences，搜索Console font，双击，右侧设置终端字体Size大小，需要重启IDE。</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 高效工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[纯HTML调用客户端程序的一些实用代码]]></title>
      <url>/2017/05/10/%E7%BA%AFHTMl%E8%B0%83%E7%94%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这绝对是值得收藏的纯干货，已加入和将要加入收藏的有QQ聊天，添加QQ好友，加入QQ群，添加微信好友，加入微信群聊，发送邮件，Skype聊天，MSN聊天，MSN添加好友，旺信聊天，百度地图接口，Google地图接口。本页面不提供测试访问，测试某接口的话请确保客户端安装有相应的应用程序。</p>
<p>比如说，我想用电脑试试旺信聊天接口代码能否调用。那么我要在电脑上安装阿里旺旺软件，然后将接口调用代码写在HTML文件中，保存再用浏览器打开，点击链接唤醒旺旺软件。默认聊天对象均为博主本人。下面是一些简短的常用代码：</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">点击QQ聊天</div><div class="line">&lt;a href=&quot;tencent://message/?uin=310932019&amp;amp;Site=QQ&amp;amp;Menu=yes&quot; &gt;点击QQ聊天&lt;/a&gt;</div><div class="line"></div><div class="line">企业QQ聊天</div><div class="line">&lt;a href=&quot;http://wpa.qq.com/msgrd?V=1&amp;Uin=310932019&amp;Site=&amp;Menu=yes&quot; target=&quot;_blank&quot;&gt;咨询QQ：310932019&lt;/a&gt;</div><div class="line"></div><div class="line">QQ聊天样式</div><div class="line">&lt;img src=&quot;http://wpa.qq.com/pa?p=1:21755061:1&quot; border=&quot;0&quot; /&gt;</div><div class="line">&lt;img src=&quot;http://wpa.qq.com/pa?p=1:21755061:2&quot; border=&quot;0&quot; /&gt;</div><div class="line">&lt;img src=&quot;http://wpa.qq.com/pa?p=1:21755061:3&quot; border=&quot;0&quot; /&gt;</div><div class="line">&lt;img src=&quot;http://wpa.qq.com/pa?p=1:21755061:4&quot; border=&quot;0&quot; /&gt;</div><div class="line">&lt;img src=&quot;http://wpa.qq.com/pa?p=1:21755061:5&quot; border=&quot;0&quot; /&gt;</div><div class="line"></div><div class="line">点击进行MSN聊天</div><div class="line">&lt;a href=&quot;msnim:chat?contact=jinshangdi310@163.com&quot; &gt;点这里MSN聊天&lt;/a&gt;</div><div class="line"></div><div class="line">点击链接发送邮件</div><div class="line">&lt;a href=&quot;mailto:jinshangdi310@163.com?subject=测试主题&amp;body=你好，一个HTML测试。&quot;&gt;Email to: jinshangdi310@163.com&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;a href=&quot;msnim:add?contact=jinshangdi310@163.com&quot;&gt;加我为好友MSN&lt;/a&gt;</div><div class="line"></div><div class="line">阿里旺旺加好友</div><div class="line">&lt;a href=&quot;wangwang:SendIM?晋殇帝&amp;uid_t=abcde&amp;suid=******&amp;desc=123456&quot;&gt;加我为好友旺旺&lt;/a&gt;</div><div class="line">&lt;!-- abcde请改为对方的账号，******请改为自己账号，123456是商品名称  --&gt;</div><div class="line"></div><div class="line">点击加好友Skype</div><div class="line">&lt;a href=&quot;callto://abcde &quot;&gt;点击加好友Skype&lt;/a&gt;</div><div class="line"></div><div class="line">Paypay付款</div><div class="line">&lt;a href=&quot;https://www.paypal.me/erchoc&quot;&gt;Paypay付款&lt;/a&gt;</div></pre></td></tr></table></figure>
<ul>
<li>百度地图API(含密钥)：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">- 头部head引入百度地图API：</div><div class="line">&lt;script src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=e4HVYXyDIAkqODAN7ZREFsRBx8roV2Hj&quot;&gt;&lt;/script&gt;</div><div class="line">- 身体body创建百度地图容器：</div><div class="line">&lt;div style=&quot;width:700px;height:550px;border:#ccc solid 1px;font-size:12px&quot; id=&quot;map&quot;&gt;&lt;/div&gt;</div><div class="line">- js脚本创建动态交互效果：</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  //创建和初始化地图函数：</div><div class="line">  function initMap()&#123;</div><div class="line">    createMap();//创建地图</div><div class="line">    setMapEvent();//设置地图事件</div><div class="line">    addMapControl();//向地图添加控件</div><div class="line">    addMapOverlay();//向地图添加覆盖物</div><div class="line">  &#125;</div><div class="line">  function createMap()&#123;</div><div class="line">    map = new BMap.Map(&quot;map&quot;);</div><div class="line">    map.centerAndZoom(new BMap.Point(116.038355,28.686546),15);</div><div class="line">  &#125;</div><div class="line">  function setMapEvent()&#123;</div><div class="line">    map.enableScrollWheelZoom();</div><div class="line">    map.enableKeyboard();</div><div class="line">    map.enableDragging();</div><div class="line">    map.enableDoubleClickZoom()</div><div class="line">  &#125;</div><div class="line">  function addClickHandler(target,window)&#123;</div><div class="line">    target.addEventListener(&quot;click&quot;,function()&#123;</div><div class="line">      target.openInfoWindow(window);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  function addMapOverlay()&#123;</div><div class="line">    var markers = [</div><div class="line">      &#123;content:&quot;电话：6800780&lt;br/&gt;备注：欢迎莅临我校参观指导&quot;,title:&quot;江西师范大学&quot;,imageOffset: &#123;width:-46,height:-21&#125;,position:&#123;lat:28.687116,lng:116.036415&#125;&#125;</div><div class="line">    ];</div><div class="line">    for(var index = 0; index &lt; markers.length; index++ )&#123;</div><div class="line">      var point = new BMap.Point(markers[index].position.lng,markers[index].position.lat);</div><div class="line">      var marker = new BMap.Marker(point,&#123;icon:new BMap.Icon(&quot;http://api.map.baidu.com/lbsapi/createmap/images/icon.png&quot;,new BMap.Size(20,25),&#123;</div><div class="line">        imageOffset: new BMap.Size(markers[index].imageOffset.width,markers[index].imageOffset.height)</div><div class="line">      &#125;)&#125;);</div><div class="line">      var label = new BMap.Label(markers[index].title,&#123;offset: new BMap.Size(25,5)&#125;);</div><div class="line">      var opts = &#123;</div><div class="line">        width: 200,</div><div class="line">        title: markers[index].title,</div><div class="line">        enableMessage: false</div><div class="line">      &#125;;</div><div class="line">      var infoWindow = new BMap.InfoWindow(markers[index].content,opts);</div><div class="line">      marker.setLabel(label);</div><div class="line">      addClickHandler(marker,infoWindow);</div><div class="line">      map.addOverlay(marker);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  //向地图添加控件</div><div class="line">  function addMapControl()&#123;</div><div class="line">    var scaleControl = new BMap.ScaleControl(&#123;anchor:BMAP_ANCHOR_BOTTOM_LEFT&#125;);</div><div class="line">    scaleControl.setUnit(BMAP_UNIT_METRIC);</div><div class="line">    map.addControl(scaleControl);</div><div class="line">    var navControl = new BMap.NavigationControl(&#123;anchor:BMAP_ANCHOR_BOTTOM_RIGHT,type:2&#125;);</div><div class="line">    map.addControl(navControl);</div><div class="line">  &#125;</div><div class="line">  var map;</div><div class="line">    initMap();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 奇淫巧计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优盘PE和Windows系统的安装教程]]></title>
      <url>/2017/05/09/%E4%BC%98%E7%9B%98PE%E5%92%8CWindows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>应某电脑小白之托，特意写了这篇文章给各位想要了解电脑装windows系统的朋友。其实安装windows系统的方式非常多种，比如解压安装，在线升级系统，备份还原系统，软碟通刻录安装，电脑维修店最常见的还是PE系统安装。安装方式这么多，但其实也就是一种思路：暂时脱离系统盘(C:)安装，这篇文章使用PE教程，网上的PE软件常见如老毛桃、大白菜、深度，我使用的是U启动，因为前者都植入和很多广告和第三方软件。电脑维修的地方可能会使用自己定制的PE和镜像。下面开始准备工作吧。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>准备一个8G优盘，事先下载好需要安装的系统镜像 [<a href="http://msdn.itellyou.cn/" target="_blank" rel="external">http://msdn.itellyou.cn/</a>] 和U启动软件 [<a href="http://www.uqidong.com/" target="_blank" rel="external">http://www.uqidong.com/</a>] 。这里不得不说几点：微软公司的软件尽量都在官方[<a href="https://www.microsoft.com" target="_blank" rel="external">https://www.microsoft.com</a>] 下载，但是由于微软官网所在服务器距离我们过于遥远，下载非常慢而且经常中断。国内的一个小伙子利用CDN网络搭建了一个服务器把微软官方的系统和各种工具都放在这个MSDN网站上。如果你担心被植入病毒，可以使用md5校验工具查看md5值是否与微软提供的一致。</p>
</li>
<li><p>U启动软件用于把一个小型的系统(PE维护系统)写入你的优盘中。这个系统一般不提供网络环境，但是提供了很多专业维护和测试工具。由于现代主板在2012年左右引入了一种EFI(UEFI前身)引导模式，现在BIOS设置引导系统就出现了EFI和Legacy两种方式。这个软件也提供了所谓的装机版和UEFI版本，根据需求自行下载。</p>
</li>
<li><p>操作系统必须是安装在一块硬盘的主分区中，开机时候引导程序根据A-B-C-D的路线去查看你的主分区中是否存在操作系统。就像三个人(外接设备)突然来了你家(硬盘)，看门狗(引导程序)一个一个闻他们身上的味道，第一个人是主人，好了主人可以进门(进入操作系统)，其他不许进来。如果你安装多系统，就像你和老爸一起回家，看门狗就会叫两句(只能先进来一个，你们谁先吧)，虽然要求不能同时进入房间，但最终都会让你们进来。</p>
</li>
<li><p>于是我们需要在BIOS中修改一下的外部设备的加载顺序(也就是三个人来你家的站位顺序)。BIOS全称基本输入输出系统，可以理解为看门狗的房子，在你还没进入系统之前，BIOS一直守着大门。是的，主板型号各种各样，进入BIOS的方式也是千奇百怪，这是装系统的难点之一。</p>
</li>
<li><p>装系统两大难点之二：MBR和GPT硬盘格式分不清。这是一个不得不说的大问题，GPT这种格式的硬盘数据无法被传统的引导程序识别，只能使用配套的UEFI引导模式。使用GPT+UEFI是最近几年几乎所有笔记本的做法，它可以让你的开机速度明显提高，还可以支持超多主分区。(MBR最多4个主分区意味着最多安装4个操作系统)</p>
</li>
<li><p>如果你想依靠重装系统摆脱电脑卡顿，那还是放弃吧。卡顿找理由：有固态吗？垃圾软件多吗？开机启动项关了吗？内存是不是小了啊？处理器是不是超低压低频啊？是不是长期用来打多渲染游戏啊？</p>
</li>
<li><p>把镜像文件放到D盘根目录。插上优盘，备份数据，格式化优盘。</p>
</li>
<li><p>打开U启动，选择写入PE，写入完成。</p>
</li>
<li><p>关机，开机。看到品牌标识按F1/F2/F8/F12/del/esc(根据你的型号选择，如果BIOS开启了Fn,那还需要同时按Fn键)。</p>
</li>
<li><p>如果进入了BIOS,找到BOOT选项卡下的引导顺序栏，根据提示使用F5/F6调整你的优盘到第一启动项，根据提示保存重启就会自动进入PE。</p>
</li>
<li><p>如果没进入BIOS而是弹出一个列表框，这是大概2012年后主板的快速选择，选择你的优盘回车即可，也会自动进入PE。</p>
</li>
<li><p>当你看到PE界面时，大概有10-20秒反应时间，如果你啥都不做，那就会默认进入你的系统，而不是重装系统，所以请立刻按下方向键。</p>
</li>
<li><p>PE制作考虑到兼容性一般会好几种微型系统如XP/2003/WIN8，一般情况下进入哪个都行，建议10年以前的电脑进入XP/2003PE，某些时候还是有些区别的。</p>
</li>
<li><p>成功进入PE后等待几秒会弹出一个自动安装系统的软件，在桌面上也可以打开这个软件，你只需要选择D盘中的.iso系统镜像，然后选择安装到C盘，确定即可。有个提示框问你引导程序放哪？系统放哪个盘符引导就放那个盘符。</p>
</li>
<li><p>有时候我们的硬盘是刚买来的，没有盘符，或者我想重新格式化整块硬盘。</p>
</li>
<li><p>那么你就要把镜像放在优盘或者移动硬盘中了，然后使用PE都会安装的DG磁盘分区工具，使用方法很简单不做赘述。</p>
</li>
<li><p>安装完成后会自动重启，关机后拔掉优盘。否则修改BIOS顺序的话，开机后还是会进入U启动界面。</p>
</li>
<li><p>接下来的安装就是傻瓜式了，激活码可以先跳过，不建议联网。进入系统后使用事先下载的激活工具或者某宝买来的密钥激活即可。<br>```</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git在项目开发中的使用]]></title>
      <url>/2017/05/09/Git%E5%9C%A8%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Git不是github!Git不是github!Git不是github!重要的事情说三遍。Github和osc码云,gitlab,coding.net一样只是个放代码的远程仓库；怎么把这些代码放上去，怎么管理？这些平台都使用了Git这种超级流行的分布式管理技术。</p>
<p>我甚至建议开发者放弃传统的使用FTP上传代码到服务器的方式，项目代码反正你也要备份，放在托管平台多好，99%不会丢失数据，还方便迭代和版本回溯呢，又利于团队协作。FTP就让不懂代码的客户使用吧，也许他们要改改图片上传.av呢。阅读全文查看所有人都能学会的git简单使用方式。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>开始一个项目有两种方式。第一种，到github创建项目仓库，本地clone下来。下面介绍第二种：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- 初始化本地仓库，生成.git配置文件夹 git init</div><div class="line"></div><div class="line">- 查看当前暂存区代码状态 git status</div><div class="line"></div><div class="line">- 将全部代码纳入本地仓库 git add -A</div><div class="line"></div><div class="line">- 再次查看代码暂存区状态 git status</div><div class="line"></div><div class="line">- 配置用户信息,用于区分代码维护者</div><div class="line">    - git config --global user.name &quot;Erchoc&quot;</div><div class="line">    - git config --global user.email &quot;erchoc@qq.com&quot;</div><div class="line"></div><div class="line">- 查看git全部配置信息 git config -l</div><div class="line"></div><div class="line">- 代码提交到本地仓库 git commit -m &quot;初次提交,初始化项目&quot;</div><div class="line"></div><div class="line">- 修改过的代码直接丢进本地仓库 git commit -am “自动执行了add操作”</div><div class="line"></div><div class="line">- 添加远程仓库地址</div><div class="line">  git remote add origin https://github.com/Erchoc/laraos.git</div><div class="line"></div><div class="line">- 添加多个远程仓库要加`set-url --add`参数</div><div class="line">  git remote set-url --add origin https://git.oschina.net/erchoc/laraos.git</div><div class="line"></div><div class="line">- 代码推送到远程dev分支 git push origin dev</div></pre></td></tr></table></figure>
<ul>
<li>码云图说Git基本使用：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-31b3b1de595b412f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来自简书"></p>
<hr>
<ul>
<li>由于小叮共享书项目而接触到分支管理概念，以下为更新内容。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git clone到master分支到本地后，我们可以使用git branch查看本地分支。</div><div class="line"></div><div class="line">创建并切换到本地的开发分支：git checkout -b develop master。</div><div class="line"></div><div class="line">部分开发完毕，切换回master分支：git checkout master。</div><div class="line"></div><div class="line">合并develop分支：git merge --no-ff develop，使用这个参数正常合并，否则默认使用快进世合并。</div><div class="line"></div><div class="line">删除develop分支git branch -d develop</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 高效工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows空文件名命名技巧]]></title>
      <url>/2017/05/08/Windows%E7%A9%BA%E6%96%87%E4%BB%B6%E5%90%8D%E5%91%BD%E5%90%8D%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如何将文件名设置为空，这是个不得不说的程序员大事。在类Unix的Linux和MacOS上完全不用担心这个问题，但是windows底层设计不允许直接新建有后缀没名字的文件和文件夹。CodeIgniter和Apache的.htaccess重写，laravel5在github上的源码直接clone下来无法使用，因为项目目录下的.env.example在windows系统下无法重命名为.env。这都是windows诟病导致的一些开发环境问题。</p>
<p>关于文件命名为空有很多种方法，普通用户用windows系统自带的charmap字符映射表替换为空格即可。但是开发者需要的是实实在在的空文件名，最简单的做法是压缩这个文件，在压缩文件内重命名后再解压。</p>
<p>另外，开发者应该都会使用git，模拟unix环境的终端里面可以使用touch新建空文件名，也可以使用mv修改为空。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>win10开发者模式下自带的ubuntu bash也同样可以执行这些命令修改为空文件名。</p>
</li>
<li><p>当然，你也可以使用bat批处理文件的替换脚本。</p>
</li>
<li><p>你甚至可以直接在sublime中新建命令为空的文件。</p>
</li>
<li><p>关于使用github上laravel源码的问题，由于官方源码并没有生成base64的APP_KEY，也没有包含各种依赖文件。</p>
</li>
<li><p>所以git clone后你要做的就是进入这个项目目录修改.env.example文件为.env。然后执行composer install。</p>
</li>
<li><p>之后还是无法访问public目录，并且没有详细报错信息，这时你应该打开config/app.php文件，将debug设置为true再刷新页面。你会看到关于解码的错误，这时你应该在项目根目录打开控制台输入php artisan key:generate。</p>
</li>
<li><p>你会看到.env文件中的APP_KEY生成，页面可以正常使用了。</p>
</li>
<li><p>上面的做法结束后你还应该替换.git文件夹，配置提交到自己的仓库。还是建议使用composer create-project而不要使用laravel安装器安装框架，主要还是因为composer安装会有自带脚本重命名.env文件并生成唯一密钥。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 奇淫巧计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS服务器部署]]></title>
      <url>/2017/05/08/CentOS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>测试服务器使用的bandwagonhost最小化安装的CentOS7，纯净到连管理权限的sudo命令都没有。</p>
<p>购买该服务器后得到ip地址和ssh开放端口以及root用户的密码(随机密码)。打开终端或者命令提示符，windowsy用bash切换到内部子系统ubuntu再用ssh命令连接到服务器：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p $port root@$ip</div></pre></td></tr></table></figure>
<blockquote>
<p>剪切密码，接受并保存本地密钥（如果密钥改变，请手动删除～/.ssh/$pubKey）。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>安装sudo库，useradd和passwd新建用户设置密码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum install sudo -y</div><div class="line"></div><div class="line">useradd yanggege</div><div class="line"></div><div class="line">passwd yanggege</div><div class="line"></div><div class="line">id yanggege</div></pre></td></tr></table></figure>
<ul>
<li>把这个用户添加到wheel root用户组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod -g root yanggege。</div></pre></td></tr></table></figure>
<ul>
<li>由于sudo命令的问题，在sudoers文件中限制了用户访问的权限。所以我们使用root行复制改名的方法，也可以选择添加或者打开wheel组权限。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sudoers</div></pre></td></tr></table></figure>
<ul>
<li>yum源的问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">centos,RHEL和Fodora同属于RedHat系列，另一主要阵营是Debian的ubuntu系列。</div><div class="line"></div><div class="line">前者的数据软件仓库叫做yum源，安装软件也是使用yum install命令。</div><div class="line"></div><div class="line">默认的centos官方源在国外，下载速度慢。</div><div class="line"></div><div class="line">国内阿里云和各高校提供了免费的yum源，建议更换为国内的网易开源镜像站地址。。</div></pre></td></tr></table></figure>
<ul>
<li><p>更换默认yum源为网易镜像站点的纯小白教程：<a href="http://mirrors.163.com/.help/centos.html。" target="_blank" rel="external">http://mirrors.163.com/.help/centos.html。</a></p>
</li>
<li><p>根据你的服务器系统版本顺序执行mv备份，wget下载(在这个目录下执行哦：/etc/yum.repos.d/)，yum清除缓存几条命令即可。</p>
</li>
<li><p>安装软件步骤：一更新，二有无，三信息，四下载安装</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">yum update</div><div class="line"></div><div class="line">yum search git</div><div class="line"></div><div class="line">yum info git</div><div class="line"></div><div class="line">yum install git -y</div><div class="line"></div><div class="line">-y参数代表直接安装，不写就会提示需要安装一些依赖，你要不要安装？</div><div class="line"></div><div class="line">建议初学都不加该参数，自己看看依赖哪些包也是极好的。</div><div class="line"></div><div class="line">如果你想同时安装多个软件，可以这样：yum install docker.io git gcc。</div></pre></td></tr></table></figure>
<ul>
<li>查看安装是否成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure>
<ul>
<li>centos是很多大企业再用的服务器系统，重在稳定，官方提供的yum包一般版本偏低。</li>
</ul>
<p>yum其实是下载的rmp格式的包进行shell脚本自动化操作，你也可以自行下载更高版本的rpm包，再将其添加到本地仓库安装。</p>
<ul>
<li>卸载git或者其他软件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum deplist git</div><div class="line"></div><div class="line">yum remove git</div></pre></td></tr></table></figure>
<ul>
<li>查看yum安装的软件列表和某软件信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum list</div><div class="line"></div><div class="line">yum list git</div><div class="line"></div><div class="line">yum list不带软件包名将列出所有使用yum安装的包，包括很多依赖包，请谨慎使用</div><div class="line"></div><div class="line">配合linux中的head,tail和grep命令使用就不担心输出内容可能过多的问题。</div></pre></td></tr></table></figure>
<ul>
<li>我常用的yum源命令就上面这些了，其他很多命令你都可以使用–help或者man查看文档。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下PATH变量和Composer的操作问题]]></title>
      <url>/2017/05/07/Linux%E4%B8%8BPATH%E5%8F%98%E9%87%8F%E5%92%8CComposer%E7%9A%84%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>PATH就是操作系统中的环境变量，无论是windows，linux还是macos都存在这个环境变量。它存储着一些目录的集合，决定着shell将到哪些目录中寻找命令或程序，PATH的值是一系列目录，当你运行一个程序时，Linux首先在环境变量下进行搜寻程序，找不到则执行当前目录下能对应的程序，没有的话终端界面就返回Not Found或者Command Not Exists提示。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>添加某个目录dire到环境变量，其格式为：PATH=dire:$PATH。环境变量更改后，在用户下次登陆时生效，如果想立刻生效，则可执行下面的语句：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source .bash_profile</div></pre></td></tr></table></figure>
<ul>
<li><p>需要注意的是，最好不要把当前路径 “./” 放到 PATH 里，这样可能会受到意想不到的攻击。</p>
</li>
<li><p>完成后，可以通过 echo $PATH 查看当前的搜索路径，即环境变量值。</p>
</li>
<li><p>可用 export 命令查看PATH值</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">yangxuejin@THINKPAD_X220:/mnt/d/OneDrive/WWW$ export</div><div class="line">declare -x HOME=&quot;/home/yangxuejin&quot;</div><div class="line">declare -x HOSTTYPE=&quot;x86_64&quot;</div><div class="line">declare -x LANG=&quot;en_US.UTF-8&quot;</div><div class="line">declare -x LESSCLOSE=&quot;/usr/bin/lesspipe %s %s&quot;</div><div class="line">declare -x LESSOPEN=&quot;| /usr/bin/lesspipe %s&quot;</div><div class="line">declare -x LOGNAME=&quot;yangxuejin&quot;</div><div class="line">declare -x LS_COLORS=&quot;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:&quot;</div><div class="line">declare -x NAME=&quot;THINKPAD_X220&quot;</div><div class="line">declare -x OLDPWD</div><div class="line">declare -x PATH=&quot;/home/yangxuejin/.composer/vendor/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games&quot;</div><div class="line">declare -x PWD=&quot;/mnt/d/OneDrive/WWW&quot;</div><div class="line">declare -x SHELL=&quot;/bin/bash&quot;</div><div class="line">declare -x SHLVL=&quot;1&quot;</div><div class="line">declare -x TERM=&quot;xterm&quot;</div><div class="line">declare -x USER=&quot;yangxuejin&quot;</div></pre></td></tr></table></figure>
<ul>
<li>单独查看PATH环境变量，可用：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure>
<ul>
<li>下载composer.phar文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd &amp;&amp; wget https://getcomposer.org/composer.phar</div></pre></td></tr></table></figure>
<ul>
<li>移动到$PATH目录下的同时修改文件名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure>
<ul>
<li>测试composer并查看和修改默认的仓库repository</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">composer -–version</div><div class="line"></div><div class="line">composer config -g repo</div><div class="line"></div><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>
<ul>
<li>使用composer搜索thinkphp项目和查看版本详情</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">composer search thinkphp</div><div class="line"></div><div class="line">composer show --all topthink/thinkphp</div></pre></td></tr></table></figure>
<ul>
<li>使用composer创建thinkphp5项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">composer create-project topthink/thinkphp tp3</div><div class="line"></div><div class="line">composer create-project topthink/think tp5</div></pre></td></tr></table></figure>
<ul>
<li>安装并临时修改环境变量测试laravel安装器：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">composer global require “laravel/installer”</div><div class="line"></div><div class="line">PATH=/home/yangxuejin/.composer/vendor/bin:$PATH</div><div class="line"></div><div class="line">laravel –-version</div></pre></td></tr></table></figure>
<ul>
<li><p>上述方法的PATH在终端关闭后就会消失。所以还是建议通过编辑/etc/profile来改PATH，用户级就是修改家目录下的.bashrc(即：~/.bashrc)。</p>
</li>
<li><p>永久添加PATH环境变量(系统级)，用户级.profile同理</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/profile</div><div class="line"></div><div class="line">export PATH=”/home/yangxuejin/.composer/vendor/bin:$PATH”</div><div class="line"></div><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<ul>
<li>再次查看PATH：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[又写Hexo博客]]></title>
      <url>/2017/05/07/%E5%8F%88%E5%86%99Hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本来是真的不太想再整博客这东西，特别是github免费的空间配合hexo框架整的真烦，可是很多知识不记录又容易忘记，不写博客又显得自己没有竞争力，想想还是硬着头皮上了github上Hexo框架领域star数第一的next主题，这里真的不得不吐槽Hexo框架的报错合Debug策略。其实原来也挺喜欢一位学长使用的漂亮主题yilia，前端内容笔记也很翔实，<a href="https://hzzly.github.io" target="_blank" rel="external">https://hzzly.github.io</a> 。我也会尽量同步简书和本站内容，目前只能手动同步，各位有啥好办法可以邮件或者文章留言留言联系我。邮箱：erchoc@qq.com。</p>
<p>阅读全文,开始配置Hexo+Next吧，Coding Notes Start.</p>
</blockquote>
<a id="more"></a>
<ul>
<li>运行下面的命令确保你安装了node/npm和git，git需要配置提交代码时用于区别用户的全局个人信息。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm –version &amp;&amp; git –version</div></pre></td></tr></table></figure>
<ul>
<li>全局安装hexo框架的客户端构建工具hexo-cli</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<ul>
<li>新建并进入项目文件夹</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd &amp;&amp; mkdir Hexo &amp;&amp; cd Hexo</div></pre></td></tr></table></figure>
<ul>
<li>初始化hexo框架项目，自动安装框架代码和一个默认主题landscape</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<ul>
<li>hexo框架默认目录结构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">_config.yml   站点全局配置</div><div class="line">package.json  npm包和依赖管理</div><div class="line">scaffolds     模板文件夹</div><div class="line">source        源文件</div><div class="line">└── _posts    文件markdown源码</div><div class="line">themes        主题,默认有landscape</div></pre></td></tr></table></figure>
<ul>
<li>启动Hexo内置服务器默认的4000端口查看博客是否搭建成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo serve 或者 hexo s</div></pre></td></tr></table></figure>
<ul>
<li>下载主题并在正确目录放置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next ~/Hexo/themes/next</div></pre></td></tr></table></figure>
<ul>
<li><p>修改_config.yml中应用的主题为next,重新hexo s查看浏览器</p>
</li>
<li><p>安装git部署模块hexp-deployer-git</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/Hexo &amp;&amp; npm install hexo-deployer-git -–save</div></pre></td></tr></table></figure>
<ul>
<li>生成public下的静态文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate 或者 hexo g</div></pre></td></tr></table></figure>
<ul>
<li>清除生成的静态文件和缓存数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<ul>
<li>在hexo的配置文件中设置deploy自动部署信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">type: git</div><div class="line">repo: https://github.com/Erchoc/erchoc.github.io</div></pre></td></tr></table></figure>
<ul>
<li>演示部署到github</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy 或者 hexo d</div></pre></td></tr></table></figure>
<ul>
<li>其他注意事项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo s本地测试失败原因基本是因为配置文件填写错误,clone官方的配置文件替换即可。</div><div class="line"></div><div class="line">hexo+next静态博客在windows这种系统上更新操作容易丢失数据，建议云盘备份source目录。</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 技术博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[五一放假，三清山受罪一行一宿]]></title>
      <url>/2017/05/05/%E4%BA%94%E4%B8%80%E6%94%BE%E5%81%87%EF%BC%8C%E4%B8%89%E6%B8%85%E5%B1%B1%E5%8F%97%E7%BD%AA%E4%B8%80%E8%A1%8C%E4%B8%80%E5%AE%BF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是一个为约炮而受罪的五一假期，近千元穷买罪受。</p>
<p>QQ空间相册记录的行程大致是：坐火车去鹰潭，住宾馆，早起去玉山，三轮转汽车站，坐汽车九转十八弯，险达三清山。山脚吃午饭，买零食，租用帐篷280，准备上山，双人学生票加来回索道400，买不起就徒步上1800米。守门人要求学生买票150双人，约徒步3小时，4点抵达有钱人10分钟就能到达的南部索道终点，继续爬楼梯，约5点脱离爬楼梯，抵达坑爹的西海岸高空栈道，靠石壁行约1个小时，期间零食仅剩方便面，大概于6:30到达传说中三大帐篷聚集地之一：三清宫，就一破房子，门口一个没冲水的厕所，房子出来就是帐篷堆积的谷地，上厕所，搭帐篷。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>是夜，冷风刺骨，一个睡袋薄又寒，帐篷外是嬉笑游戏，帐篷里两条穷狗双双依偎。夜太寒，难入眠，抬望眼是点点星，顿觉驴友笑我穷。翌日寅时，已有驴友整装再战，卯辰更替，我们才耐不住寒冷及时出发前往阳光海岸。</p>
</li>
<li><p>不得不说南部上山，行西海岸，顿足三清宫是个不错的路线。30日，早行稍许踏涉阳光海岸，正值日出时分，照的我们临时忘却寒冷，浑身暖洋洋了好一会儿，相册中依旧可以根据光线强弱区别日暮图和向阳朝气图。十时缺水，恰近坑爹卖场，内人饥肠辘辘，遂40吃了俩泡面，舍不得10元一瓶矿泉水。</p>
</li>
<li><p>按摩止不住乳酸分泌，下山路上胖子的大象腿不听使唤，于是我们买了各种纪念品后选择索道下山，退还帐篷，取回200押金，苦等一小时汽车。回去人太多，胖子人太胖挤不上车，因此认识了从上海过来的一对中年夫妇，全程我给她剧透人民的名义，鼓励他使用翻墙科技。</p>
</li>
<li><p>馋嘴的小胖子不知从哪看到南昌这几天的美食节宣传，吵着要和我直接从玉山回南昌。万幸手慢没车票，于是她坐我站着回了鹰潭，当夜直接抵达江西师范高等专科学校。吃菠萝，住宾馆，吃二食堂晚饭，赏鹰潭师范夜色良人，少见男生，满满的超短小迷妹。下午，鹰潭湿地公园小憩，继而排队买蒸香鸭，好吃太腻，双方各一整鸭，尽剩半只。</p>
</li>
<li><p>6时30分，抵达南昌。7时45分，抵达冬瓜理工北门。身无分文，壮肾一个，敬候需求者，20万不议价。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 生活琐事 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[穷人旅游野外住宿大攻略]]></title>
      <url>/2017/05/05/%E7%A9%B7%E4%BA%BA%E6%97%85%E6%B8%B8%E9%87%8E%E5%A4%96%E4%BD%8F%E5%AE%BF%E5%A4%A7%E6%94%BB%E7%95%A5/</url>
      <content type="html"><![CDATA[<ul>
<li>博主五一带着女朋友到三清山游玩，无奈我太穷了只能野营。一晚上折腾的自己回来都感冒了几周，这里给给位说明一下野营需要带什么，需要注意什么？</li>
</ul>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">根据景区物价，一般你需要准备大量充饥类食品如方便面，面包，酸辣小吃，糯米等。</div><div class="line"></div><div class="line">景区矿泉水一瓶10元已是常态，建议上山前至少准备5瓶矿泉水。</div><div class="line"></div><div class="line">卫生纸建议准备一卷，两三包估计会不够用。</div><div class="line"></div><div class="line">领取热水使用可能收费，建议自备打火机和泡面的铁碗自己烧火。</div><div class="line"></div><div class="line">可以选择带上小型的热水壶，景区一些景点会提供插座烧水，水源可以用矿泉水或者山泉水。</div><div class="line"></div><div class="line">地势较高的山区夜晚霜露很重，需要使用双层帐篷防止内部渗透水珠。</div><div class="line"></div><div class="line">景区山下租赁的帐篷质量一般，甚至没有充气床垫，不防水，建议网购500及以上价格的帐篷。</div><div class="line"></div><div class="line">自购帐篷的携带建议使用驴友旅行背包，零食等用品也可以放进去，建议每人都使用背包分担重量。</div><div class="line"></div><div class="line">晚上千万别把鞋袜放帐篷外面，否则第二天一早全部会湿透。</div><div class="line"></div><div class="line">去的时候无论冷暖，建议带上折叠雨伞和空气被，气垫，指南针。</div><div class="line"></div><div class="line">防止背包和衣物线条脱落，建议带上针线。</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-340b7d8299921443.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1440/q/50" alt="图片发自简书App"></p>
]]></content>
      
        
        <tags>
            
            <tag> 生活琐事 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在PSR基础上自定义的代码命名规范]]></title>
      <url>/2017/03/30/%E5%9C%A8PSR%E5%9F%BA%E7%A1%80%E4%B8%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E4%BB%A3%E7%A0%81%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>PSR是PHP Standard Recommendations 的简写，由PHP FIG组织制定的PHP规范，是PHP 开发的实践标准。官网：<a href="https://psr.phphub.org" target="_blank" rel="external">https://psr.phphub.org</a> 。</p>
<p>这篇文章是博主根据PSR基础规范和PHP100知名讲师张恩民的PHP教学视频进行整理，所有命名禁止使用阿拉伯数字。</p>
</blockquote>
<a id="more"></a>
<h3 id="目录、文件和局部变量"><a href="#目录、文件和局部变量" class="headerlink" title="目录、文件和局部变量"></a>目录、文件和局部变量</h3><ul>
<li>使用英文名词、动词，所有字母均使用小写，以下划线作为单词的分隔。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">目录：upload,templates,install</div><div class="line">文件：index.php,config.php</div><div class="line">变量：$pay_time,$user_name,$article_del_time</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="全局常量"><a href="#全局常量" class="headerlink" title="全局常量"></a>全局常量</h3><ul>
<li>使用英文名词、动词，所有字母均使用大写，以下划线作为单词的分隔。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">define(&apos;WEBSITE_NAME&apos;,&apos;erchoc&apos;);</div><div class="line">define(&apos;WEBSITE_URL&apos;,&apos;http://www.erchoc.com&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数组变量"><a href="#数组变量" class="headerlink" title="数组变量"></a>数组变量</h3><ul>
<li>使用英文名词、动词，以下划线作为单词的分隔。</li>
<li>所有字母均使用小写，以_array结束。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$scopr_array = array();</div><div class="line">$book_id_array = array();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对象变量"><a href="#对象变量" class="headerlink" title="对象变量"></a>对象变量</h3><ul>
<li>使用英文名词、动词，以下划线作为单词的分隔，可以完整采用类名或者简化类名，但是必须明确知道是什么类。</li>
<li>所有字母均使用小写，以_obj结束。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$user_obj = new userAccount();</div><div class="line">$pay_obj = new payOrder();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="类的命名"><a href="#类的命名" class="headerlink" title="类的命名"></a>类的命名</h3><ul>
<li>使用英文名词，以大写字母作为词的分隔，其他字母均使用小写。</li>
<li>名词的首个字母小写，类名不使用下划线。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class userAccount&#123;......&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h3><ul>
<li>使用英文名词、动词，所有字母均使用小写，以下划线作为单词的分隔。</li>
<li>对象属性的命名同理。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class userCar</div><div class="line">&#123;</div><div class="line">  public $user_name = &apos;Erchoc&apos;;</div><div class="line"></div><div class="line">  public function account_price_car()</div><div class="line">  &#123;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public function add_user_car()</div><div class="line">  &#123;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="函数、符号和运算符规范"><a href="#函数、符号和运算符规范" class="headerlink" title="函数、符号和运算符规范"></a>函数、符号和运算符规范</h3><ul>
<li><p>switch的每个case块都要换行再加上break，而default必须存在以处理特殊情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">switch() &#123;</div><div class="line">  case &apos;user&apos;:</div><div class="line">    ......</div><div class="line">  break;</div><div class="line">  case &apos;type&apos;:</div><div class="line">    ......</div><div class="line">  break;</div><div class="line">  default:</div><div class="line">    ......</div><div class="line">  break;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>声明定位风格：变量的代码块必须等于号对其，且初次使用变量必须初始化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$tableName   = &apos;&apos;;</div><div class="line"></div><div class="line">$user_article = &apos;&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>尽量避免下面的做法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$tableType;</div><div class="line"></div><div class="line">$get_bookArticle = &apos;&apos;;</div><div class="line"></div><div class="line">$user_show = &apos;&apos;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="其他基础规范"><a href="#其他基础规范" class="headerlink" title="其他基础规范"></a>其他基础规范</h3><ul>
<li><p>除书写SQL和需要加入变量的时候使用双引号，其他尽可能使用单引号代替双引号。</p>
</li>
<li><p>PHP文件中尽可能不出现HTML语句，尤其是使用模板开发，考虑到模板兼容性，HTML文件中也尽可能减少PHP代码。</p>
</li>
<li><p>通常每个方法只完成一个特定的功能(逻辑动作事务)，所以方法的命名要能清楚说明它的用处，例如使用<code>email_error_check()</code>代替<code>email_chenk()</code>，用<code>pay_error_check()</code>代替<code>pay_chenk()</code>。</p>
</li>
<li><p>自定义方法和变量名不能与系统方法和变量冲突。</p>
</li>
<li><p>HTML的form表单各元素的name和数据库字段名或者PHP接受变量一致，或者在字段名的基础上团队确定表单元素名添加前缀或者后缀。</p>
</li>
<li><p>HTML的form表单不要采用缺省方法bool值判断非零数值，必须如下显式测试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if($user_pay_num != false) &#123;</div><div class="line">   ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="各种注释的规范"><a href="#各种注释的规范" class="headerlink" title="各种注释的规范"></a>各种注释的规范</h3><ul>
<li><p>流程控制和无参函数在实现前使用单行注释，需要特别说明的行在行尾添加单行跟踪注释。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//用户检测</div><div class="line">if($check_obj-&gt;username( $username ) == true)&#123;</div><div class="line">  ......</div><div class="line">&#125;</div><div class="line"></div><div class="line">//获取用户信息</div><div class="line">$user_name = $_POST[&apos;username&apos;];</div></pre></td></tr></table></figure>
</li>
<li><p>多参数方法注释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">  *   分页预处理函数</div><div class="line">  *  sql          SQL语句</div><div class="line">  *  page         当前页数</div><div class="line">  *  limit        每页现实的数量</div><div class="line">  *  maxs         查询总数</div><div class="line">  */</div><div class="line">  function page_limit($sql, $page=&apos;0&apos;, $limit=10, $maxs=&apos;&apos;)</div><div class="line">  &#123;</div><div class="line">    ......</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数据库设计与操作规范"><a href="#数据库设计与操作规范" class="headerlink" title="数据库设计与操作规范"></a>数据库设计与操作规范</h3><ul>
<li><p>数据库名称使用英文小写，以下划线分隔单词，以免跨平台时出现的大小写错误。</p>
</li>
<li><p>数据表名称应该由物体对象名称的小写字母组成，以下划线分隔单词。并尽可能对应系统中业务类的名称，如laravel框架的数据表名称为Model类的复数小写形式。</p>
</li>
<li><p>数据表的字段避免使用varchar和text等不定长的数据。</p>
</li>
<li><p>查询多表连接数据时候要求使用全名称或者别名，即使用<code>tableName.fieldName</code>代替<code>fieldName</code>。</p>
</li>
<li><p>SQL语句应尽可能符合ANSI92标准，避免使用T-SQL或者PL-SQL等特定数据库对SQL语言的扩充特性。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux权限管理小结]]></title>
      <url>/2017/03/26/Linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>关于权限命令，我们最常用的还是利用二进制数字授权哦，也只建议使用这种方法。Linux下一切皆文件。windows中的文件类型是以后缀区分的，但是linux下只有七类文件，我们只需要记住三类：文件，目录文件和软连接文件。</p>
<p>学习Linux权限之前你应该了解一下Linux用户和用户组相关知识，新建一个默认用户不指定用户组的话，就会默认添加一个同名用户组，管理员组wheel和root组是不一样的。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>新建一个文件，这个文件的u即拥有者，g表示和拥有者同用户组的用户，o表示其他用户。该文件默认权限为644，我们经常需要修改为755，甚至有时候需要改为777，数字权限表示法用到了二进制思想。</p>
</li>
<li><p>任何一个文件都可以拥有rwx权限，即读写执行三大权限，普通文件的r权限可以使用命令cat，more，head，tail；w权限可以使用命令vi，echo；x权限就是可执行，一般为shell脚本，默认配色都不一样哦。</p>
</li>
<li><p>对目录有读权限就是可以使用ls这样的命令了；写权限就是可以改变文件目录的结构了，比如mv，cp，touch；对目录的执行全兴就是cd命令，目录是无法执行的，而是进入。对目录只能给予0和7权限。</p>
</li>
<li><p>所以说，对普通文件来说，最高权限是x执行；但是对文件目录来说，最高权限是w写入权限。</p>
</li>
<li><p>对文件即使有写权限，你也无法删除该文件，删除文件的话你必须对该文件的文件目录具有可写权限。</p>
</li>
<li><p>ll命令就是利用alias别名修改了带参数的ls -l而已，ll第一列看到的就是十位数的文件权限，第一位数是文件类型，-是文件，d是文件目录，l是软连接。</p>
</li>
<li><p>我们常用的授权命令是chmod，即改变权限模型。这个命令最常用的参数是 -R 权限递归。给文件增加或者减少权限，我们可以使用:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chmod u+x，g+wr filename</div><div class="line"></div><div class="line">chmod u-x，g-wr filename</div><div class="line"></div><div class="line">chmod u=xr，g=wrx filename</div></pre></td></tr></table></figure>
<ul>
<li>这种写法在线上是不可能出现的，除非你学习权限的时候了解一下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 557 filename</div></pre></td></tr></table></figure>
<ul>
<li>但是这样使用也有些不方便，你也可以对所有用户授予同样权限，例如给所有用户最高权限:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a+wrx filename</div></pre></td></tr></table></figure>
<ul>
<li>修改文件的所有者，chown 用户名 文件或者用户名：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown user1 filename</div></pre></td></tr></table></figure>
<ul>
<li>其实你也可以使用这个命令同时改变文件所属用户和所属用户组，先用户名再用户组，使用点号或者分号分隔：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown user1:wheel filename</div></pre></td></tr></table></figure>
<ul>
<li>修改所属组，chown 用户组 文件或者用户名(直接使用上面的chown也可以实现)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chgrp user1 filename</div></pre></td></tr></table></figure>
<ul>
<li>windows中你添加的所有用户都在users这个用户组中，但是Linux中你添加的用户，系统会默认建立一个同名用户组。</li>
</ul>
<hr>
<ul>
<li><p>普通文件默认权限是644，目录文件默认权限是755(可以设置为777)，这是由umask决定的。默认文件不能为可执行文件，可执行文件必须手动赋予权限哦。</p>
</li>
<li><p>umask默认权限为0022。第一位数是特殊权限，022就是文件默认权限。可是这022到底是怎么算出来的644呢？由于默认文件不能为可执行文件，所以默认权限最大只能为666，和022相减即为644。</p>
</li>
<li><p>umask=0000时候最小，此时普通文件和目录文件默认权限分别为666和777。</p>
</li>
<li><p>严格来说上面的说法是错误的，因为文件不能创建就拥有执行权限。严格来说相减之前需要把数字转换为字母，字母相减得到默认文件的权限，负数无效。这也是逻辑与运算的结果。</p>
</li>
<li><p>普通用户的uid从500开始。root用户的uid为0。</p>
</li>
<li><p>让配置文件永久生效的办法是修改写入默认shell文件，该文件为/etc/profile。</p>
</li>
<li><p>CentOS6后，这十位数后面加了个.号，这是ACL权限的问题。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BootStrap3入门学习(样式篇)]]></title>
      <url>/2017/03/25/BootStrap3%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E6%A0%B7%E5%BC%8F%E7%AF%87/</url>
      <content type="html"><![CDATA[<blockquote>
<p>教程整理自慕课网(原文部分错误在这篇文章得到修改，本文版本Bootstrap3.3.7)。文章有上下两个篇幅，分别是BootStrap3在样式和JS特效果组件的学习和说明。这篇文章是上半部分样式篇章。</p>
</blockquote>
<a id="more"></a>
<h3 id="框架简介"><a href="#框架简介" class="headerlink" title="框架简介"></a>框架简介</h3><ul>
<li>Bootstrap是个前端UI框架，由Twitter两位员工写了这个框架后开源到github上。作为前端UI框架，你还可以使用jquery ui,Bourbon和轻量级的Pure.css。bootstrap每次版本更新变化都比较大，并且版本之间很多语法类名都不兼容，目前已经出了v4版本，但线上主要都在使用v3版本，v2版本早就被放弃维护。</li>
</ul>
<h3 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h3><ul>
<li><p>Bootstrap3的dist文件夹中需要的只有三个可被引用的文件，bootstrap.css,bootstrap.js和theme.css，其他还有对应的压缩版和编译生成的.map文件。</p>
</li>
<li><p>主题文件就是矢量图标库，bootstrap有第三方矢量图标厂商为其免费提供使用，在Bootstrap4中已经没有这个文件，官方建议开发者自行下载引入awesome的矢量图标。</p>
</li>
<li><p>另外在bootstrap3中是使用了重置样式中最出名的normalize.css，bootstrap4却加入了reset.css文件，在normalize.css的基础上加入了自己的见解。</p>
</li>
<li><p>激进的bootstrap4放弃了对IE9以下的支持，其实也就是懒得引入加载那么多用于兼容的JavaScript文件了,即使是Bootstrap3,如果你不引入兼容文件，IE678依然对CSS3的支持很差。</p>
</li>
<li><p>大多数人只是用Bootstrap的样式布局，也有人使用其封装好的JS组件，在那之前你应该引入对应版本的jQuery文件。对于类似360这种双核国产浏览器，应该加入meta强制使用webkit内核渲染。对于IE用户，应该加入meta强制使用最新渲染模式。</p>
</li>
</ul>
<h3 id="关于Bootstrap3的六个标题"><a href="#关于Bootstrap3的六个标题" class="headerlink" title="关于Bootstrap3的六个标题"></a>关于Bootstrap3的六个标题</h3><table>
<thead>
<tr>
<th style="text-align:center">元素</th>
<th style="text-align:center">字体大小</th>
<th style="text-align:center">计算比例</th>
<th style="text-align:center">其他样式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">h1</td>
<td style="text-align:center">36px</td>
<td style="text-align:center">14px*2.60</td>
<td style="text-align:center">margin-top:20px</td>
</tr>
<tr>
<td style="text-align:center">h2</td>
<td style="text-align:center">30px</td>
<td style="text-align:center">14px*2.15</td>
<td style="text-align:center">margin-bottom:10px</td>
</tr>
<tr>
<td style="text-align:center">h3</td>
<td style="text-align:center">24px</td>
<td style="text-align:center">14px*1.70</td>
<td style="text-align:center">.</td>
</tr>
<tr>
<td style="text-align:center">h4</td>
<td style="text-align:center">18px</td>
<td style="text-align:center">14px*1.25</td>
<td style="text-align:center">margin-top:10px</td>
</tr>
<tr>
<td style="text-align:center">h5</td>
<td style="text-align:center">14px</td>
<td style="text-align:center">14px*1.00</td>
<td style="text-align:center">margin-bottom:10px</td>
</tr>
<tr>
<td style="text-align:center">h6</td>
<td style="text-align:center">12px</td>
<td style="text-align:center">14px*0.85</td>
<td style="text-align:center">.</td>
</tr>
</tbody>
</table>
<ul>
<li><p>所有标题的行高都是font-size的1.1倍，且文本颜色和字体都是继承父元素。</p>
</li>
<li><p>在标题标签内部使用&lt;small-标签制作副标题，副标题默认不加粗字体颜色#999，h1-h3中的副标题字体大小为65%，h4-h6中的副标题字体大小为75%。</p>
</li>
</ul>
<h3 id="关于正文段落的p标签"><a href="#关于正文段落的p标签" class="headerlink" title="关于正文段落的p标签"></a>关于正文段落的p标签</h3><ul>
<li><p>由于全局字体大小为14px，段落行高是14*1.4285大概为20px，这个倍数是编译算出来的。</p>
</li>
<li><p>段落默认颜色为#333深灰色。字体为Helvetica Neue优先，对中文不友好可以手动修改。</p>
</li>
<li><p>段落默认距上下有10px的外边距。</p>
</li>
</ul>
<h3 id="强调内容"><a href="#强调内容" class="headerlink" title="强调内容"></a>强调内容</h3><ul>
<li><p>添加.lead类强调内容，其效果是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">margin-bottom: 20px;</div><div class="line">line-height:1.4;</div><div class="line">font-size: 16px;</div><div class="line">font-weight:300px;</div></pre></td></tr></table></figure>
</li>
<li><p>但是在min-width: 768px的情况下它的字体大小为21px;</p>
</li>
<li><p>此外你也可以使用b，strong加粗。使用em，i或者CSS的font-style: italic使字体倾斜。</p>
</li>
</ul>
<h3 id="强调相关的六个类"><a href="#强调相关的六个类" class="headerlink" title="强调相关的六个类"></a>强调相关的六个类</h3><ul>
<li>类似于lead，Bootstrap还有六个强调类名用于表示文本颜色：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">强调类名</th>
<th style="text-align:center">字体颜色</th>
<th style="text-align:center">十六进制</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">text-muted</td>
<td style="text-align:center">浅灰色</td>
<td style="text-align:center">#777</td>
</tr>
<tr>
<td style="text-align:center">text-primary</td>
<td style="text-align:center">蓝色</td>
<td style="text-align:center">#337ab7</td>
</tr>
<tr>
<td style="text-align:center">text-success</td>
<td style="text-align:center">浅绿色</td>
<td style="text-align:center">#3c763d</td>
</tr>
<tr>
<td style="text-align:center">text-info</td>
<td style="text-align:center">浅蓝色</td>
<td style="text-align:center">#31708f</td>
</tr>
<tr>
<td style="text-align:center">text-warning</td>
<td style="text-align:center">黄色</td>
<td style="text-align:center">#8a6d3b</td>
</tr>
<tr>
<td style="text-align:center">text-danger</td>
<td style="text-align:center">褐色</td>
<td style="text-align:center">#a94442</td>
</tr>
</tbody>
</table>
<h3 id="文本对齐风格"><a href="#文本对齐风格" class="headerlink" title="文本对齐风格"></a>文本对齐风格</h3><table>
<thead>
<tr>
<th style="text-align:center">对齐方式</th>
<th style="text-align:center">对齐类名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">左侧对齐</td>
<td style="text-align:center">text-left</td>
</tr>
<tr>
<td style="text-align:center">右侧对齐</td>
<td style="text-align:center">text-right</td>
</tr>
<tr>
<td style="text-align:center">居中对齐</td>
<td style="text-align:center">text-center</td>
</tr>
<tr>
<td style="text-align:center">两端对齐(浏览器不统一)</td>
<td style="text-align:center">text-justify (慎用)</td>
</tr>
</tbody>
</table>
<h3 id="Bootstrap六种常用列表"><a href="#Bootstrap六种常用列表" class="headerlink" title="Bootstrap六种常用列表"></a>Bootstrap六种常用列表</h3><ul>
<li><p>普通列表和有序列表：只是加了margin-bottom: 10px;</p>
</li>
<li><p>去点列表list-unstyled：list-style-none; padding-left: 0;</p>
</li>
<li><p>定义列表：dl,dt,dd稍微有修改。</p>
</li>
<li><p>水平定义列表dl-horizontal：含有媒体查询。</p>
</li>
<li><p>水平内联列表list-inline：list-style-none; padding-left: 0; margin-left: -5px;</p>
</li>
<li><p>并且ul-li：display: inline-block; padding-right: 5px; padding-left: 5px;</p>
</li>
</ul>
<h3 id="三种代码书写和引入的风格"><a href="#三种代码书写和引入的风格" class="headerlink" title="三种代码书写和引入的风格"></a>三种代码书写和引入的风格</h3><ul>
<li><p>code和kbd只是配色不同，pre用于多行代码输入，且计算空格。样式请看源码。</p>
</li>
<li><p>无论哪一种代码风格，碰到标签开始和结束符号都要使用硬编码“&amp;lt”和“&amp;gt”来代替。</p>
</li>
<li><p>添加.pre-scrollable类可以控制最大高度为340px，超出则出现垂直滚动条，宽度的控制使用稍后讲解的col-md-n。</p>
</li>
</ul>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ul>
<li><p>1个基础样式，4个附加样式，1个响应式表格够不够？表格行的背景色可以通过给tr添加六个相应颜色类名修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">active(#f5f5f5)</div><div class="line">success(#dff0d8)</div><div class="line">info(#d9edf7)</div><div class="line">warning(#fcf8e3)</div><div class="line">danger(#f2dede)</div></pre></td></tr></table></figure>
</li>
<li><p>table加上.table-hover，同时tr加上字体颜色，这样也会有额外的伪类样式导致颜色悬浮。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">表格类名</th>
<th style="text-align:center">表格类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.table</td>
<td style="text-align:center">基础表格</td>
</tr>
<tr>
<td style="text-align:center">.table-bordered</td>
<td style="text-align:center">带边框的表格</td>
</tr>
<tr>
<td style="text-align:center">.table-striped</td>
<td style="text-align:center">斑马线表格</td>
</tr>
<tr>
<td style="text-align:center">.table-hover</td>
<td style="text-align:center">鼠标悬停高亮</td>
</tr>
<tr>
<td style="text-align:center">.table-condensed</td>
<td style="text-align:center">紧凑型表格</td>
</tr>
<tr>
<td style="text-align:center">.table-responsive</td>
<td style="text-align:center">响应式表格</td>
</tr>
</tbody>
</table>
<ul>
<li><p>基础表格默认设置了底边距20px，thead底部设置了2px的浅灰色实线，每个单元格顶部设置了1px的浅灰色实线。</p>
</li>
<li><p>带边框的表格只在基础表格的情况下加上了垂直1px的浅灰色边框线。</p>
</li>
<li><p>斑马线表格隔行浅灰色(#f9f9f9)背景，利用的是CSS3的:nth-child实现，IE8及以下无效。</p>
</li>
<li><p>鼠标悬停高亮表格原理是设置了tr:hover伪类。</p>
</li>
<li><p>紧凑型表格的原理是将单元格的内边距由8px调整到5px。</p>
</li>
<li><p>响应式表格据说以768px宽度为界是否出现滚动条，但据我是用来看所有类型的表格都是响应式的。</p>
</li>
</ul>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>-</p>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><ul>
<li><p>Bootstrap3相比v2版本在按钮的CSS3特效上减少了很多，但是兼容做得更好了很多。按钮类可以放在任何标签中，个人建议放在button和a标签中，简单表单提交可以考虑放在type=submit的input中。</p>
</li>
<li><p>基本按钮(.btn)，默认按钮(.btn-default)按钮背景均为#fff，字体为#333，边框颜色为#ccc。和表格同样的道理，使用默认按钮前要先使用基本按钮。</p>
</li>
<li><p>按钮的风格也可以定制，基本还是那几个颜色，分别变成了.btn-primary，.btn-success，.btn-info，.btn-warning，.btn-danger，.btn-link。使用定制按钮前也要先加入基本按钮哦。</p>
</li>
<li><p>按钮的大小也是可以修改的哦，下表是四种尺寸按钮的对比：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">按钮类名</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">属性和值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.btn-lg</td>
<td style="text-align:center">变大</td>
<td style="text-align:center">padding: 10px 16px; font-size: 18px; &lt;br-line-height: 1.33; border-radius: 6px;</td>
</tr>
<tr>
<td style="text-align:center">.btn</td>
<td style="text-align:center">正常</td>
<td style="text-align:center">padding: 6px 12px; font-size: 14px; &lt;br-line-height: 1.43; border-radius: 4px;</td>
</tr>
<tr>
<td style="text-align:center">.btn-sm</td>
<td style="text-align:center">变小</td>
<td style="text-align:center">padding: 5px 10px; font-size: 12px; &lt;br-line-height: 1.5; border-radius: 3px;</td>
</tr>
<tr>
<td style="text-align:center">.btn-xs</td>
<td style="text-align:center">超小</td>
<td style="text-align:center">padding: 1px 5px; font-size: 12px; &lt;br-line-height: 1.5; border-radius: 3px;</td>
</tr>
</tbody>
</table>
<ul>
<li><p>先使用.btn声明这是个按钮，再用块状按钮.btn-block类可以让用户自定义一个按钮的尺寸和样式，这样按钮就会充满整个容器，并且不会有任何padding和margin。</p>
</li>
<li><p>按钮分为活动状态和禁用状态：活动状态有悬浮:hover，点击:active，焦点:focus，在不同按钮配色风格下它们的表现是不同的。</p>
</li>
<li><p>禁用按钮用两种方法，分别是添加类名或者添加元素属性disabled，禁用按钮会降低透明度，不同配色风格下的外观有所不同，多数场合使用可以禁止链接添加元素属性，鼠标经过会提示禁止。</p>
</li>
</ul>
<h3 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h3><ul>
<li><p>按钮组一般配合矢量图标用于定制化分页，或者用来开发类似于word编辑器插件的UI部分，你只需要在一个带.btn-group类名的容器中连续写上多个button按钮即可。</p>
</li>
<li><p>按钮的样式颜色类依然可以使用，按钮容器中加入带图标类的span标签就可以实现矢量图标按钮，类名.btn-group只是将这些按钮联合在一起了并且使用了伪类和头尾按钮CSS3的圆角。<br>如果你想制作编辑器插件那种样式</p>
</li>
</ul>
<h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><ul>
<li><p>Bootstrap3中图片的样式主要有<br>响应式图片(.img-responsive)，圆角图片(.img-rounded)，原形图片(.img-circle)，缩略图片(.img-thumbnail)。</p>
</li>
<li><p>如果你想控制图片的大小，建议在img标签的父容器上规定尺寸，严禁直接通过CSS样式直接修改img图片的大小。圆角圆形使用的CSS3效果在IE8及以下是不起作用的。</p>
</li>
<li><p><code>缩略图</code>还有专门的组件类.thumbnail，其实就是给图片加了个框，一般配合网格系统和超链接标签使用，包括各种js图片弹出框组件也可以这样实现。</p>
</li>
</ul>
<h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><ul>
<li><p>制作好矢量图标后，配合CSS3的font-face为其命名就可以实现icon类的效果。Bootstrap3可以免费使用glyphicons.com这个商业公司提供的几百个矢量图标，当然你也可以下载引入更受欢迎的Font Awesome矢量图标。</p>
</li>
<li><p>使用glyphicon的图标前需要引入theme.css文件，然后添加类名glyphicon 和对应的前缀为glyphicon-这种类名即可。</p>
</li>
</ul>
<h3 id="网格系统-栅格布局"><a href="#网格系统-栅格布局" class="headerlink" title="网格系统/栅格布局"></a>网格系统/栅格布局</h3><ul>
<li><p>熟练使用栅格布局是入门Bootstrap的标志，当你需要使用它时，必须先定义一个容器，添加带padding且用于居中类名.container，布满宽度的为.container-fluid。然后定义数据行.row，在数据行容器的基础上去定义数据列.col，数据列容器根据终端的分辨率有.col-lg-，.col-md-，.col-sm-，.col-xs-，等开头的，结尾加上一个1-12的数字，你可以填写多个.col数据列，但是它们想加不允许超过12，否则会换行重新计算。</p>
</li>
<li><p>栅格布局针对的终端有四种，分别以分768px，992px，1220px的宽度作为分水岭，其对应的容器宽度和每列宽度的数字请自行百度，后者通过便宜计算出来，并不是准确的60px，80px。</p>
</li>
<li><p>栅格布局需要一个主要的容器，容器中的row和col都可以看作是一层容器，不同列之间可以有列偏移，列排序，列嵌套等等。</p>
</li>
</ul>
<h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><ul>
<li><p>使用下拉列表必须先引入对应版本的jquery.js和bootstrap.js，下拉菜单的类名叫做dropdowm掉下来，几乎都要配合按钮使用。将按钮和列表同时放入一个声明了.dropdown类的容器中。</p>
</li>
<li><p>你的button除了按钮样式类，还必须声明 data-toggle=”dropdown” ，其内容必须和外层容器的类名一致，建议不要修改。</p>
</li>
<li><p>ul必须声明.dropdown-menu类，该类样式有display:none，原理就是DOM操作给其添加或者移除display:block的.open类。如果你想让按钮出现指向箭头，请在button容器内添加span元素，并且加入.caret类。</p>
</li>
<li><p>下拉列表的分割线可以添加一个空的li并追加.divider类，但我不是很建议这种做法。</p>
</li>
<li><p>对每一组的下拉列表还可以给一个头部类别总称，也叫<code>菜单标题</code>：菜单标题中不需要超链接a标签，同时其声明类为.dropdown-header。</p>
</li>
<li><p>下拉菜单的对齐方式默认为左对齐，你可以通过给ul追加.dropdown-menu-right或者pull-right修改，两者完全是一样的，但是在这之前你必须给父容器一个宽度，建议使用botstrap自带的栅格布局。</p>
</li>
<li><p>下拉菜单项的状态默认开启了悬浮和焦点状态的，你也可通过增加.active和.disabled修改为活跃和禁用状态。禁用状态只有鼠标悬浮会出现禁止标志。</p>
</li>
<li><p>考虑SEO的话，这些地方都应该添加id和对应的role，初学不必理会，或者复制官方组件代码进行修改。</p>
</li>
</ul>
<h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><ul>
<li><p>使用.nav声明导航，还要追加具体导航的样式类，或者说主题类，导航声明一般都是放在ul标签中，并且li中添加超链接标签a。</p>
</li>
<li><p><code>标签形导航</code>：nav-tabs;</p>
</li>
<li><p><code>胶囊形导航</code>：nav-pills;</p>
</li>
<li><p><code>垂直列表导航</code>：nav-stacked;</p>
</li>
<li><p><code>自适应导航</code>：nav-justified;多数时候和tabs，pills配合使用。</p>
</li>
<li><p><code>二级导航</code>：将li当作父容器，给它dropdown类，它的子容器a和下拉箭头caret不变，子容器ul添加dropdown-menu类即可。</p>
</li>
<li><p><code>面包屑导航</code>：这就是无极限分类的前端UI部分了，面包屑导航使用.breadcrumbs组件类名。官网建议使用ol有序列表，为了表示当前位置，最后一个li应该添加.active状态类。它的实现方式用了伪类:before，IE低用户不支持。</p>
</li>
</ul>
<h3 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h3><ul>
<li><p>基本导航条只是在ul导航的基础上添加了一个父容器，加了两个类名：navbar navbar-default，前者是声明组件，后者声明样式主题。其样式可以修改为反色主题：nav-inverse；</p>
</li>
<li><p>导航条可以添加稍显不同的标题(当然你也可以修改为LOGO图和矢量图标，但是请自行注意默认内外边距)，添加标题请在父容器中添加带.navbar-header类的div，并且div容器中添加带.navbar-brand类的a容器标签，a标签中书写标题内容。</p>
</li>
<li><p>二级菜单的书写和导航是一样的，在 li 中添加.dropdown类，然后是必备的a标签(a必须设置的：data-toggle=”dropdown” class=”dropdown-toggle”)和span.caret，以及带dropdown-menu类的ul标签。</p>
</li>
<li><p>li的激活和禁用状态依然可以自行设置。</p>
</li>
<li><p>导航栏中的表单搜索是比较常用的，你只需要定义一个form表单容器，包含div和button按钮即可，把input输入框放入div容器中。按钮样式随意定制哦，美化输入框input的办法是为它添加.form-control类，div容器必须添加.form-group类。至于form的class，你需要添加.navbar-form，根据需求你还可以添加navbar-left/right让它浮动定位。</p>
</li>
<li><p><code>导航条按钮</code>：navbar-btn；<code>导航条文本</code>：navbar-text；<code>导航条链接</code>：navbar-link；这三个不是很建议使用，貌似用多了样式的间距会被打乱。</p>
</li>
<li><p>如果你想让导航条固定在顶部或者底部，只需要添加.navbar-fixed-top或者.navbar-fixed-bottom。<br>实际上最常用的导航条是上面的综合一下再加上响应式，<code>响应式导航条</code>在宽度小的时候会隐藏起来，非常利于移动端使用。这里重要书写又有点麻烦，我直接上图吧：<br><img src="http://upload-images.jianshu.io/upload_images/3995745-d1a91d98b71b79e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="响应式导航条代码"></p>
</li>
<li><p>另外分页导航也是一个重要且常用的组件，分页导航其实只是一个ul无序列表。组件类名为.pagination，分页导航包括带页码的和带翻页的两种，添加.active表示当前页码。</p>
</li>
<li><p>我们一般的分页都是使用div-a或者div-span这种结构，但是bootstrap3使用了ul-li-a这种结构哦。</p>
</li>
<li><p><code>页码分页导航</code>：pagination-lg/sm即可，默认大小可以省略。</p>
</li>
<li><p><code>翻页分页导航</code>：上一页下一页的类名分别为：.previous 和 .next。左右方向箭头硬编码分别为：« 和 »。</p>
</li>
</ul>
<h3 id="高亮标签和徽章"><a href="#高亮标签和徽章" class="headerlink" title="高亮标签和徽章"></a>高亮标签和徽章</h3><ul>
<li><p>标签和徽章的用法和意义几乎是一样的。标签有六中颜色风格，声明为.label，六种类名分别为label-default/primary/success/info/warning/danger。</p>
</li>
<li><p>网上一些显示火啊热啊的就是这样写的，加了额外的定位。</p>
</li>
<li><p>徽章也叫勋章，主要用途还是提示未读信息这种ajax传输的小量验证和判断数据，在你想要添加的地方使用.badge类声明就会默认添加，常在ul导航栏中见到徽章，在特定颜色风格的li中，其徽章.badge样式也会有所改变。</p>
</li>
<li><p>按钮徽章和徽章浮动(.pull-right)也是经常见到的使用场景。</p>
</li>
<li><p>标签和徽章在没有数据内容时候都是隐藏的，这是用CSS的:empty伪类元素将之设置为display:none。</p>
</li>
</ul>
<h3 id="警示框"><a href="#警示框" class="headerlink" title="警示框"></a>警示框</h3><ul>
<li><p>个人认为警示框非常实用，典型如laravel-china，ruby-china和简书的发表文章，评论和回复消息，这种页面小内容改变一般会使用ajax交互方式，js和后端语言联通后随时判断后端接口返回的json数组中status的值，如果返回值为0则让js在指定区域显示警示框和返回错误提示msg。</p>
</li>
<li><p>同样的，使用.alert声明警示框(为了利于SEO优化，建议声明组件类的同时添加role名)，需要其他颜色的警示框请追加使用alert-success，alert-info，alert-warning，alert-danger。</p>
</li>
<li><p><code>可关闭的警示框</code>通过给容器添加alert-dismissable类，并且在容器内添加这样一行按钮代码即可:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button class=&quot;close&quot; type=&quot;button&quot; data-dismiss=&quot;alert&quot;&gt;×&lt;/button&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>带超链接的警示框</code>只是在容器内部使用a标签而已，但是不同颜色类型的警示框，其超链接样式也有些美化和修改。为了突出警示框内容时，我们也常常在容器中使用strong标签。</p>
</li>
</ul>
<h3 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h3><ul>
<li>进度条的声明类名为.progress，该声明必须放在具有一定宽度的父容器中，并且建议具有自己的背景颜色。子容器使用.progress-bar这个类名，同时设置子容器的width百分比值即可，但这只是并不常用的默认进度条样式(深蓝色)。</li>
<li><p><code>彩色进度条</code>只需要在子容器中添加代表颜色的几个进度条类名即可，如：progress-bar-success，progress-bar-info，progress-bar-warning，progress-bar-danger。</p>
</li>
<li><p><code>静态条纹进度条</code>就是在上面的基础上给父容器添加了progress-striped类。</p>
</li>
<li><p><code>动态条纹进度条</code>在静态的基础上给父容器添加了.active类。实现方式利用了CSS3的animation，@keyframes创建动画效果，再利用CSS3线性渐变制作。</p>
</li>
<li><p>实现简单的<code>多种颜色的进度条层叠</code>，你只需要在父容器内部放置多个子容器，并为它们设置progress-bar 和 progress-bar-color即可。多种颜色层叠也是可以使用条纹和动态条纹的，只需要给子容器添加progress-bar-striped和active类即可。</p>
</li>
<li><p><code>带Label的进度条</code>是最常用的，其实你只需要在子容器中书写正常的HTML内容即可实现，0%的进度条可能存在颜色不方便区分的问题。Bootstrap3考虑到语义化和SEO优化，建议添加使用role=”progressbar” aria-valuenow=”20” aria-valuemin=”0” aria-valuemax=”100”。</p>
</li>
</ul>
<h3 id="媒体对象"><a href="#媒体对象" class="headerlink" title="媒体对象"></a>媒体对象</h3><ul>
<li><p>什么是媒体对象呢？移动APP上文章垂直布局在bootstrap3中就被称为媒体对象，一般是左边一张图，右边是内容的说明。</p>
</li>
<li><p>默认媒体对象在声明媒体对象容器(.media)后添加媒体对象的对象(.media-object)，也就是你常见的左侧图片。媒体对象的主体(.media-body)，就是右侧内容部分。主体中可以存在媒体对象的标题(.media-heading)。</p>
</li>
<li><p>除此之外，Bootstrap可以使用.pull-left和.pull-right控制媒体对象的浮动方式。通常情况你是这样操作的：</p>
<blockquote>
<p>父容器添加.media类，内部分为带pull-left的a标签(内部有img图像)和带media-body的另一容器，.media-body容器中可以有一般为标题的.media-heading和尾部的footer。</p>
</blockquote>
</li>
</ul>
<h3 id="媒体对象嵌套"><a href="#媒体对象嵌套" class="headerlink" title="媒体对象嵌套"></a>媒体对象嵌套</h3><ul>
<li><p>媒体对象嵌套是评论系统必备的组件，一般是左侧用户头像等信息，右侧为用户评论的内容，这就是Bootstrap3中的媒体对象嵌套，只需将新的 .media容器放入.media-body中即可。</p>
</li>
<li><p>这个组件一般要配合无极限分类使用，但是评论系统使用无极限分类会导致数据结构层级太深，而且样式缩进对移动端用户不友好，建议后端使用无极限分类api，前端样式建议最多遍历到第三层。</p>
</li>
<li><p>媒体对象列表：对于前端样式不缩进，或者可以隐藏缩进只显示第一层评论的情况，Bootstrap3提供了可以给ul加上.media-list，给li加上.media的做法。一般情况下你的操作应该是这样的：给ul添加.media-list，多个li标签均添加.media类，li标签中包含左侧a容器(pull-left)和右侧div容器(media-body)，<br>左侧容器中包含一张img图片，右侧容器中可以包含heading，footer等，分别可以放在各种容器标签中。</p>
</li>
</ul>
<h3 id="列表组"><a href="#列表组" class="headerlink" title="列表组"></a>列表组</h3><ul>
<li><p>基础的列表组就是给 ul 一个声明类 .list-group，再给所有的 li 一个 .list-group-item。<br>带徽章的列表组就在 li 中嵌套一个类名为 .badge的span标签，这样徽章就会出现在列表项的右侧，你也可以通过自定义样式文件增加 .badge 并增加color和background-color修改徽章的前景色和背景色。</p>
</li>
<li><p>带超链接的列表组就是 li 容器中加超链接 a 标签。</p>
</li>
<li><p>自定义列表组就是在 li 容器中其他标签上加入list-group-item-heading/text类，两者的区别是heading外边距距顶部0px,距底部5px; text外边距距底部0px，行高1.3倍。看起来就是text显得更加紧凑了。</p>
</li>
<li><p>列表组的状态可以设置为活动(.active)和禁用(.disabled)，分别给了li蓝色背景和灰色背景，并且禁用状态出现禁止标志。</p>
</li>
<li><p>多彩列表组只是修改了 li 的前景色和背景色。只要给 li 加入 list-group-item-success/info/warning/danger这些颜色类名就OK了。</p>
</li>
</ul>
<h3 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h3><ul>
<li>无论在PC还是移动端，面板配合栅格布局的使用率还是很高的，尤其是文章列表和行列商品展示，但是在v4版本有了新的替代品组件。 .spanel是面板声明类，具体包括基础面板(.panel-default)，带头尾的面板(-heading，-body，-footer)，面板中嵌套表格，面板中嵌套列表组(.list-group)，彩色风格的面板：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">重点蓝-primary</div><div class="line">信息蓝-info</div><div class="line">成功绿-success</div><div class="line">警告黄-warning</div><div class="line">危险红-danger。</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 基础学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blade模板引擎入门问答学习]]></title>
      <url>/2017/03/22/Blade%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%85%A5%E9%97%A8%E9%97%AE%E7%AD%94%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>blade是laravel框架默认使用的模板引擎，这篇文章讲解blade模板的写法和完全指南。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>怎么在模板引擎输出变量？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">首先路由转发到一个控制器的一个方法，然后返回视图，同时使用链式操作with()方法，第一个字符串参数为模板变量，第二个字符串参数为实际的数据，然后模板文件输出即可。</div><div class="line"></div><div class="line">当然，你也可以在控制器方法内部先声明或者得到一个$data数组，这也是开发常用的做法，只是获取$data的操作由model去完成并返回。</div></pre></td></tr></table></figure>
</li>
<li><p>参数分别有数组和字符串，怎么办？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在view()方法中使用compact()方法把不同类型的数据传递到模板，然后在模板文件中分别输出数组和字符串(compact方法的变量参数不需要$符号)，</div><div class="line"></div><div class="line">模板中输出可以使用嵌套php，也可以使用双大括号。</div></pre></td></tr></table></figure>
</li>
<li><p>双大括号和Angular的语法冲突怎么办？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">要么修改Angular定界符，要么Blade输出前加@符号。</div></pre></td></tr></table></figure>
</li>
<li><p>查询文章，文章为空时候显示null？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">模板引擎设置默认值&#123;&#123; $name or &apos;默认值&apos; &#125;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="Blade的六大流程控制语句"><a href="#Blade的六大流程控制语句" class="headerlink" title="Blade的六大流程控制语句"></a>Blade的六大流程控制语句</h3><ul>
<li><p>模板引擎的流程控制 if 怎么写？？？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">     @if($persion[&apos;score&apos;]&lt;0 ||$persion[&apos;score&apos;]&gt;100)</div><div class="line">       不合法</div><div class="line">     @elseif($persion[&apos;score&apos;]&lt;60)</div><div class="line">       不及格</div><div class="line">     @else</div><div class="line">       及格</div><div class="line">     @endif</div><div class="line"></div><div class="line">如果传递的参数为字符串，模板引擎会转换为数字进行比较。</div></pre></td></tr></table></figure>
</li>
<li><p>模板引擎的流程控制 unless 怎么写？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     @unless($persion[&apos;score&apos;]&gt;=60)</div><div class="line">       不及格</div><div class="line">     @endunless</div><div class="line"></div><div class="line">除非大于60分，否则都输出不及格，相当于 if !。</div></pre></td></tr></table></figure>
</li>
<li><p>模板引擎的流程控制 for 怎么写？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    @for($i=0; $i&lt;=$persion[&apos;score&apos;]; $i++ )</div><div class="line">      &#123;&#123;$i&#125;&#125;&lt;br /&gt;</div><div class="line">    @endfor</div><div class="line"></div><div class="line">for是可以嵌套使用的哦。</div></pre></td></tr></table></figure>
</li>
<li><p>模板引擎的流程控制 foreach 怎么写？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@foreach($persion[&apos;article&apos;] as $v)</div><div class="line">  &#123;&#123; $v &#125;&#125;</div><div class="line">@endforeach</div></pre></td></tr></table></figure>
</li>
<li><p>模板引擎的流程控制 forelse 怎么写？？？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    @forelse($persion[&apos;news&apos;] as $v)</div><div class="line">      &#123;&#123; $v &#125;&#125;</div><div class="line">    @empty</div><div class="line">      没有数据</div><div class="line">    @endforelse</div><div class="line"></div><div class="line">for else是对foreach的补充，要求填写没有数据时候的默认显示文字，一般可用来替代foreach。</div></pre></td></tr></table></figure>
</li>
<li><p>模板引擎的流程控制 while 怎么写？？？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    @while(3&gt;1)</div><div class="line">      &#123;&#123; $persion[&apos;score&apos;] &#125;&#125;</div><div class="line">    @endwhile</div><div class="line"></div><div class="line">你可以试试。</div></pre></td></tr></table></figure>
</li>
<li><p>来个多种嵌套例子吧？？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@forelse($persion[&apos;article&apos;] as $k =&gt; $v)</div><div class="line">  @if($k&gt;2)</div><div class="line">    &#123;&#123; $k &#125;&#125;-&gt;&#123;&#123; $v &#125;&#125;&lt;br /&gt;</div><div class="line">  @endif</div><div class="line">@empty</div><div class="line">  没有数据</div><div class="line">@endforelse</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>公共模板替换</p>
</li>
<li><p>怎么添加公共头部尾部呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@include(common/header)</div><div class="line">@include(common/footer)</div></pre></td></tr></table></figure>
</li>
<li><p>怎么添加略有不同的公共头部尾部呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    @include(&apos;common/header&apos;, [&apos;page&apos; =&gt; &apos;首页&apos;])</div><div class="line">    @include(&apos;common/header&apos;, [&apos;page&apos; =&gt; &apos;文章页&apos;])</div><div class="line">    &#123;&#123; $page &#125;&#125;</div><div class="line"></div><div class="line">那当然是要传递参数啦！公共页面使用双大括号接受并输出参数字符串。</div></pre></td></tr></table></figure>
</li>
<li><p>layouts布局具体怎么实现流程是什么样的呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这个还是让我先想想怎么说吧。。。</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel Artisan命令工具学习和实用]]></title>
      <url>/2017/03/17/Laravel-Artisan%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%AE%9E%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文以laravel5.4为例,建议刚开始学习Laravel框架的朋友先不使用Artisan进行项目开发。而是手动新建文件书写重复代码了解加载顺序，熟悉之后使用Artisan瞬间提高十倍工作效率。</p>
</blockquote>
<a id="more"></a>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li><p>Artisan 是 Laravel 内置的命令行接口。它提供了一些有用的命令协助您开发，它是由强大的 Symfony Console 组件所驱动。利用它，我们可以快速的新建Controller、Model等类。</p>
</li>
<li><p>查看所有artisan命令</p>
<blockquote>
<p>php artisan (list)</p>
</blockquote>
</li>
<li><p>查看命令帮助信息</p>
<blockquote>
<p>php artisan help migrate</p>
</blockquote>
</li>
<li><p>创建控制器</p>
<blockquote>
<p>php artisan make:controller UserController</p>
</blockquote>
</li>
<li><p>创建Eloquent 模型类：</p>
<blockquote>
<p>php artisan make:model User</p>
</blockquote>
</li>
</ul>
<h3 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h3><table>
<thead>
<tr>
<th>命令</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>php artisan list</td>
<td style="text-align:center">查看所有可以使用的 Artisan 命令</td>
</tr>
<tr>
<td>php artisan help migrate</td>
<td style="text-align:center">浏览命令的帮助</td>
</tr>
<tr>
<td>php artisan –version</td>
<td style="text-align:center">显示目前的 Laravel 版本</td>
</tr>
<tr>
<td>php artisan down</td>
<td style="text-align:center">进入维护模式</td>
</tr>
<tr>
<td>php artisan up</td>
<td style="text-align:center">退出维护模式</td>
</tr>
<tr>
<td>php artisan make:provider name</td>
<td style="text-align:center">创建一个新的服务提供者类</td>
</tr>
<tr>
<td>php artisan make:request name</td>
<td style="text-align:center">创建一个新的表单请求类</td>
</tr>
<tr>
<td>php artisan migrate</td>
<td style="text-align:center">进行数据库迁移（名称：migration）</td>
</tr>
<tr>
<td>php artisan make:migration create_article_table</td>
<td style="text-align:center">创建article表结构</td>
</tr>
</tbody>
</table>
<ul>
<li><p>生成模型文件和迁移文件：</p>
<blockquote>
<p>php artisan make:model Article<br>php artisan make:migration create_articles_table</p>
</blockquote>
</li>
<li><p>建议创建migration迁移文件时追加–create=articles参数，这样会使新的迁移文件添加默认格式。</p>
</li>
<li><p>在database\migrations目录生成了2016_09_10_020228_create_article_table.php。该文件只有迁移前编写的up<br>方法和删除或者覆盖数据表使用回滚时的down方法，我们只需修改up方法：</p>
</li>
<li><p>Laravel中Model对应的表名是其英文单词的复数形式(内部使用了英文词语的单复数映射)，例如UserModel在数据库中的体现就是users表。接下来让我们把 PHP 代码变成真实的 MySQL 中的数据表，运行命令：</p>
<blockquote>
<p>php artisan migrate</p>
</blockquote>
</li>
<li><p>执行成功后，articles 表已经出现在数据库里了。articles里字段名可以改为你想要的名字，建议统一命名。</p>
</li>
<li><p>完成后数据库里还会多了个migrations表，用来记录数据库迁移信息，并且database/migrations/目录下记录着采用RoR思想诞生的迁移文件，这些文件不允许删除，否则不利于交付和迭代。</p>
</li>
</ul>
<h3 id="Seeder使用"><a href="#Seeder使用" class="headerlink" title="Seeder使用"></a>Seeder使用</h3><ul>
<li><p>database/seeds/下则对应相应的数据库改动信息，包含数据。</p>
</li>
<li><p>Seeder 解决的是我们在开发 web 应用的时候，需要手动向数据库中填入假数据的繁琐低效问题。运行以下命令创建 Seeder 文件：</p>
<blockquote>
<p>php artisan make:seeder ArticleSeeder</p>
</blockquote>
</li>
<li><p>我们会发现database/seeds/里多了一个文件 ArticleSeeder.php，修改此文件中的 run 函数为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public function run() &#123;</div><div class="line">    DB::table(&apos;articles&apos;)-&gt;delete();</div><div class="line">    for ($i=0; $i &lt; 10; $i++) &#123;</div><div class="line">        \App\Article::create([ &apos;title&apos; =&gt; &apos;Title &apos;.$i, &apos;body&apos; =&gt; &apos;Body &apos;</div><div class="line">        &apos;user_id&apos; =&gt; 1, ]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上面代码中的 \App\Article 为<code>命名空间绝对引用</code>。</p>
</li>
<li><p>接下来我们把ArticleSeeder注册到系统内。修改database/seeds/DatabaseSeeder.php<br>中的 run 函数为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public function run() &#123;</div><div class="line">    $this-&gt;call(ArticleSeeder::class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>由于database目录没有像app 目录那样被composer注册为psr-4自动加载，采用的是psr-0 classmap方式，所以我们还需要运行以下命令把ArticleSeeder.php加入自动加载系统，避免找不到类的错误：</p>
<blockquote>
<p>composer dump-autoload</p>
</blockquote>
</li>
<li><p>然后执行 seed：</p>
<blockquote>
<p>php artisan db:seedSeeded: ArticleSeeder</p>
</blockquote>
</li>
<li><p>这时候刷新一下数据库中的 articles 表，会发现已经被插入了 10 行假数据。</p>
</li>
</ul>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul>
<li><p>1、Laravel 5.1 LTS 速查表<br><a href="https://cs.phphub.org/#artisan" target="_blank" rel="external">https://cs.phphub.org/#artisan</a></p>
</li>
<li><p>2、Laravel 5.0 中文文档：Artisan 命令行接口<br><a href="http://laravel-china.org/docs/5.0/artisan" target="_blank" rel="external">http://laravel-china.org/docs/5.0/artisan</a></p>
</li>
<li><p>3、2016 版 Laravel 系列入门教程（一）<br><a href="https://github.com/johnlui/Learn-Laravel-5/issues/4" target="_blank" rel="external">https://github.com/johnlui/Learn-Laravel-5/issues/4</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel微型项目开发流程]]></title>
      <url>/2017/03/17/Laravel%E5%BE%AE%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这只是我刚接触laravel不久自己的一些看法，不用完全当真，只是我的个人学习，内容将会在后续有改动。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>第一步：建立Route（根据不同Model的CURD操作对应书写方法名和路由名称）</p>
</li>
<li><p>第二步：使用php artisan在database/迁移目录下快速生成数据表的Migration，根据你的业务需求或者DBA提供的数据库模型书写up方法。</p>
</li>
<li><p>第三步：使用migrate迁移执行SQL语句，同时测试Rollback能否顺利执行。–pretend参数可以检查语法错误。</p>
</li>
<li><p>第四步：使用php artisan make:model快速生成一个对应数据表的Model，并书写对应于Route的方法，Route中不直接渲染视图，而是返回对应模型的方法，浏览器访问测试。</p>
</li>
<li><p>第五步:书写具体的业务逻辑代码，通常使用Request:get()获取数据作基本判断，确定接收的数据没问题后生成对应Model类的变量$DB实例，再进行数据库验证对比，判断是否存在接受到的id，判断用户权限等等。如果是DML操作，接下来需要使用$this-&gt;字段名 = RG()设置，$DB实例-&gt;save()。</p>
</li>
<li><p>第六步:浏览器访问测试。</p>
</li>
</ul>
<blockquote>
<p>能看到这里我开始要装逼了！深刻感受到码农就是个劳碌命！公司上班就是做这事，在优秀的框架上非常有天理的干活！一个简单用户类，上面的步骤大概要重复操作10次左右，复杂点的还要考虑多表联合操作，数据合法性判断，单词老是打错就算了，还要各种Debug！</p>
<p>真的，只要你看懂了接口开发的文档，在小公司你基本都是在思考这个地方可以为空吗？这个数据用什么类型表示？这个oid和那个pid是外键约束关系？如果大公司数据库这一块有DBA在搞，那你就是一直在框架基础上重复上面的步骤。</p>
<p>好了，这个小项目后端开发部分接近尾声，预计周末要用Angular做丑陋的界面了。话说JavaScript函数都记不到十个的我真的能学前端吗？？？</p>
</blockquote>
<ul>
<li>晚安帅哥美女们。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一起来复习一下HTML和CSS基础吧]]></title>
      <url>/2017/03/16/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%A4%8D%E4%B9%A0%E4%B8%80%E4%B8%8BHTML%E5%92%8CCSS%E5%9F%BA%E7%A1%80%E5%90%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这篇文章是我根据学校图书馆一本讲HTML+CSS的基础书籍，花费半天时间看完并总结的，主要是针对我个人理解，写的可能有点乱让别看的有点郁闷了。这里的基础知识涉及到的也不多，都是w3c文档写的部分，建议到中国区w3cschool查看。</p>
</blockquote>
<a id="more"></a>
<h3 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h3><ul>
<li><p>meta可以用于跳转网页</p>
</li>
<li><p>能用css实现的，就不要用图片实现！</p>
</li>
<li><p>mete base属性已经几乎不用了</p>
</li>
<li><p>粗体尽量用语义化strong,<code>粗体最好的选择是用CSS font-weight</code></p>
</li>
<li><p>斜体i,em,cite，尽量用em,<code>斜体最好的选择是CSS font-style</code></p>
</li>
<li><p>指数上标用sup,下标sub</p>
</li>
<li><p>删除线s，下划线u,<code>CSS的text-decoration</code></p>
</li>
<li><p>版权声明small</p>
</li>
<li><p>特殊符号表: 空格 <code>CSS缩进text-indent</code></p>
</li>
<li><p>inline元素里面放block元素？</p>
</li>
<li><p>有序列表，无序列表，定义列表</p>
</li>
<li><p>type=1,a,A,i,I <code>CSS的list-style-type</code></p>
</li>
<li><p>type=disc,circle,square</p>
</li>
<li><p>表格标题caption,</p>
</li>
<li><p>表头th，行头tr,单元格td对应语义化: thead,tbody,tfoot</p>
</li>
<li><p>合并行rowspan, 合并列colspan</p>
</li>
<li><p>图片src,alt,title给搜索引擎和用户看</p>
</li>
<li><p>任何名字不要用中文</p>
</li>
<li><p>位图(点阵图)和矢量图(向量图)8/16/24/32位图</p>
</li>
<li><p>超链接的target:_self, _blank, _top, _parent(HTML框架)</p>
</li>
<li><p>内部链接、外部链接和锚点链接</p>
</li>
<li><p>常用表单元素:</p>
<ul>
<li>input</li>
<li>textarea</li>
<li>select,option</li>
</ul>
</li>
<li><p>form标签属性:</p>
<ul>
<li>name</li>
<li>action</li>
<li>method</li>
<li>enctype</li>
<li>target</li>
</ul>
</li>
<li><p>表单对象的属性:</p>
<ul>
<li>value</li>
<li>size</li>
<li>maxlength</li>
</ul>
</li>
<li><p>复选框checkbox必须配合label和其for属性使用</p>
</li>
<li><p>表单按钮button, submit, reset</p>
</li>
<li><p>图片域: image属性</p>
</li>
<li><p>隐藏域: hidden属性</p>
</li>
<li><p>文件域: file属性，要声明编码方式enctype=”multi/form-data”</p>
</li>
<li><p>多行文本框textarea: rows clos</p>
</li>
<li><p>下拉列表select+option属性:</p>
<ul>
<li>multiple(Ctrl+鼠标左键选择多个)</li>
<li>size(显示的行数，其他出现滚动条)</li>
</ul>
</li>
<li><p>在线音频视频用embed src</p>
</li>
<li><p>frameset框架集标签被HTML5舍弃，用浮动框架iframe和scrolling属性: auto(默认左对齐),yes,no(滚动条)</p>
</li>
</ul>
<h3 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h3><ul>
<li><p>三种引入样式的办法: 外部样式表，内部样式表，内联样式表</p>
</li>
<li><p>注意: link在加载CSS后加载HTML，@import却先加载HTML再加载CSS</p>
</li>
<li><p>id选择器也可以写成name，但是id是HTML的标准，name是XHTML的标准，尽量不用name。</p>
</li>
<li><p>子元素选择器，相邻选择器，群组选择器(#a,#b)</p>
</li>
<li><p>关于字体(类型，大小，粗细，斜体，颜色)</p>
</li>
<li><p>字体单位(关键字): xx-small, x-small, small, medium, large, x-large, xx-large</p>
</li>
<li><p>字体粗细(100-900): normal, lighter, bold, nolder</p>
</li>
<li><p>字体斜体(font-style): normal, italic, oblique(没有倾斜属性的特殊字体)</p>
</li>
<li><p>关于文本：用text-decoration取代s和u标签(空，下划线，删除线，顶划线)</p>
</li>
<li><p>用text-transform转换大小写(none, uppercase, lowercase, capitalize)</p>
</li>
<li><p>font-variant小型大写字母(normal, small-caps)</p>
</li>
<li><p>text-indent段落首行缩进</p>
</li>
<li><p>p段落字体14px，则text-indent: 28px</p>
</li>
<li><p>text-align文本和img水平对齐(left,center,right)</p>
</li>
<li><p>line-height行高</p>
</li>
<li><p>letter-spacing字距</p>
</li>
<li><p>word-spacing词距</p>
</li>
<li><p>边框样式（border-width, border-color, border-style）<br>none, hidden, solid, dashed, dotted, double</p>
</li>
<li><p>3D: inset内, outset外, ridge脊, groove槽</p>
</li>
<li><p>简洁写法:border: 1px red solid;</p>
</li>
<li><p>局部边框样式:border-bottom</p>
</li>
<li><p>背景样式</p>
</li>
<li><p>web2.0都在CSS中使用background</p>
</li>
<li><p>background-color:背景颜色</p>
</li>
<li><p>image:url()背景图像</p>
</li>
<li><p>repeat:是否横纵平铺(no-repeat, repeat, repeat-x, repeat-y)</p>
</li>
<li><p>position:图像显示位置(用法margin)top button left right</p>
</li>
<li><p>attachment:是否随内容滚动(响应式)(默认scroll，可选fixed)</p>
</li>
<li><p>超链接伪类(必须按顺序定义)</p>
<ul>
<li>a:link,未访问时</li>
<li>a:visited,访问后</li>
<li>a:hover,鼠标经过</li>
<li>a:actived，单击激活时</li>
<li>:hover伪类可以定义于每个元素！</li>
</ul>
</li>
<li><p>浏览器鼠标样式cursor: pointer,default,wait,help等等。</p>
</li>
<li><p>自定义鼠标样式cursor:url(“ “),属性;</p>
</li>
<li><p>图片水平对齐用text-align</p>
</li>
<li><p>垂直对齐用vertical-align(top,middle,baseline,bottom)</p>
</li>
<li><p>文字环绕效果float(图文混排)</p>
</li>
<li><p>列表样式:统一使用list-style-type</p>
</li>
<li><p>无序ul列表:(decimal,lower-roman,upper-romam,lower-alpha,upper-alpha)</p>
</li>
<li><p>有序ol列表:(disc,circle,square,none)</p>
</li>
<li><p>自定义列表项符号:list-style-image: url();</p>
</li>
<li><p>表格样式,边框合并和边框间距border-collapse(默认sqparate,collapse)</p>
</li>
<li><p>border-spacing:(一或两个像素参数)</p>
</li>
<li><p>标题位置caption-side(top,bottom)</p>
</li>
<li><p>CSS盒子模型(块元素和行内元素)</p>
</li>
<li><p>content-padding-margin-border四大属性</p>
</li>
<li><p>content区三属性:width,height,overflow</p>
</li>
<li><p>宽高属于内容区，不包括”补白”，溢出属性用于处理超出内容区的范围</p>
</li>
<li><p>负margin重叠技术,行内变块级display:block;</p>
</li>
<li><p>浮动布局和定位布局</p>
</li>
<li><p>CSS: 正常文档流和脱离文档流relative，absolute，fixed，默认是静态定位static</p>
</li>
<li><p>相对定位元素始终会获得相应的空间</p>
</li>
<li><p>绝对定位和固定定位会完全脱离文档流</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 基础学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[来聊聊PhpStudy环境本地多站点虚拟域名配置]]></title>
      <url>/2017/03/08/%E6%9D%A5%E8%81%8A%E8%81%8APhpStudy%E7%8E%AF%E5%A2%83%E6%9C%AC%E5%9C%B0%E5%A4%9A%E7%AB%99%E7%82%B9%E8%99%9A%E6%8B%9F%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>教程在Windows系统下使用PhpStudy在Apache服务器环境搭建本地站点，通过这篇文章你可以学到：<code>修改hosts文件和域名系统的原理</code>，<code>Apache多站点的配置</code>，<code>MarkDown语法以及各平台推荐软件</code>和<code>一些零碎的网络相关知识</code>。</p>
<p>类似于这篇文章，后续我还写了不使用集成环境在Apache和Nginx的虚拟域名本地多站点配置。</p>
</blockquote>
<a id="more"></a>
<h3 id="来聊聊什么是服务器"><a href="#来聊聊什么是服务器" class="headerlink" title="来聊聊什么是服务器"></a>来聊聊什么是服务器</h3><ul>
<li><p>我记得看到过一位老师写的文章，题目是当你在浏览器输入<a href="www.google.com">www.google.com</a>回车后发生了什么？这里就是在谈论这个问题。首先什么是服务器？说白了就是一台电脑，但由于服务器需要提供服务给其他人，所以这机器尽量不能关机。怎么让它连续工作，那就得靠硬件配置和操作系统的内核优化了。</p>
</li>
<li><p>几乎大所数服务器使用Intel架构至强处理器，为甚？多核心高缓存啊！少数使用IBM得power芯片这个不谈。服务器有自己的ECC内存条，总之就是比你我的DDR3，DDR4更加稳定。根据CPU的选择，服务器有自己的主板，而不是什么B75,Z97,B150,H170这种民用主办。服务器系统主要是Windows,Linux和Unix三大阵营。Unix要钱我没玩过，Windows在服务器上有Server2003，2008，2012和2016，分别对应你们桌面版用的XP，WIN7，WIN8，WIN10，操作啥的稍微方便，但是安全性堪忧。总体上使用Linux服务器的公司居多。Linux和MacOS是Unix的儿子女儿，由于Linux内核开源，它又有很多变体出来了。但主要上分为两支：Fordora系列和Debian系列。你们熟知的CentOS和Ubuntu就是这两个分支中的典型代表，具体就不说下去了，蛋疼。</p>
</li>
<li><p>我们必须知道每一台能访问外网的电脑都有一个ip地址，关于ip v4和ip v6，大概就是以前大家都有固定的ip v4地址，但是后来不够用了(32位二进制的缺陷，和千年虫问题一个道理)，然后就来了个超大范围的ip v6，并且把ip v4静态地址换成动态地址，大家都在一个运营商的静态ip v4地址下使用动态ip v6地址。 这个变化要记住，很重要，其原理关系到目前我们为什么不能搭建自己的服务器主机。也就是说，我们都联网的时候，可以通过ip地址或者主机名称进行对话，目前的即时通讯软件就是这个原理辅以Socket协议，ip地址可以理解为主机名称的简写。我们的服务器一直开机，我怎么和它对话呢？</p>
</li>
<li><p>首先你要知道服务器的ip地址咯。由于服务器即使重启也不能让ip变化，否则就像你搬家了，亲戚找不到你。所以服务器需要静态ip地址，知道ip地址其实你们就能交流了。命令行ping命令用来测试你们能否联通，ftp，telnet等一系列命令就是程序员工具。但是服务器还得提供http上得各种服务啊，这就需要HTTP服务器了。</p>
</li>
</ul>
<h3 id="HTTP服务器，域名和DNS"><a href="#HTTP服务器，域名和DNS" class="headerlink" title="HTTP服务器，域名和DNS"></a>HTTP服务器，域名和DNS</h3><ul>
<li><p>上面我们知道了服务器只是一台可能有着特殊硬件、装着特殊系统的PC机，那么很多人不懂什么是HTTP服务器。其实HTTP服务也叫WEB服务器，甚至很多web相关职业者就喜欢叫它服务器，但实际上这只是一个软件！常见的Apache，Nginx，IIS，Tomcat，Jboss，Openresty这些都是WEB服务器。这家伙的作用就是通过http协议沟通外网的终端主机（就是你我的客户端电脑，由于http协议的安全性堪忧，目前越来越多的站点改用https协议，其实就是加了个SSL协议，80端口换403端口），我放一个html文件在WEB服务器指定的目录里面，理论上你就可以在浏览器中输入ip地址看到我这个页面了。但是你记得到几个ip地址呢？</p>
</li>
<li><p>为了方便记忆，域名和DNS这东西又出来了，这其实只是一种映射。我买一个域名叫erchoc.com，把它绑定到WEB服务器的指定目录，以后我输入erchoc.com就可以访问到我的网站了。并且我可以买十个域名，分别映射到服务器是个目录下，这就是多站点(关于顶级域名，二级域名和二级目录这种常识也不讲了)。然而实际上这是不够的，你的域名必须经过DNS服务器解析！我了个去，怎这么多服务器？这还不算多，学习PHP还要会自己配置FTP服务器，Git服务器，Samba服务器。。。。庆幸的是DNS解析有专门的公司在做这件事，也提供了免费解析的服务。很多时候你买域名租阿里云腾讯云云服务器什么虚拟主机（云服务器），这些都是人家帮你搞定了。另外必须吐槽的是，腾讯云所谓的云主机其实就是个虚拟机！</p>
</li>
</ul>
<h3 id="hosts文件是什么"><a href="#hosts文件是什么" class="headerlink" title="hosts文件是什么"></a>hosts文件是什么</h3><ul>
<li><p>好了，原理基本结束。最后hosts文件来说一下。当你在浏览器输入<a href="www.google.com">www.google.com</a>的时候，首先电脑的hosts文件会被扫一遍，然后去这个域名的DNS解析服务器那里看看google.com被解析到了哪个ip地址。然后客户端就在背后请求(简单理解就是缓存)那个ip地址上的HTTP服务器，HTTP服务器在本机把一些业务逻辑用后端代码搞定转换成html文件响应给客户端，然后你就看到大大的Google搜索框了。</p>
</li>
<li><p>其实关于HTTP的知识，叶老师的拓展阅读里面也有专门的讲解，<a href="http://web.3eol.com.cn/Home/Article/article/id/5.html" target="_blank" rel="external">点击阅读HTTP相关知识</a>。</p>
</li>
</ul>
<h3 id="配置Apache的多站点"><a href="#配置Apache的多站点" class="headerlink" title="配置Apache的多站点"></a>配置Apache的多站点</h3><ul>
<li><p>以下操作只要你跟着做就能成功，有不同请截图提问。</p>
</li>
<li><p>首先启动apache，访问localhost或者127.0.0.1出现页面就下一步</p>
</li>
<li><p>用sublime打开hosts文件，在最后部分添加如图两行代码【host文件夹的位置请自行百度】<br><img src="http://upload-images.jianshu.io/upload_images/3995745-f70c9d5ed43d5bbb.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="one.PNG"></p>
</li>
<li><p>然后在apache项目目录下建立erchoc和Hbuilder两个文件夹，分别在里面放一个不同内容的html文件【这个项目目录不是WWW就是htdos，具体还要看你的一键环境包】<br><img src="http://upload-images.jianshu.io/upload_images/3995745-afb502abda87f2ba.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="two.PNG"></p>
</li>
<li><p>重启Apache后分别访问erchoc.apph和hbuilder，app，出现和localhost一样的页面就继续</p>
</li>
<li><p>进入Apache的配置目录，用sublime打开httpd.conf<br><img src="http://upload-images.jianshu.io/upload_images/3995745-eaadb4fd83ffc879.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="three.PNG"></p>
</li>
<li><p>如图，搜索vhost，删除前面的’#‘号保存【开启虚拟域名配置】<br><img src="http://upload-images.jianshu.io/upload_images/3995745-4cd4f9245495ffe6.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="four.PNG"></p>
</li>
<li><p>还是根据上面图的位置找到并用sublime打开httpd-vhost.conf，复制粘贴原有内容两遍【PhpStudy默认位置已经改成了httpd.conf同级目录的vhost.conf】<br><img src="http://upload-images.jianshu.io/upload_images/3995745-00f25e5476fcbbcf.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="five.PNG"></p>
</li>
<li><p>粘贴后修改两行，添加一行ServerName,如图所示<br><img src="http://upload-images.jianshu.io/upload_images/3995745-b876d6567f0d3ae5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="six.PNG"></p>
</li>
<li><p>重启Apache后，浏览器访问erchoc.app和hbuilder.app，看到和localhost完全不同的三个页面即成功。实际山在真实项目开发中的多站点就是这样配置的，Nginx的配置更简单一些。另外，其实phpstudy和wamp的多站点配置是可以手动点点点操作的，由于linux命令行界面不行，所以特意写这篇文章<br><img src="http://upload-images.jianshu.io/upload_images/3995745-e1bfe337f33468f0.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo1.PNG"></p>
</li>
<li><p>现在访问虚拟域名试试</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/3995745-621204533a6c8541.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo2.PNG"></p>
<ul>
<li><p>最后，文章使用MarkDown排版，使用windows上的Sublime插件编写，有兴趣的同学可以自行了解。</p>
</li>
<li><p>推荐Android使用小众轻巧的MarkdownEditors(可以在GitHub搜索并下载到源码)。</p>
</li>
<li><p>推荐喜欢英文写作的同学IA Write，功能强大还能学习英语。</p>
</li>
<li><p>喜欢社区和日志写作推荐使用简书这个平台。</p>
</li>
<li><p>Mac上建议使用Mou这款编辑器，同样支持类似Typora实时预览。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 奇淫巧计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于本学期接触到的数据库设计范式]]></title>
      <url>/2016/12/28/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%AD%A6%E6%9C%9F%E6%8E%A5%E8%A7%A6%E5%88%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>数据库范式（Normal forms）：是用于规范关系型数据库设计，以减少谬误发生和数据冗余的一种准则。</p>
<p>尽管有很多概念定义性的东西，但是在实际使用数据库的过程中仍然有很多不尽人意的地方，下面我通过一些实例简要分析一下范式的特点，也是我对范式的个人理解。本篇博文我们主要看看第一范式（1nf）,第二范式（2nf）,第三范式（3nf）和bcnf范式，其中我们重点关注的就是第一范式。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>第一范式是关系型数据库的基础条件，我将1nf的特点归纳为以下几点：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1.不允许出现重复的行；</div><div class="line"></div><div class="line">2.没有重复的列；</div><div class="line"></div><div class="line">3. 符合原子性</div><div class="line">   - 即每列(或者每个属性)都是不可再分的最小数据单元，</div></pre></td></tr></table></figure>
<ul>
<li>举例说明：列值中含有分隔符或者属性字符串意义相同。</li>
</ul>
<p><img src="http://images.cnblogs.com/cnblogs_com/CareySon/WindowsLiveWriter/ebfdc5eb7fff_14F19/0nf_2.png" alt="不符合第一范式的示例"></p>
<ul>
<li>不难发现右图中Address这一列还可以继续分解为省市县和继续地址，所以现在这样是不符合1nf要求的列不可再分的要求，另外第一范式也要求一张表中不允许出现重复的列，下面是改正后的情况，用AddressId外键关联另一张记录地址的表，地址表用几个字段列详细地记录地址信息。</li>
</ul>
<p><img src="http://images.cnblogs.com/cnblogs_com/CareySon/WindowsLiveWriter/ebfdc5eb7fff_14F19/1nf_2.png" alt="第一范式示例"></p>
<ul>
<li><p>那么符合第一范式带来的好处：减少了代码的繁琐（比如Substring截取函数的频繁使用），提高了查询的效率，方便使用关键字搜索，提高了数据库的性能。</p>
</li>
<li><p>第二范式，2nf依赖1nf，所以满足2nf必须先符合1nf，然后第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</p>
</li>
<li><p>如图所示，我们将Name和City两个属性作为主键，省份这个字段依赖于城市这个字段,同时不依赖于Name这个字段，根据城市可以确定省份。省份跟Name没有关系不符合第二范式。</p>
</li>
<li><p>应该将省市单独拿出来独立成表（AddressID,Province,City）,主表则变成（ID,Name,AddressID），通过AddressID关联。解决了可能存在的数据冗余、插入、删除和更新异常。</p>
</li>
<li><p>第三范式,消除对主键的传递依赖,简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</p>
</li>
<li><p>下面我直接给大家看一个正确的第三范式的例子：</p>
</li>
<li><p>所谓传递依赖就是这样的逻辑：订单编号 &gt;&gt; 客户编号 &gt;&gt; 客户名称 。 这样的依赖不应该在一个表里面(主键是订单编号)，如图，客户名称、所属公司、联系方式，依赖于客户编号，分解成两个表以后消除了非主键的传递依赖。</p>
</li>
<li><p>BCNF(Boyce-Codd normal form)，在3NF的基础上，表中任何字段对任一候选关键字段的传递函数依赖都不存在。</p>
</li>
<li><p>定义：任何F可推导出的函数依赖X-&gt;A都在T中，这里A是不在X中的单一属性，X必须是T的一个超键。当一个数据库模式包含的所有表都符合BCNF时，这个数据库被称为符合BCNF.—这东西实在是太晦涩了。</p>
</li>
<li><p>我的理解：它要求关系模型中所有的属性（包括主属性和非主属性）都不传递依赖于任何候选关键字。也就是说，当关系型表中功能上互相依赖的那些列的每一列都是一个候选关键字时候。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">UserId</th>
<th style="text-align:center">Name</th>
<th style="text-align:center">ProductId</th>
<th style="text-align:center">Email</th>
<th style="text-align:center">ProductName</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Tom</td>
<td style="text-align:center">2</td>
<td style="text-align:center">tom@gmail.com</td>
<td style="text-align:center">榴莲</td>
</tr>
</tbody>
</table>
<ul>
<li>首先应该拆分成两个表</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">UserId</th>
<th style="text-align:center">Name</th>
<th style="text-align:center">Email</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Tom</td>
<td style="text-align:center">tom@gmail.com</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">ProductId</th>
<th style="text-align:center">ProductName</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">榴莲</td>
</tr>
</tbody>
</table>
<ul>
<li>这样没有任何主属性和非主属性的传递依赖了，但是缺少的是UserID 和ProductID的关系，我们还要加入关系表</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">UserId</th>
<th style="text-align:center">ProductId</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<ul>
<li><p>总结：就关系数据库而言，从其他元素中消除数据冗余问题，去除重复往往以减少冗余, 从特定的表中最小化冗余意味着摆脱不必要的数据。 在商业环境中，绝大多数超越第3范式的设计都是不切实际的。 由范式的进阶来看，越高等级的范式所产生的表越多，而在应用程序使用的过程中越多的表Join和查询造成的性能损耗的问题，甚至很多情况下为了兼顾性能和开发我们甚至要做一下反范式的操作，这个我准备接下来单独说一下。</p>
</li>
<li><p>一般认为超过第三范式都是多余的，所以再实际工作中不能太过教条，这里讨论更多是理解概念的一些讨论，通过总结以上这些概念帮助我们更好的设计，但是只有按照实际需求来设计才是王道。</p>
</li>
<li><p>当然，现在服务器配置各种升级，反范式化盛行，NoSQL如日中天。甚至范式等级渐渐淡出人们眼球，以适度的冗余增加查询效率，减少关联查询和外键使用的做法太多太多了。我们可以自行了解目前技术前沿的非关系型数据库，缓存数据库方案。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux无法识别NTFS硬盘怎么办]]></title>
      <url>/2016/12/15/Linux%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%ABNTFS%E7%A1%AC%E7%9B%98%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在桌面版的CentOS使用过程中发现系统无法识别我NTFS格式的移动硬盘，一番搜索后才发现这是因为windows系统常用的硬盘格式是NTFS，和linux下使用的ext系列格式是完全不兼容的。需要挂载到指定目录才能正常访问这个移动硬盘。</p>
<p>开源世界的力量强大，直接造就了ntfs-3g这个软件包。我们安装后即可打开NTFS硬盘并读写其中的数据,但是默认的yum源没有ntfs-3g包,并且该软件包依赖于fuse库.这样的话我们还是来编译安装ntfs-3g这个软件吧。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">yum search fuse</div><div class="line"></div><div class="line">yum install fuse -y</div><div class="line"></div><div class="line">wget http://tuxera.com/opensource/ntfs-3g_ntfsprogs-2016.2.22.tgz</div><div class="line"></div><div class="line">tar -zxvf tar ntfs-3g_ntfsprogs-2016.2.22.tgz</div><div class="line"></div><div class="line">cd ntfs-3g_ntfsprogs-2016.2.26</div><div class="line"></div><div class="line">./configure</div><div class="line"></div><div class="line">make</div><div class="line"></div><div class="line">make install</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一次接触ThinkPHP3.2.3]]></title>
      <url>/2016/12/04/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6ThinkPHP3-2-3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>12点半，刚才交大理工蹭完饭回来。昨晚妹子的那个拖拽上传始终萦绕在我心头，XHR异步上传为什么还要Canvas？这个文件用了AJAX那还算是个前端页面吗？一个布满纯JavaScript的页面我居然连代码都看不懂！</p>
<p>我存起这个用于异步上传的前端代码文件，然后开始对着电脑开始了服务端对上传过来的文件的处理代码的书写<code>form</code>,<code>enctype</code>,<code>file</code>,<code>$_FILES,copy</code>,<code>move_uploaded_file</code>,仅仅是个上传，感觉自己做得也很low。突然想起我建立了一个所谓的极客群，自己却水平这么low，心里很不是滋味。于是打开ThinkPHP官网，打算听学长的直接上手TP框架。下午一点，开始了ThinkPHP3.2的官方手册,这里来说说感慨。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>下载的TP5.0.2完整版和5.0.3核心版，解压后发现文件目录和官方教程不太像，而且网上太多TP3.2的教程，又考虑到基于TP的未来可能使用的zswin1.5后台是用的TP3.2框架，郭佳栋暑假好像说他们公司用的TP3.1，纠结要不要升级3.2这个问题。于是我果断下载了3.2.3完整版，解压出来。</p>
</li>
<li><p>刚接触这东西我胡乱挣扎了近一个小时，总是纠结于哪些文件夹是不需要的（因为官网的phpwind，wordpress，CodeIgniter解压后都只需要一个文件，其他不是说明就是案例）。想起高学长说起文档多好入手，我立刻上git下载官方的chm和pdf文档（ThinkPHP官网也有，担心更新不及时）回忆一下CodeIgniter框架，我先根据官方文档了解了文件目录结构（这也是想起了06届老学长几个月前的提醒），保留单一入口文件index.php，ThinkPHP模块,Application模块，Public模块和重定向文件.htaccess，另一个composer.json记录了ThinkPHP3.2的一些信息和很少的依赖库，我担心这东西有其他用处，暂时还没删除。（因为之前了解到一个叫做composer依赖管理工具，我担心和这个有点关系）。</p>
</li>
<li><p>下午四点左右，我才大概过了一遍目录结构，其中配置部分还是不太了解，目录只在/ThinkPHP/Conf/convention.php内置了一个惯例配置文件，其他几种要么是空文件，要么是起临时作用绑定全局变量的，这个部分不太熟悉。</p>
</li>
<li><p>多次尝试我在这个时候理解了入口文件应该写啥了，可惜TP的配置参数感觉无穷无尽，我根本记不住。比如开发时关闭Runtime缓存，打开TP自带的Debug，绑定后台入口Admin到入口文件等等。（这里问一句：企业里项目的开发，一般后台是用子目录www.AAA.com/admin.php，还是解析一个二级域名admin.AAA.com到同级根目录呢，我认为后者的安全性更高）</p>
</li>
<li><p>下午五点左右我开始觉得得心应手了。刚开始的两三个小时真的是折磨，好几次怀疑高学长说ThinkPHP好入门这句话，庄子暑假都说TP框架比CI难，还麻烦。忍过了这几个小时，感觉前途一片光明，心情大好。虽然现在TP好多东西还在看，什么C方法，M方法，I方法，写TP的也是个奇葩。至于命名规范，TP是支持PSR4的，类和其他方面也有PSR2和PSR3，和已经被淘汰的PSR0写法也差不了多少，类名/函数名/变量名和严格的JAVA语法几乎一致。但是读取配置部分，TP并没有限制配置参数的大小写，官方建议大写，并且附上一句话：“无论大小写定义都会转换成小写”，这我就郁闷了，为了代码的优化应该建议使用小写避免转换才对把？</p>
</li>
<li><p>配置部分继续看下去，继续尝试，数据库配置没看到PDO，默认好像是MySQLi。而且，暑假学习PHP就感觉PHP把C语言的数组发挥的淋漓尽致，ThinkPHP3.2更让我坚定了自己的想法。我在思考TP在控制器种传递两个变量到视图时候，会怎么做？群里两个朋友都异口同声告诉我转换为数组。我认为这并不是很好的做法，尽管数组可以用键值对的方式输出任意多的变量，但是C语言告诉我，同类事物才会用数组存储。我一个time，可能是2个字节的int型（时间戳），也可能是4或者8个字节；但是其他一些变量可以是name，resource；碰到加个file本来就是二维数组的变量就更加蛋疼（有点像数据表列的冗余，需要大表拆分处理），难道我要写n行$this-&gt;assign()吗？我无法得到答案，只能暂时认同了他们的说法，认为ThinkPHP也把数组作为了重点。</p>
</li>
<li><p>官方文档的学习路线是这样的：基础-配置-架构-路由-控制器-模型-视图-模板-调试-缓存-安全-拓展-部署-专题-附录。我本想今晚通宵看完文档，明后天跟着极客，慕课和PHP100的实战项目走的，腾讯云和TP官方还有相应的上线案例，git的开源项目，已经部署的zswin1.5后台TP模板。现在想想还是多花两天过第一遍文档把，CI的路由类我暑假没好好看，MVC的开发我受到庄子的影响没严格把业务逻辑层分开，暑假的CI项目我也没好好完成；TP的模板技术对我而言就是新知识，因为此前我也没用过Smarty模板；GD库的操作我也只是稍微了解了一下；缓存知识暑假也几乎没讲，只稍微涉及了一下sesession用法，甚至客户端cookie也没接触，更别提memcache，Redis和Mongo这种高性能内存数据库了。</p>
</li>
<li><p>最近Server2016的无线网络还是不能使用，听说Server2012之后默认服务器管理器不安装LAN无线驱动，我更新后还是不行；Server2016用win10激活工具居然无法激活也是个问题；win10能正常安装的软件到了Server2016上却无法安装也是个问题！虽然我不得不说Server2016比Server2012好用很多，界面上又比Server2003和Server2008清新爽快，但是微软系统这服务器管理器就不能卸载去吗，真恶心！</p>
</li>
<li><p>至于CentOS7，网易镜像站最新版本还是1511，min版本各种缺损，网络配置必须在命令行完成，ifconfig无法使用，yum无法正常升级，DNS服务器配置目录辣么多个，我技术不行，能简单点吗？？换上4G完整版的CentOS7，Gnome桌面环境加开发者工具，安装前桥接宿主机，发现ping正常，网页无法打开！这绝绝逼又是DNS解析问题，妈蛋，搞了两天都失败。想尝试windows10新技术Hyper-V，又告诉我不能和VM兼容，安装CentOS还需要往镜像修改添加依赖文件，</p>
</li>
<li><p>这这这。。。。我还是老老实实拍黄片去吧。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我使用的Chrome快捷键]]></title>
      <url>/2016/11/17/%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84Chrome%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是我在windows平台上常用的几个Chrome快捷键，使用MacOS开发后快捷键变化确实挺大，于是我在尽量把MacOS上的各种开发环境快捷键绑定为Windows兼容版，并放在github中作为开源项目也服务他人，包括但不局限于Atom，PhpStorm，Sublime Text3，QQ，Chrome，Firefox，OS等快捷键。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">F12 开发者调试</div><div class="line"></div><div class="line">Ctrl+N 打开新的窗口</div><div class="line"></div><div class="line">Alt+F4 关闭当前窗口</div><div class="line"></div><div class="line">Shift+ESC 查看Chrome的任务管理器，用来关闭卡死或者占用资源多的子进程</div><div class="line"></div><div class="line">Ctrl+J 打开“下载”页面</div><div class="line"></div><div class="line">Ctrl+H 打开“历史记录”页面</div><div class="line"></div><div class="line">Ctrl+T 打开新的标签页</div><div class="line"></div><div class="line">Ctrl+W 关闭当前标签页</div><div class="line"></div><div class="line">Ctrl+F 在当前页面查找</div><div class="line"></div><div class="line">Ctrl+Shift+B 打开或关闭书签栏</div><div class="line"></div><div class="line">Ctrl+L 光标回到搜索栏（F6也有相似功能）</div><div class="line"></div><div class="line">搜索栏回车在当前页面搜索，Alt+Enter在新标签页搜索</div><div class="line"></div><div class="line">Ctrl+Enter 输入erchoc，然后Ctrl+Enter就会自动填充为www.erchoc.com并打开</div><div class="line"></div><div class="line">F3或者Ctrl+G  查找下一个</div><div class="line"></div><div class="line">Ctrl+U 查看源代码（页面右键有时不行）</div><div class="line"></div><div class="line">Ctrl+P 打印当前页面</div><div class="line"></div><div class="line">Alt+鼠标点击 下载链接资源</div><div class="line"></div><div class="line">ESC 停止刷新和加载</div><div class="line"></div><div class="line">F5 刷新加载（Safari不支持）</div><div class="line"></div><div class="line">Ctrl+F5 重新刷新加载，但忽略缓存内容（听起来很实用有咩有）</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 奇淫巧计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我使用的SUblime快捷键]]></title>
      <url>/2016/11/15/%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84SUblime%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下是个人不完全总结的Sublime的快捷键，主要包括<code>选择类</code>，<code>编辑类</code>，<code>搜索类</code>，<code>显示类</code>四种快捷键，祝愿各位顺利解放自己的鼠标。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>选择类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。</div><div class="line"></div><div class="line">Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。</div><div class="line">举个栗子：快速选中并更改所有相同的变量名、函数名等。</div><div class="line"></div><div class="line">Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。</div><div class="line"></div><div class="line">Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</div><div class="line"></div><div class="line">Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。</div><div class="line">举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</div><div class="line"></div><div class="line">Ctrl+M 光标移动至括号内结束或开始的位置。</div><div class="line"></div><div class="line">Ctrl+Enter 在下一行插入新行。</div><div class="line">举个栗子：即使光标不在行尾，也能快速向下插入一行。</div><div class="line"></div><div class="line">Ctrl+Shift+Enter 在上一行插入新行。</div><div class="line">举个栗子：即使光标不在行首，也能快速向上插入一行。</div><div class="line"></div><div class="line">Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。</div><div class="line"></div><div class="line">Ctrl+Shift+] 选中代码，按下快捷键，展开代码。</div><div class="line"></div><div class="line">Ctrl+K+0 展开所有折叠代码。</div><div class="line"></div><div class="line">Ctrl+← 向左单位性地移动光标，快速移动光标。</div><div class="line"></div><div class="line">Ctrl+→ 向右单位性地移动光标，快速移动光标。</div><div class="line"></div><div class="line">shift+↑ 向上选中多行。</div><div class="line"></div><div class="line">shift+↓ 向下选中多行。</div><div class="line"></div><div class="line">Shift+← 向左选中文本。</div><div class="line"></div><div class="line">Shift+→ 向右选中文本。</div><div class="line"></div><div class="line">Ctrl+Shift+← 向左单位性地选中文本。</div><div class="line"></div><div class="line">Ctrl+Shift+→ 向右单位性地选中文本。</div><div class="line"></div><div class="line">Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</div><div class="line"></div><div class="line">Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</div><div class="line"></div><div class="line">Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。</div><div class="line"></div><div class="line">Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。</div></pre></td></tr></table></figure>
<ul>
<li>编辑类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Ctrl+J 合并选中的多行代码为一行。</div><div class="line">举个栗子：将多行格式的CSS属性合并为一行。</div><div class="line"></div><div class="line">Ctrl+Shift+D 复制光标所在整行，插入到下一行。</div><div class="line"></div><div class="line">Tab 向右缩进。</div><div class="line"></div><div class="line">Shift+Tab 向左缩进。</div><div class="line"></div><div class="line">Ctrl+K+K 从光标处开始删除代码至行尾。</div><div class="line"></div><div class="line">Ctrl+Shift+K 删除整行。</div><div class="line"></div><div class="line">Ctrl+/ 注释单行。</div><div class="line"></div><div class="line">Ctrl+Shift+/ 注释多行。</div><div class="line"></div><div class="line">Ctrl+K+U 转换大写。</div><div class="line"></div><div class="line">Ctrl+K+L 转换小写。</div><div class="line"></div><div class="line">Ctrl+Z 撤销。</div><div class="line"></div><div class="line">Ctrl+Y 恢复撤销。</div><div class="line"></div><div class="line">Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。</div><div class="line"></div><div class="line">Ctrl+F2 设置书签</div><div class="line"></div><div class="line">Ctrl+T 左右字母互换。</div><div class="line"></div><div class="line">F6 单词检测拼写</div></pre></td></tr></table></figure>
<ul>
<li>搜索类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Ctrl+F 打开底部搜索框，查找关键字。</div><div class="line"></div><div class="line">Ctrl+shift+F 在文件夹内查找，sublime允许添加多个文件夹进行查找。</div><div class="line"></div><div class="line">Ctrl+P 打开搜索框。</div><div class="line">举个栗子：</div><div class="line">1、输入当前项目中的文件名，快速搜索文件，</div><div class="line">2、输入@和关键字，查找文件中函数名，</div><div class="line">3、输入：和数字，跳转到文件中该行代码，</div><div class="line">4、输入#和关键字，查找变量名。</div><div class="line"></div><div class="line">Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。</div><div class="line">举个栗子：在页面代码比较长的文件中快速定位。</div><div class="line"></div><div class="line">Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。</div><div class="line">举个栗子：在函数较多的页面快速查找某个函数。</div><div class="line"></div><div class="line">Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</div><div class="line"></div><div class="line">Ctrl+Shift+P 打开命令框。</div><div class="line">举个栗子：打开命名框输入关键字，调sublime插件的功能如使用packagecontrol安装插件。</div><div class="line"></div><div class="line">Esc 退出光标多行选择，退出搜索框，命令框等。</div></pre></td></tr></table></figure>
<ul>
<li>显示类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。</div><div class="line"></div><div class="line">Ctrl+PageDown 向左切换当前窗口的标签页。</div><div class="line"></div><div class="line">Ctrl+PageUp 向右切换当前窗口的标签页。</div><div class="line"></div><div class="line">Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）</div><div class="line"></div><div class="line">Alt+Shift+2 左右分屏-2列</div><div class="line"></div><div class="line">Alt+Shift+3 左右分屏-3列</div><div class="line"></div><div class="line">Alt+Shift+4 左右分屏-4列</div><div class="line"></div><div class="line">Alt+Shift+5 等分4屏</div><div class="line"></div><div class="line">Alt+Shift+8 垂直分屏-2屏</div><div class="line"></div><div class="line">Alt+Shift+9 垂直分屏-3屏</div><div class="line"></div><div class="line">Ctrl+K+B 开启/关闭侧边栏。</div><div class="line"></div><div class="line">F11 全屏模式</div><div class="line"></div><div class="line">Shift+F11 免打扰模式</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 奇淫巧计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016年下半年原定计划]]></title>
      <url>/2016/10/20/2016%E5%B9%B4%E4%B8%8B%E5%8D%8A%E5%B9%B4%E5%8E%9F%E5%AE%9A%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<blockquote>
<p>人要有梦想，先定个大目标，说不定哪天实现了呢？技术学习路上，当你还是个门外汉，你的目标就是做个网站，做个手机游戏软件，做个走路说话的机器人。可当你在这条路上走开了，你能实现那些目标了，就会有新的目标。所以，大的目标不需要太具体，一句话，一个词甚至一个数字就足以成为你的大目标。</p>
<p>我们常说的脚踏实地，就是为了这个大目标，好好去指定具体路线，学习基础知识！学习的具体路线各种各样，每个人都可以有自己的路线，每个人的路线都可以修改更变很多次。有时候我们的未完成事由于期望过高，但这也是对自己的的一种激励，让自己更快更高强度的冲刺。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>以时间为周期的项目导向和目标驱动方案。最简单地说就是，这个月我要学完C语言，并且能做出贪吃蛇游戏，自我进行质量评测不低于6分！</li>
</ul>
<p>这种方案也称“制定短期目标”，2016-7-13是我结束大一开始为期38天(至2016-8-29)培训的日子，也可以认为是我正式踏上技术道路的开始。我的短期目标以半年为一周期，并将坚持制定和完成相应目标。截止2016-10–20发表博文，以下是这半年的具体学习线路:</p>
<p>①PHP体系完善，包括cms和php框架入门<br>(phpwind和wordpress)(CodeIgniter和ThinkPHP)</p>
<p>②准备十一月份软考中级网络工程师认证。</p>
<p>③SQL Server和MySQL的对比学习。</p>
<p>④数据结构与算法的C/C++实现，有空用了解PHP内存管理机制并实现相应算法。</p>
<p>⑤HTML+CSS+原生JavaScript代码规范(看开源项目代码)，项目驱动。</p>
<p>⑥微信公用号常用功能开发，即刻惠网站。</p>
<p>⑦十二月份开始Java基础，并将JSP和PHP进行对比学习，不要求设计框架和优化。</p>
<p>周期性成果展示(即学期侧重点):<br>CodeIgniter即刻惠网站开发+微信公众号接口链接。</p>
<p>END</p>
]]></content>
      
        
        <tags>
            
            <tag> 系统规划 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
